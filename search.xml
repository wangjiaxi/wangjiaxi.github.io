<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Flume+Kafka实时数据采集</title>
    <url>/2019/04/04/Flume-Kafka%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/</url>
    <content><![CDATA[<p>Flume的配置</p>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># avro-memory-kafka.conf</span></span><br><span class="line">avro-memory-kafka.sources = avro-source</span><br><span class="line">avro-memory-kafka.sinks = kafka-sink</span><br><span class="line">avro-memory-kafka.channels = memory-channel</span><br><span class="line"></span><br><span class="line">avro-memory-kafka.sources.avro-source.type = avro</span><br><span class="line">avro-memory-kafka.sources.avro-source.bind = bigdata-01</span><br><span class="line">avro-memory-kafka.sources.avro-source.port = 44444</span><br><span class="line"></span><br><span class="line">avro-memory-kafka.sinks.kafka-sink.type = org.apache.flume.sink.kafka.KafkaSink</span><br><span class="line">avro-memory-kafka.sinks.kafka-sink.brokerList = bigdata-01:9092</span><br><span class="line">avro-memory-kafka.sinks.kafka-sink.topic = hello_topic</span><br><span class="line">avro-memory-kafka.sinks.kafka-sink.batchSize = 5</span><br><span class="line">avro-memory-kafka.sinks.kafka-sink.requiredAcks = 1</span><br><span class="line"></span><br><span class="line">avro-memory-kafka.channels.memory-channel.type = memory</span><br><span class="line"></span><br><span class="line">avro-memory-kafka.sources.avro-source.channels = memory-channel</span><br><span class="line">avro-memory-kafka.sinks.kafka-sink.channel = memory-channel</span><br></pre></td></tr></table></figure>
<p>启动Flume</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flume-ng agent \</span><br><span class="line">--name avro-memory-kafka \</span><br><span class="line">--conf <span class="variable">$FLUME_HOME</span>/conf \</span><br><span class="line">--conf-file <span class="variable">$FLUME_HOME</span>/conf/avro-memory-kafka.conf \</span><br><span class="line">-Dflume.root.logger=INFO,console</span><br><span class="line"></span><br><span class="line">flume-ng agent \</span><br><span class="line">--name exec-memory-avro \</span><br><span class="line">--conf <span class="variable">$FLUME_HOME</span>/conf \</span><br><span class="line">--conf-file <span class="variable">$FLUME_HOME</span>/conf/exec-memory-avro.conf \</span><br><span class="line">-Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure>

<p>启动消费者进行监控</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kafka-console-consumer.sh --zookeeper bigdata-01:2181 -topic hello_topic</span><br></pre></td></tr></table></figure>

<p>向日志文件中追加内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bigdata-01 ~]<span class="comment"># cd data/</span></span><br><span class="line">[root@bigdata-01 data]<span class="comment"># ll</span></span><br><span class="line">total 4</span><br><span class="line">-rw-r--r--. 1 root root 112 Feb  6 05:37 data.log</span><br><span class="line">[root@bigdata-01 data]<span class="comment"># echo hellospark &gt;&gt; data.log </span></span><br><span class="line">[root@bigdata-01 data]<span class="comment"># echo hellospark2 &gt;&gt; data.log </span></span><br><span class="line">[root@bigdata-01 data]<span class="comment"># echo hellospark3 &gt;&gt; data.log </span></span><br><span class="line">[root@bigdata-01 data]<span class="comment"># echo hellospark4 &gt;&gt; data.log </span></span><br><span class="line">[root@bigdata-01 data]<span class="comment"># echo hellospark5 &gt;&gt; data.log</span></span><br></pre></td></tr></table></figure>
<p>这时，消费者就可以消费到日志文件中的新内容了。</p>
<blockquote>
<p>Flume的版本不同，配置文件（*.conf）需要配置的内容也不完全相同。</p>
</blockquote>
]]></content>
      <categories>
        <category>大数据开发</category>
      </categories>
      <tags>
        <tag>大数据开发</tag>
      </tags>
  </entry>
  <entry>
    <title>HDFS基本配置属性</title>
    <url>/2019/04/04/HDFS%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h1 id="块大小"><a href="#块大小" class="headerlink" title="块大小"></a>块大小</h1><p>HDFS中存储的文件块的块大小，默认128M</p>
<p>参数：dfs.blocksize </p>
<p>默认：134217728</p>
<p>此参数用于客户端程序，也就是说，HDFS里面存储的文件块的<strong>块大小</strong>完全由客户端决定</p>
<span id="more"></span>

<h1 id="副本数量"><a href="#副本数量" class="headerlink" title="副本数量"></a>副本数量</h1><p>HDFS中存储的文件快可以有多个副本，默认3个</p>
<p>参数：dfs.replication</p>
<p>默认：3</p>
<p>此参数用于客户端程序，也就是说，HDFS里面存储的文件块的<strong>副本数</strong>完全由客户端决定</p>
<blockquote>
<p>为什么要默认3个？<br>第一个副本：存在离客户端系统最近的一台DataNode上；<br>第二个副本：存在跟上一台DataNode相同的机架的另一台DataNode上；<br>第三个副本：存在另一个机架上的某台DataNode上</p>
</blockquote>
<h1 id="NameNode元数据存储目录"><a href="#NameNode元数据存储目录" class="headerlink" title="NameNode元数据存储目录"></a>NameNode元数据存储目录</h1><p>元数据存储目录就是NameNode的工作目录，其位置由以下参数决定：</p>
<p>参数：dfs.namenode.name.dir</p>
<p>默认：file://${hadoop.tmp.dir}/dfs/name</p>
<p>此参数是给服务端程序NameNode使用</p>
<p>此参数默认值<strong>在生产中</strong>并不合适，应该给NameNode专门配置一个安全的位置作为工作目录</p>
<p>正确做法：应该给NameNode配置多个目录，而且这多个目录应该挂载不同的磁盘</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/mnt/disk1,/mnt/disk2,/mnt/disk3,nfs://<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置多个目录后，NameNode会往个目录中写入==相同的数据==作为冗余备份</p>
<h1 id="DataNode文件块存储目录"><a href="#DataNode文件块存储目录" class="headerlink" title="DataNode文件块存储目录"></a>DataNode文件块存储目录</h1><p>DataNode的工作目录也是参数可配的：</p>
<p>参数：dfs.datanode.data.dir</p>
<p>默认：file://${hadoop.tmp.dir}/dfs/data</p>
<p>默认配置在生产系统中并不合适，应该让DataNode的工作目录指定到服务器上用于存储数据的多块数据磁盘上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/disk1,/data/disk2,/data/disk3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置多个目录后，NameNode会往个目录中写入==不同的数据==，以扩大DataNode自身的容量</p>
<h1 id="HDFS动态扩容"><a href="#HDFS动态扩容" class="headerlink" title="HDFS动态扩容"></a>HDFS动态扩容</h1><p>扩容就是增加DataNode，DataNode可以在线扩容。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>准备一台服务器，配置好环境：网络、IP、防火墙、免密登录、JDK；</li>
<li>从原集群的任意一台机器上复制Hadoop安装包到新机器上；</li>
<li>在原集群的slaves文件中添加新机器的主机名；</li>
<li>在新机器上启动DataNode即可。</li>
</ol>
<h2 id="DataNode启动方法"><a href="#DataNode启动方法" class="headerlink" title="DataNode启动方法"></a>DataNode启动方法</h2><ol>
<li>直接用<code>start-dfs.sh</code></li>
<li>在新机器上手动启动一个DataNode进程：<code>hadoop-daemon.sh start datanode</code></li>
</ol>
]]></content>
      <categories>
        <category>大数据开发</category>
      </categories>
      <tags>
        <tag>大数据开发</tag>
      </tags>
  </entry>
  <entry>
    <title>HDFS客户端API</title>
    <url>/2019/04/04/HDFS%E5%AE%A2%E6%88%B7%E7%AB%AFAPI/</url>
    <content><![CDATA[<p>手动导入需要用的jars，也可以使用maven。</p>
<span id="more"></span>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HDFS的客户端api功能无非就是操作HDFS上的文件或文件夹</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HdfsClientDemo</span> </span>&#123;</span><br><span class="line">	FileSystem hdfsClient;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Before</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">		conf.addResource(<span class="string">&quot;myconf.xml&quot;</span>);</span><br><span class="line">		conf.set(<span class="string">&quot;dfs.replication&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">		conf.set(<span class="string">&quot;dfs.blocksize&quot;</span>, <span class="string">&quot;32m&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 创建一个HDFS客户端对象</span></span><br><span class="line">		hdfsClient = FileSystem.get(<span class="keyword">new</span> URI(<span class="string">&quot;hdfs://hdp-nn-01:9000/&quot;</span>), conf, <span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 上传一个文件</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPutFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		hdfsClient.copyFromLocalFile(<span class="keyword">new</span> Path(<span class="string">&quot;d:/jdk-8u191-linux-x64.tar.gz&quot;</span>), <span class="keyword">new</span> Path(<span class="string">&quot;/jdk8.gz&quot;</span>));</span><br><span class="line">		hdfsClient.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 测试取文件</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		hdfsClient.copyToLocalFile(<span class="keyword">false</span>, <span class="keyword">new</span> Path(<span class="string">&quot;/jdk8.gz&quot;</span>), <span class="keyword">new</span> Path(<span class="string">&quot;d:/&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line">		hdfsClient.close();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意</strong>：HDFS客户端从HDFS上读取数据写入本地磁盘时，可以使用Hadoop自己开发的本地库操作，也可以使用java 的原生库来操作本地文件。 参数就是useRawLocalFileSystem，如果为true，则使用java原生库；false则使用Hadoop自己的本地库。如果要使用Hadoop的本地库来操作本地文件，要配置Hadoop在本地的环境。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 文件夹创建</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMkdir</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// 如果创建文件夹时，指定权限信息，但创建的结果并不会跟指定的信息完全一致，因为想指定的信息还会经过一个参数值的掩码运算</span></span><br><span class="line">		hdfsClient.mkdirs(<span class="keyword">new</span> Path(<span class="string">&quot;/xxx/yyy&quot;</span>), <span class="keyword">new</span> FsPermission((<span class="keyword">short</span>) <span class="number">777</span>));</span><br><span class="line">		hdfsClient.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 文件夹删除</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeldir</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">		hdfsClient.delete(<span class="keyword">new</span> Path(<span class="string">&quot;/xxx&quot;</span>), <span class="keyword">true</span>);</span><br><span class="line">		hdfsClient.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 文件夹重命名</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRenamedir</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">		hdfsClient.rename(<span class="keyword">new</span> Path(<span class="string">&quot;/xxx&quot;</span>), <span class="keyword">new</span> Path(<span class="string">&quot;/ooo&quot;</span>));</span><br><span class="line">		hdfsClient.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据开发</category>
      </categories>
      <tags>
        <tag>大数据开发</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS下使用VS Code搭建C语言开发环境</title>
    <url>/2022/03/01/MacOS%E4%B8%8B%E4%BD%BF%E7%94%A8VS-Code%E6%90%AD%E5%BB%BAC%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>本篇介绍如何在Mac上使用VS Code写C语言代码。VS Code是一个轻量级的IDE，相比CLion、Xcode等等体积小很多，并且在插件市场拥有丰富的插件，可以方便的安装使用。</p>
<span id="more"></span>

<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="下载VS-Code"><a href="#下载VS-Code" class="headerlink" title="下载VS Code"></a>下载VS Code</h2><p>下载地址：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p>
<blockquote>
<p><img src="/2022/03/01/MacOS%E4%B8%8B%E4%BD%BF%E7%94%A8VS-Code%E6%90%AD%E5%BB%BAC%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/1.png" alt="1"></p>
</blockquote>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>打开VS Code，点击左侧的 Extensions（图标为“田”字右上角的格子起飞），在搜索框中输入 <code>C/C++</code>，选择紫色图标，作者为Microsoft，点击 Install 即可安装。</p>
<blockquote>
<p><img src="/2022/03/01/MacOS%E4%B8%8B%E4%BD%BF%E7%94%A8VS-Code%E6%90%AD%E5%BB%BAC%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/3.png" alt="3"></p>
</blockquote>
<h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><p>在电脑中你希望保存代码的地方新建一个文件夹，我的是 <code>桌面-个人-学习-C/C++</code> ，创建好以后重启 VS Code。重启后，在欢迎页面点击 Open，并打开你刚创建的文件夹。</p>
<blockquote>
<p><img src="/2022/03/01/MacOS%E4%B8%8B%E4%BD%BF%E7%94%A8VS-Code%E6%90%AD%E5%BB%BAC%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/4.png" alt="4"></p>
</blockquote>
<h2 id="另存为一个工作区"><a href="#另存为一个工作区" class="headerlink" title="另存为一个工作区"></a>另存为一个工作区</h2><p>点击 File &gt; Save Workspace As …，并命名。</p>
<blockquote>
<p><img src="/2022/03/01/MacOS%E4%B8%8B%E4%BD%BF%E7%94%A8VS-Code%E6%90%AD%E5%BB%BAC%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/5.png" alt="5"></p>
</blockquote>
<h2 id="新建一个C文件，命名并保存"><a href="#新建一个C文件，命名并保存" class="headerlink" title="新建一个C文件，命名并保存"></a>新建一个C文件，命名并保存</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;hello VSCode!\n&quot;</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="配置-c-cpp-properties-json"><a href="#配置-c-cpp-properties-json" class="headerlink" title="配置 c_cpp_properties.json"></a>配置 <code>c_cpp_properties.json</code></h2><p>使用快捷键 <code>command</code> + <code>shift</code> + <code>P</code>打开命令行面板（Command Palette）</p>
<p>输入 edit configurations，在弹出的列表中选择带 JSON 的 C/C++: Edit Configurations(JSON)</p>
<blockquote>
<p><img src="/2022/03/01/MacOS%E4%B8%8B%E4%BD%BF%E7%94%A8VS-Code%E6%90%AD%E5%BB%BAC%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/6.png" alt="6"></p>
</blockquote>
<p>配置字段 includePath：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;includePath&quot;</span>: </span><br><span class="line">[</span><br><span class="line">    <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span>,</span><br><span class="line">    <span class="string">&quot;/Library/Developer/CommandLineTools/usr/include/c++/v1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;/usr/local/include&quot;</span>,</span><br><span class="line">    <span class="string">&quot;/Library/Developer/CommandLineTools/usr/lib/clang/11.0.0/include&quot;</span>,</span><br><span class="line">    <span class="string">&quot;/Library/Developer/CommandLineTools/usr/include&quot;</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<p>你可能需要注意<br> <code>&quot;/Library/Developer/CommandLineTools/usr/lib/clang/11.0.0/include&quot;,</code>中的版本号，可以进入Finder，按快捷键<code>command</code> + <code>shift</code> + <code>G</code> 输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/Library/Developer/CommandLineTools/usr/lib/clang/</span><br></pre></td></tr></table></figure>

<p>在文件夹中查看clang版本</p>
<blockquote>
<p><img src="/2022/03/01/MacOS%E4%B8%8B%E4%BD%BF%E7%94%A8VS-Code%E6%90%AD%E5%BB%BAC%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/8.png" alt="8"></p>
</blockquote>
<p>完成后保存。</p>
<h2 id="配置-tasks-json"><a href="#配置-tasks-json" class="headerlink" title="配置 tasks.json"></a>配置 <code>tasks.json</code></h2><p>在打开.c文件的情况下（比如我这里的hello.c）打开命令行面板 <code>command</code> + <code>shift</code> + <code>P</code>，输入tasks:configure task，选择Tasks: Configure Task</p>
<blockquote>
<p><img src="/2022/03/01/MacOS%E4%B8%8B%E4%BD%BF%E7%94%A8VS-Code%E6%90%AD%E5%BB%BAC%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/9.png" alt="9"></p>
</blockquote>
<p>点击C/C++:clang 生成活动文件</p>
<blockquote>
<p><img src="/2022/03/01/MacOS%E4%B8%8B%E4%BD%BF%E7%94%A8VS-Code%E6%90%AD%E5%BB%BAC%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/10.png" alt="10"></p>
</blockquote>
<p>这里我们需要配置 args 字段</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;args&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;-g&quot;</span>,<span class="comment">//编译命令</span></span><br><span class="line">    <span class="string">&quot;$&#123;workspaceFolder&#125;/hello.c&quot;</span>,<span class="comment">//当前workspace下的hello.c文件</span></span><br><span class="line">    <span class="string">&quot;-o&quot;</span>,<span class="comment">//输出文件命令</span></span><br><span class="line">    <span class="string">&quot;$&#123;workspaceFolder&#125;/hello.o&quot;</span><span class="comment">//生成的可执行文件的路径及名称</span></span><br><span class="line">    ],</span><br></pre></td></tr></table></figure>

<p>你需要配置第二个参数和第四个参数，第二个是编制的文件路径，我这里是 <code>&#123;workspaceFolder&#125;/hello.c</code>，第四个是生成的可执行文件路径，我这里是 <code>&#123;workspaceFolder&#125;/hello.o</code> ，完成后保存。</p>
<h2 id="配置launch-json"><a href="#配置launch-json" class="headerlink" title="配置launch.json"></a>配置<code>launch.json</code></h2><p>在 hello.c 中按<code>Fn</code> + <code>F5</code> ，软件会报错并自动打开一个 <code>launch.json</code> 文件，这里需要配置 <code>program</code> 字段：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/hello.o&quot;</span>,</span><br></pre></td></tr></table></figure>

<p>再次运行：</p>
<blockquote>
<p><img src="/2022/03/01/MacOS%E4%B8%8B%E4%BD%BF%E7%94%A8VS-Code%E6%90%AD%E5%BB%BAC%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/11.png" alt="11"></p>
</blockquote>
<hr>
<blockquote>
<p>部分内容转自 <a href="https://www.jianshu.com/u/69abdc363757">Robinone</a> 的 <a href="https://www.jianshu.com/p/83879b4aa3fe">https://www.jianshu.com/p/83879b4aa3fe</a></p>
</blockquote>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>IDE</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac提示「软件已损坏，请移到废纸篓」解决</title>
    <url>/2022/02/18/Mac%E6%8F%90%E7%A4%BA%E3%80%8C%E8%BD%AF%E4%BB%B6%E5%B7%B2%E6%8D%9F%E5%9D%8F%EF%BC%8C%E8%AF%B7%E7%A7%BB%E5%88%B0%E5%BA%9F%E7%BA%B8%E7%AF%93%E3%80%8D%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<blockquote>
<p>在使用macOS安装<strong>某些</strong>软件时，系统可能会提示「xxx已损坏，请移到废纸篓」</p>
</blockquote>
<p>结论：打开终端，输入一下命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">xattr -r -d com.apple.quarantine /Applications/APP名</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p><strong>请确保软件的安全性。</strong></p>
<p><strong>请确保软件的安全性。</strong></p>
<p><strong>请确保软件的安全性。</strong></p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ol>
<li>打开终端</li>
<li>输入以下命令</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">xattr -r -d com.apple.quarantine /Applications/APP名</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>重新运行该程序</li>
</ol>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>以上命令能够移除这个应用的安全隔离属性。</p>
<hr>
<blockquote>
<p>注意：app名如果包含空格，使用 <code>\</code> 转义</p>
<p>出处：<a href="https://www.jianshu.com/p/6f02003b767f">https://www.jianshu.com/p/6f02003b767f</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>Matplotlib绘制引力波</title>
    <url>/2019/04/04/Matplotlib%E7%BB%98%E5%88%B6%E5%BC%95%E5%8A%9B%E6%B3%A2/</url>
    <content><![CDATA[<p>2016年6月16日，LIGO合作组宣布2015年12月26日 03:38:53（UTC），两台不同位置的引力波探测器同时探测到了一个引力波信号。</p>
<span id="more"></span>
<h1 id="引力波"><a href="#引力波" class="headerlink" title="引力波"></a>引力波</h1><p>物理学中，引力波是因为时空弯曲对外以辐射形式传播的能量。<br>爱因斯坦基于广义相对论语言了引力波的存在。<br>2016年6月16日，LIGO合作组宣布2015年12月26日 03:38:53（UTC），两台不同位置的引力波探测器同时探测到了一个引力波信号。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created on Sun Feb 24 10:17:31 2019</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: Administrator</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#引力波</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> wavfile</span><br><span class="line"></span><br><span class="line"><span class="comment">#产生时间序列</span></span><br><span class="line">rate_h, hstrain = wavfile.read(<span class="string">r&quot;H1_Strain.wav&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">rate_l, lstrain = wavfile.read(<span class="string">r&quot;L1_Strain.wav&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">reftime, ref_H1 = np.genfromtxt(<span class="string">&#x27;wf_template.txt&#x27;</span>).transpose()</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取应变数据</span></span><br><span class="line">htime_interval = <span class="number">1</span> / rate_h</span><br><span class="line">ltime_interval = <span class="number">1</span> / rate_l</span><br><span class="line"></span><br><span class="line">htime_len = hstrain.shape[<span class="number">0</span>] / rate_h</span><br><span class="line">htime = np.arange(-htime_len / <span class="number">2</span>, htime_len / <span class="number">2</span>, htime_interval)</span><br><span class="line">ltime_len = lstrain.shape[<span class="number">0</span>] / rate_l</span><br><span class="line">ltime = np.arange(-ltime_len / <span class="number">2</span>, ltime_len / <span class="number">2</span>, ltime_interval)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用来自“H1”探测器的数据作图</span></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">12</span>, <span class="number">6</span>))  <span class="comment">#创建一个12*6的绘图空间</span></span><br><span class="line"></span><br><span class="line">plth = fig.add_subplot(<span class="number">221</span>)</span><br><span class="line">plth.plot(htime, hstrain, <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plth.set_xlabel(<span class="string">&#x27;Time(seconds)&#x27;</span>)</span><br><span class="line">plth.set_ylabel(<span class="string">&#x27;H1 Strain&#x27;</span>)</span><br><span class="line">plth.set_title(<span class="string">&#x27;H1 Strain&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制L1 Strain 和 Template</span></span><br><span class="line">pltl = fig.add_subplot(<span class="number">222</span>)</span><br><span class="line">pltl.plot(ltime, lstrain, <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">pltl.set_xlabel(<span class="string">&#x27;Time(seconds)&#x27;</span>)</span><br><span class="line">pltl.set_ylabel(<span class="string">&#x27;L1 Strain&#x27;</span>)</span><br><span class="line">pltl.set_title(<span class="string">&#x27;L1 Strain&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pltref = fig.add_subplot(<span class="number">212</span>)</span><br><span class="line">pltref.plot(reftime, ref_H1, <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">pltref.set_xlabel(<span class="string">&#x27;Time(seconds)&#x27;</span>)</span><br><span class="line">pltref.set_ylabel(<span class="string">&#x27;Template Strain&#x27;</span>)</span><br><span class="line">pltref.set_title(<span class="string">&#x27;Template&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#自动调整图像外部边缘</span></span><br><span class="line">fig.tight_layout()</span><br><span class="line"></span><br><span class="line">plt.savefig(<span class="string">&quot;Gravitational_Waves_Original.png&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">plt.close(fig)</span><br></pre></td></tr></table></figure>

<h1 id="图像展示"><a href="#图像展示" class="headerlink" title="图像展示"></a>图像展示</h1><p><img src="/2019/04/04/Matplotlib%E7%BB%98%E5%88%B6%E5%BC%95%E5%8A%9B%E6%B3%A2/Gravitational_Waves_Original.png" alt="Gravitational_Waves_Original.png"></p>
<h1 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h1><p><a href="http://python123.io/dv/grawave.html">http://python123.io/dv/grawave.html</a></p>
<p><a href="http://python123.io/dv/H1_Strain.wav">http://python123.io/dv/H1_Strain.wav</a><br><a href="http://python123.io/dv/L1_Strain.wav">http://python123.io/dv/L1_Strain.wav</a><br><a href="http://python123.io/dv/wf_template.txt">http://python123.io/dv/wf_template.txt</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>PyCharm控制台自动换行</title>
    <url>/2019/12/23/PyCharm%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C/</url>
    <content><![CDATA[<p>点击File -&gt; Settings -&gt; Editor -&gt; General -&gt; Console,勾选下图项即可。</p>
<span id="more"></span>

<p><img src="https://img2018.cnblogs.com/blog/1473452/201911/1473452-20191113105919785-2031005404.png"><br><img src="https://img2018.cnblogs.com/blog/1473452/201911/1473452-20191113110043184-87443107.png"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>bug</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pycharm Out of memory 解决办法</title>
    <url>/2021/05/26/Pycharm-Out-of-memory-%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p>最近使用Pycharm敲代码突然卡住，并且蹦出一个错误：<code>Out of memory</code>。</p>
<p>但是该错误与代码无关，只是因为系统分配给Pycharm的最大内存不够用了而已。</p>
<p>这个最大内存是我们可以修改的，将它修改的大一些就可以解决这个问题。</p>
<p>下面看看如何修改~</p>
<span id="more"></span>

<ol>
<li>进入如下目录：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">访达 -&gt; 应用程序 -&gt; 右键Pycharm -&gt; 显示包内容 -&gt; Contents -&gt; bin</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>找到文件<code>pycharm.vmoptions</code>，使用一个文本编辑器打开，修改前两行的数值：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Xms1024m      修改前是512</span><br><span class="line">-Xmx2048m      修改前是750（奇怪的数字）</span><br><span class="line">-XX:ReservedCodeCacheSize=512m</span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改后保存关闭，重新启动Pycharm。</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>IDE</tag>
        <tag>bug</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pygame Zero之贪吃蛇（一）</title>
    <url>/2020/12/27/Pygame-Zero%E4%B9%8B%E8%B4%AA%E5%90%83%E8%9B%87%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>搞了这么久Python，玩个🐍吧！</p>
<span id="more"></span>

<p>贪吃蛇是个经典游戏，它的规则也是十分简单：控制小蛇上下左右移动，吃到食物以后，长度增加1；蛇头碰到屏幕边缘或者自己的身体，游戏失败。</p>
<p>今天这个阶段，我们来把小蛇创建出来。</p>
<p>下面有4个小方块，我们可以用他们来创建4个不同颜色的小蛇。</p>
<img src="/2020/12/27/Pygame-Zero%E4%B9%8B%E8%B4%AA%E5%90%83%E8%9B%87%EF%BC%88%E4%B8%80%EF%BC%89/%E5%9B%BE%E7%89%87%E6%96%87%E4%BB%B6.png" class>

<p>小蛇的构造，就是用这些小方块拼在一起。我们可以设置它的初始长度为5个小方块。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pgzrun</span><br><span class="line"></span><br><span class="line">TILE_SIZE = <span class="number">20</span></span><br><span class="line">WIDTH = <span class="number">40</span> * TILE_SIZE</span><br><span class="line">HEIGHT = <span class="number">30</span> * TILE_SIZE</span><br><span class="line"></span><br><span class="line">snakehead = Actor(<span class="string">&#x27;snake1&#x27;</span>)</span><br><span class="line">snakehead.x = WIDTH / <span class="number">2</span></span><br><span class="line">snakehead.y = HEIGHT / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Snake = []</span><br><span class="line">Snake.append(snakehead)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    snakebody = Actor(<span class="string">&#x27;snake1&#x27;</span>)</span><br><span class="line">    snakebody.x = Snake[i].x - TILE_SIZE</span><br><span class="line">    snakebody.y = Snake[i].y</span><br><span class="line">    Snake.append(snakebody)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span>():</span></span><br><span class="line">    screen.clear()</span><br><span class="line">    <span class="keyword">for</span> snakebody <span class="keyword">in</span> Snake:</span><br><span class="line">        snakebody.draw()</span><br><span class="line"></span><br><span class="line">pgzrun.go()</span><br></pre></td></tr></table></figure>

<p>运行效果如下：</p>
<img src="/2020/12/27/Pygame-Zero%E4%B9%8B%E8%B4%AA%E5%90%83%E8%9B%87%EF%BC%88%E4%B8%80%EF%BC%89/%E6%95%88%E6%9E%9C.png" class>

<hr>
<blockquote>
<p>同学们可以右键保存下边的图片到你的<code>images</code>文件夹</p>
</blockquote>
<img src="/2020/12/27/Pygame-Zero%E4%B9%8B%E8%B4%AA%E5%90%83%E8%9B%87%EF%BC%88%E4%B8%80%EF%BC%89/snake1.jpg" class>

<img src="/2020/12/27/Pygame-Zero%E4%B9%8B%E8%B4%AA%E5%90%83%E8%9B%87%EF%BC%88%E4%B8%80%EF%BC%89/snake2.jpg" class>

<img src="/2020/12/27/Pygame-Zero%E4%B9%8B%E8%B4%AA%E5%90%83%E8%9B%87%EF%BC%88%E4%B8%80%EF%BC%89/snake3.jpg" class>

<img src="/2020/12/27/Pygame-Zero%E4%B9%8B%E8%B4%AA%E5%90%83%E8%9B%87%EF%BC%88%E4%B8%80%EF%BC%89/snake4.jpg" class>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>Pygame Zero之贪吃蛇（三）</title>
    <url>/2021/01/07/Pygame-Zero%E4%B9%8B%E8%B4%AA%E5%90%83%E8%9B%87%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<p>本文继续来研究如何移动小蛇，这一次是让小蛇左转和右转。上一篇讲到小蛇只能前进，今天就让小蛇学会转弯。</p>
<span id="more"></span>

<p>如果小蛇本来是向右移动的，那么右转以后，小蛇就会向下移动，只需要把新蛇头的位置设置在旧蛇头<code>Snake[0]</code>的下方</p>
<img src="/2021/01/07/Pygame-Zero%E4%B9%8B%E8%B4%AA%E5%90%83%E8%9B%87%EF%BC%88%E4%B8%89%EF%BC%89/%E5%90%91%E4%B8%8B%E7%A7%BB%E5%8A%A8.png" class>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前置代码见9-2.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>():</span></span><br><span class="line">    newSnakeHead = Actor(<span class="string">&#x27;snake1&#x27;</span>)  <span class="comment"># 创建新蛇头</span></span><br><span class="line">    <span class="comment"># 设定新蛇头的坐标，小蛇向下移动，新蛇头在旧蛇头下方</span></span><br><span class="line">    newSnakeHead.x = Snake[<span class="number">0</span>].x</span><br><span class="line">    newSnakeHead.y = Snake[<span class="number">0</span>].y + TILE_SIZE</span><br><span class="line">    Snake.insert(<span class="number">0</span>, newSnakeHead)  <span class="comment"># 把新蛇头加入列表的最前面</span></span><br><span class="line">    <span class="keyword">del</span> Snake[<span class="built_in">len</span>(Snake) - <span class="number">1</span>]  <span class="comment"># 删除旧蛇尾</span></span><br><span class="line">    time.sleep(<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure>

<p>类似的，我们就可以完成小蛇的所有方向移动了。定义一个变量来表示小蛇的移动方向。在<code>update</code>函数中，判断这个变量的值，就可以控制小蛇向不同的方向移动。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前置代码见9-2.py</span></span><br><span class="line"></span><br><span class="line">direction = <span class="string">&#x27;right&#x27;</span>  <span class="comment"># 控制小蛇运动方向，默认向右</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>():</span></span><br><span class="line">    newSnakeHead = Actor(<span class="string">&#x27;snake1&#x27;</span>)  <span class="comment"># 创建新蛇头</span></span><br><span class="line">    <span class="comment"># 判断变量direction的值，执行相应操作</span></span><br><span class="line">    <span class="keyword">if</span> direction == <span class="string">&#x27;up&#x27;</span>:</span><br><span class="line">        newSnakeHead.x = Snake[<span class="number">0</span>].x</span><br><span class="line">        newSnakeHead.y = Snake[<span class="number">0</span>].y - TILE_SIZE</span><br><span class="line">    <span class="keyword">if</span> direction == <span class="string">&#x27;down&#x27;</span>:</span><br><span class="line">        newSnakeHead.x = Snake[<span class="number">0</span>].x</span><br><span class="line">        newSnakeHead.y = Snake[<span class="number">0</span>].y + TILE_SIZE</span><br><span class="line">    <span class="keyword">if</span> direction == <span class="string">&#x27;left&#x27;</span>:</span><br><span class="line">        newSnakeHead.x = Snake[<span class="number">0</span>].x - TILE_SIZE</span><br><span class="line">        newSnakeHead.y = Snake[<span class="number">0</span>].y</span><br><span class="line">    <span class="keyword">if</span> direction == <span class="string">&#x27;right&#x27;</span>:</span><br><span class="line">        newSnakeHead.x = Snake[<span class="number">0</span>].x + TILE_SIZE</span><br><span class="line">        newSnakeHead.y = Snake[<span class="number">0</span>].y</span><br><span class="line">    Snake.insert(<span class="number">0</span>, newSnakeHead)</span><br><span class="line">    <span class="keyword">del</span> Snake[<span class="built_in">len</span>(Snake) - <span class="number">1</span>]</span><br><span class="line">    time.sleep(<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure>

<p>现在小蛇已经可以向四个方向移动了，我们需要加上一个控制的功能。通过按下方向键来修改<code>direction</code>的值就可以了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">direction = <span class="string">&#x27;right&#x27;</span>  <span class="comment"># 控制小蛇运动方向，默认向右</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>():</span></span><br><span class="line">    <span class="keyword">global</span> direction  <span class="comment"># 将direction设为全局变量</span></span><br><span class="line">    <span class="keyword">if</span> keyboard.left:</span><br><span class="line">        direction = <span class="string">&#x27;left&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> keyboard.right:</span><br><span class="line">        direction = <span class="string">&#x27;right&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> keyboard.up:</span><br><span class="line">        direction = <span class="string">&#x27;up&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> keyboard.down:</span><br><span class="line">        direction = <span class="string">&#x27;down&#x27;</span></span><br><span class="line">    newSnakeHead = Actor(<span class="string">&#x27;snake1&#x27;</span>)  <span class="comment"># 创建新蛇头</span></span><br><span class="line">    <span class="keyword">if</span> direction == <span class="string">&#x27;up&#x27;</span>:</span><br><span class="line">        newSnakeHead.x = Snake[<span class="number">0</span>].x</span><br><span class="line">        newSnakeHead.y = Snake[<span class="number">0</span>].y - TILE_SIZE</span><br><span class="line">    <span class="keyword">if</span> direction == <span class="string">&#x27;down&#x27;</span>:</span><br><span class="line">        newSnakeHead.x = Snake[<span class="number">0</span>].x</span><br><span class="line">        newSnakeHead.y = Snake[<span class="number">0</span>].y + TILE_SIZE</span><br><span class="line">    <span class="keyword">if</span> direction == <span class="string">&#x27;left&#x27;</span>:</span><br><span class="line">        newSnakeHead.x = Snake[<span class="number">0</span>].x - TILE_SIZE</span><br><span class="line">        newSnakeHead.y = Snake[<span class="number">0</span>].y</span><br><span class="line">    <span class="keyword">if</span> direction == <span class="string">&#x27;right&#x27;</span>:</span><br><span class="line">        newSnakeHead.x = Snake[<span class="number">0</span>].x + TILE_SIZE</span><br><span class="line">        newSnakeHead.y = Snake[<span class="number">0</span>].y</span><br><span class="line">    Snake.insert(<span class="number">0</span>, newSnakeHead)</span><br><span class="line">    <span class="keyword">del</span> Snake[<span class="built_in">len</span>(Snake) - <span class="number">1</span>]</span><br><span class="line">    time.sleep(<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure>

<p>看一看效果图吧：</p>
<img src="/2021/01/07/Pygame-Zero%E4%B9%8B%E8%B4%AA%E5%90%83%E8%9B%87%EF%BC%88%E4%B8%89%EF%BC%89/%E4%B8%8A%E4%B8%8B%E5%B7%A6%E5%8F%B3.gif" class>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>Pygame Zero之贪吃蛇（二）</title>
    <url>/2021/01/01/Pygame-Zero%E4%B9%8B%E8%B4%AA%E5%90%83%E8%9B%87%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>本文来研究如何移动小蛇，而且仅限于向右移动，严格的说其实是「前进」。这里需要思考的问题是：为什么不是上下左右移动呢？</p>
<p>因为在游戏中，上下左右是相对于游戏窗口的，小蛇的移动方向只有<strong>前进</strong>，也就是朝着蛇头的方向（小蛇是不能倒退的哦）。如果想要往其他方向移动，只能改变蛇头的方向，这时蛇的形状就会发生改变，我们下次再来研究。</p>
<img src="/2021/01/01/Pygame-Zero%E4%B9%8B%E8%B4%AA%E5%90%83%E8%9B%87%EF%BC%88%E4%BA%8C%EF%BC%89/move.gif" class>

<span id="more"></span>

<p>在小蛇向右移动一格的时，大概经历了下边的过程。</p>
<img src="/2021/01/01/Pygame-Zero%E4%B9%8B%E8%B4%AA%E5%90%83%E8%9B%87%EF%BC%88%E4%BA%8C%EF%BC%89/%E5%90%91%E5%8F%B3%E7%A7%BB%E5%8A%A8.png" class>

<p>移动一格分为两步完成：</p>
<ol>
<li>在旧蛇头右侧添加一个新蛇头，旧蛇头编程蛇身的一部分</li>
<li>删除旧蛇尾，原来挨着旧蛇尾的蛇身变成了新蛇尾</li>
</ol>
<p>这样，我们可以在<code>update()</code>函数中编写这部分代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前置代码见9-1.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>():</span></span><br><span class="line">    newSnakeHead = Actor(<span class="string">&#x27;snake1&#x27;</span>)  <span class="comment"># 创建新蛇头</span></span><br><span class="line">    newSnakeHead.x = Snake[<span class="number">0</span>].x + TILE_SIZE  <span class="comment"># 初始化新蛇头横坐标，为旧蛇头加一个格子宽</span></span><br><span class="line">    newSnakeHead.y = Snake[<span class="number">0</span>].y  <span class="comment"># 初始化新蛇头纵坐标，和旧蛇一样</span></span><br><span class="line">    Snake.insert(<span class="number">0</span>, newSnakeHead)  <span class="comment"># 列表中插入新蛇头</span></span><br><span class="line">    <span class="keyword">del</span> Snake[<span class="built_in">len</span>(Snake) - <span class="number">1</span>]  <span class="comment"># 列表中删除旧蛇尾</span></span><br><span class="line">   </span><br><span class="line">  </span><br><span class="line">pgzrun.go()</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<img src="/2021/01/01/Pygame-Zero%E4%B9%8B%E8%B4%AA%E5%90%83%E8%9B%87%EF%BC%88%E4%BA%8C%EF%BC%89/move.gif" class>

<p>可以看到小蛇移动速度非常快，因此我们可以导入<code>time</code>库来减速。比如每次<code>update()</code>以后，暂停<code>0.2</code>秒：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 前置代码见9-1.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>():</span></span><br><span class="line">    newSnakeHead = Actor(<span class="string">&#x27;snake1&#x27;</span>)  </span><br><span class="line">    newSnakeHead.x = Snake[<span class="number">0</span>].x + TILE_SIZE  </span><br><span class="line">    newSnakeHead.y = Snake[<span class="number">0</span>].y  </span><br><span class="line">    Snake.insert(<span class="number">0</span>, newSnakeHead)  </span><br><span class="line">    <span class="keyword">del</span> Snake[<span class="built_in">len</span>(Snake) - <span class="number">1</span>]  </span><br><span class="line">    time.sleep(<span class="number">0.2</span>)  <span class="comment"># 暂停0.2秒</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pgzrun.go()</span><br></pre></td></tr></table></figure>

<p>运行程序，有一种古老游戏的感觉了，小蛇看起来是在一格一格的前进！</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>PygameZero中文文档 - 1</title>
    <url>/2019/08/27/PygameZero%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%20-%201/</url>
    <content><![CDATA[<p>最近在研究PygameZero这个库，用来开发简单游戏的。发现官方文档翻译很少，所以自己胡乱翻译一些，欢迎大家批评指正。</p>
<span id="more"></span>

<h1 id="创建窗口"><a href="#创建窗口" class="headerlink" title="创建窗口"></a>创建窗口</h1><p>首先，新建一个python空白文件，并保存为 <code>intro.py</code>。</p>
<p>运行一下命令来验证文件可以正常运行并创建一个窗口。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pgzrun intro.py</span><br></pre></td></tr></table></figure>

<p>Pygame Zero所有设置都是默认可选，所以一个空的文件也是一个合法可以运行的Pygame Zero脚本！ 好神奇有木有！</p>
<p>单击窗口的关闭按钮或者按 <code>Ctrl+Q</code> ( <code>⌘-Q</code> on Mac)快捷键退出游戏。如果游戏卡住了， 你可以在终端窗口按 <code>Ctrl+C</code> 快捷键。</p>
<h1 id="绘制窗口的背景"><a href="#绘制窗口的背景" class="headerlink" title="绘制窗口的背景"></a>绘制窗口的背景</h1><p>然后，让我们添加一个 <code>draw()</code>函数并且设置窗口的大小。每当需要刷新(重绘)窗口的时候， Pygame Zero就会调用这个函数。</p>
<p>在 <code>intro.py</code>文件添加以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">WIDTH = <span class="number">300</span></span><br><span class="line">HEIGHT = <span class="number">300</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span>():</span></span><br><span class="line">    screen.fill((<span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<p>重新运行 <code>pgzrun intro.py</code> 脚本，游戏窗口变成了红色的正方形。</p>
<p>这段代码的作用是啥？</p>
<p><code>WIDTH</code> 以及 <code>HEIGHT</code> 指明了窗口的宽和高。这段代码把窗口设置为300x300大小。</p>
<p><code>screen</code> 是内置的代表窗口显示的类. screen类有。很多负责绘制精灵和图形的函数。调用 <code>screen.fill()</code> 方法可以用指定一个颜色元组 <code>(red, green, blue)</code> ，然后用纯色填充窗口。 <code>(128, 0, 0)</code> 是暗红色。试着 改变RGB颜色值，然后查看代码运行效果。</p>
<p>接下来让我们设置一个我们生成动画的精灵。</p>
<h1 id="绘制一个精灵"><a href="#绘制一个精灵" class="headerlink" title="绘制一个精灵"></a>绘制一个精灵</h1><p>在我们绘制任意东东之前，我们需要一个外星人alien精灵图片。你可以右键单击这张图，然后选择图片另存为。</p>
<p><img src="https://pygame-zero.readthedocs.io/zh_CN/latest/_images/alien.png" alt="alien"></p>
<p>这个精灵图片是支持透明色的png图片，非常适合在游戏里使用。这张图片为深色背景设计，所以 只有当你程序运行的时候才能够看到外星人的头盔。</p>
<blockquote>
<p>小技巧：</p>
<p>你可以在 <a href="https://kenney.nl/assets?q=2d">kenney.nl</a> 网站找到包括这张图在内的大量免费精灵图片。这张图是 <a href="https://kenney.nl/assets/platformer-art-deluxe">Platformer Art Deluxe pack</a> 的一部分。</p>
</blockquote>
<p>只有将图片保存在正确的路径Pygame Zero才能够加载图片。新建一个 <code>images</code> 目录，并且把 图片另存为 <code>alien.png</code> 。文件夹和文件名都是小写，虽然windows不区分文件名的大小写，但是 linux和OSX区分，不然就会陷入一个跨平台兼容性的陷阱。</p>
<p>新建完图片并且另存图片之后，你的项目如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── images/</span><br><span class="line">│   └── alien.png</span><br><span class="line">└── intro.py</span><br></pre></td></tr></table></figure>

<p><code>images/</code> 目录是Pygame Zero查找代码中图片的标准默认位置。</p>
<p>内置类 <code>Actor</code> 用来代表一个你绘制到屏幕的图形。</p>
<p>让我们来定义一个在屏幕上显示的图形，修改 <code>intro.py</code> 文件加载图片：、</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien = Actor(<span class="string">&#x27;alien&#x27;</span>)</span><br><span class="line">alien.pos = <span class="number">100</span>, <span class="number">56</span></span><br><span class="line"></span><br><span class="line">WIDTH = <span class="number">500</span></span><br><span class="line">HEIGHT = alien.height + <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span>():</span></span><br><span class="line">    screen.clear()</span><br><span class="line">    alien.draw()</span><br></pre></td></tr></table></figure>

<p>哇塞，外星人显示在屏幕上了。通过把字符串 <code>&#39;alien&#39;</code> 作为参数传递给 <code>Actor</code> 类，Pygame Zero自动加载了外星人精灵，并且图片具有位置和大小属性。这样我们就可以根据外星人alien的告诉 设置窗口的高度属性 <code>HEIGHT</code> 。 <code>alien.draw()</code> 方法把外星人精灵绘制到屏幕上的当前位置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien.topright = <span class="number">0</span>, <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>注意修改<code>topright</code>属性来相对于右上角来修改外星人角色位置的方法。如果外星人角色的右边横坐标为<code>0</code>，外星人角色恰好在屏幕的左侧。然后，我们让外星人角色动起来。在文件底部添加以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>():</span></span><br><span class="line">    alien.left += <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> alien.left &gt; WIDTH:</span><br><span class="line">        alien.right = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>Pygame Zero在每一帧都会调用 <code>update()</code>函数。通过在每一帧让外星人移动很小的像素数，外星人就会在屏幕上从左向右滑过。一旦外星人左侧的坐标大于窗口的宽度，就让外星人回到左侧重新向右滑动。</p>
<h1 id="处理鼠标单击事件"><a href="#处理鼠标单击事件" class="headerlink" title="处理鼠标单击事件"></a>处理鼠标单击事件</h1><p>接下来，我们让游戏在单击鼠标的时候，做点不一样的东西。为了实现这个目标我们需要定义 一个 <code>on_mouse_down()</code>函数。在文件下方添加以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_mouse_down</span>(<span class="params">pos</span>):</span></span><br><span class="line">    <span class="keyword">if</span> alien.collidepoint(pos):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Eek!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;You missed me!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>运行游戏，并尝试多次单击外星人角色。</p>
<p>Pygame Zero可以非常聪明的处理你对于函数的调用。如果你定义的函数没有 <code>pos</code> 参数，Pygame 在调用函数的时候就不会传递位置参数。<code>on_mouse_down</code> 方法还有一个 <code>button</code> 按钮参数， 代表单击的鼠标的那个键。因此我们也可以这样定义 <code>on_mouse_down</code> 函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_mouse_down</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;You clicked!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_mouse_down</span>(<span class="params">pos, button</span>):</span></span><br><span class="line">    <span class="keyword">if</span> button == mouse.LEFT <span class="keyword">and</span> alien.collidepoint(pos):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Eek!&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="声音和图像"><a href="#声音和图像" class="headerlink" title="声音和图像"></a>声音和图像</h1><p>接下来我们让外星人表现受伤的造型，保存一下文件：</p>
<ul>
<li><img src="https://pygame-zero.readthedocs.io/zh_CN/latest/_static/alien_hurt.png" alt="alien_hurt.png"> -保存图片 <code>alien_hurt.png</code> 到 <code>images</code> 目录。</li>
<li><a href="https://pygame-zero.readthedocs.io/zh_CN/latest/_static/eep.wav">eep.wav</a> - 新建一个叫做 <code>sounds</code> 目录，然后保存 <code>eep.wav</code> 到声音目录。</li>
</ul>
<p>这时候项目如下图所示:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── images/</span><br><span class="line">│   └── alien.png</span><br><span class="line">│   └── alien_hurt.png</span><br><span class="line">├── sounds/</span><br><span class="line">│   └── eep.wav</span><br><span class="line">└── intro.py</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>sounds/</code> 是Pygame Zero查找声音文件的默认标准目录。 现在让我们用新的图片和声音资源改写 <code>on_mouse_down</code> 函数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_mouse_down</span>(<span class="params">pos</span>):</span></span><br><span class="line">    <span class="keyword">if</span> alien.collidepoint(pos):</span><br><span class="line">        sounds.eep.play()</span><br><span class="line">        alien.image = <span class="string">&#x27;alien_hurt&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当你单击外星人的时候，你会听到一段声音，精灵也会切换到不开心的外星人。</p>
<p>但是这个游戏还有一个bug，那就是被单击后外星人不会回到开心的造型，但是每次单击的时候，声音会播放。接下来让我们改掉这个bug。</p>
<h1 id="时钟函数"><a href="#时钟函数" class="headerlink" title="时钟函数"></a>时钟函数</h1><p>如果出了游戏编程之外你对python非常熟悉，你就会知道用 <code>time.sleep()</code> 来插入延时。 你可以像下面这样写代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_mouse_down</span>(<span class="params">pos</span>):</span></span><br><span class="line">    <span class="keyword">if</span> alien.collidepoint(pos):</span><br><span class="line">        sounds.eep.play()</span><br><span class="line">        alien.image = <span class="string">&#x27;alien_hurt&#x27;</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        alien.image = <span class="string">&#x27;alien&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但是不行的是，在游戏中这样写是不合适的。 <code>time.sleep()</code> 阻塞了所有的活动。我们希望 游戏能够继续运行和播放动画。实际上我们需要从 <code>on_mouse_down</code> 返回，然后让游戏在切换 外星人的造型之后还能够继续运行，让 <code>draw()</code> 和 <code>update()</code> 继续跑。</p>
<p>这可难不倒Pygame Zero，因为我们有一个内置的 <code>Clock</code> ，可以让函数延时执行。</p>
<p>首先，让我们重构代码。我们定一个设置外星人手上和返回普通造型的函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_mouse_down</span>(<span class="params">pos</span>):</span></span><br><span class="line">    <span class="keyword">if</span> alien.collidepoint(pos):</span><br><span class="line">        set_alien_hurt()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_alien_hurt</span>():</span></span><br><span class="line">    alien.image = <span class="string">&#x27;alien_hurt&#x27;</span></span><br><span class="line">    sounds.eep.play()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_alien_normal</span>():</span></span><br><span class="line">    alien.image = <span class="string">&#x27;alien&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行代码跟之前没啥区别 <code>set_alien_normal()</code> 并没有被调用。但是我们可以用时钟类修改 <code>set_alien_hurt()</code> 方法，这样 <code>set_alien_normal()</code> 就可以延迟一段时间被调用了:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_alien_hurt</span>():</span></span><br><span class="line">    alien.image = <span class="string">&#x27;alien_hurt&#x27;</span></span><br><span class="line">    sounds.eep.play()</span><br><span class="line">    clock.schedule_unique(set_alien_normal, <span class="number">1.0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>clock.schedule_unique()</code> 可以让 <code>set_alien_normal()</code> 方法在<code>1.0</code> 秒后被调用。 <code>schedule_unique()</code> 同时防止同一函数在快速单击的时候被多次安排调用。</p>
<p>尝试下，你会发现外星人alien在1s后恢复正常形态。尝试快速单击外星人，验证外星人只有在最后单击的1s之后才会恢复。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们已经学习如何绘制精灵，播放声音，处理输入时间，以及使用内置的时钟类。</p>
<p>也许你继续完善游戏，可以记录游戏的得分，或者让外星人alien移动的更加诡异。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>Pygame Zero之贪吃蛇（四）</title>
    <url>/2021/01/15/Pygame-Zero%E4%B9%8B%E8%B4%AA%E5%90%83%E8%9B%87%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<p>本篇来给贪吃蛇增加游戏规则判定并加入食物和分数，制作一个完整的贪吃蛇游戏。</p>
<span id="more"></span>

<h1 id="游戏规则判定"><a href="#游戏规则判定" class="headerlink" title="游戏规则判定"></a>游戏规则判定</h1><p>在游戏中，出现两种情况则视为游戏失败：</p>
<ul>
<li>小蛇撞墙，即蛇头碰到屏幕边界</li>
<li>小蛇吃自己，即蛇头碰到身体</li>
</ul>
<p>首先定义一个布尔类型的变量，用来记录游戏是否失败。稍后通过条件判断来修改变量的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">isLose = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h2 id="小蛇撞墙"><a href="#小蛇撞墙" class="headerlink" title="小蛇撞墙"></a>小蛇撞墙</h2><p>首先判断第一种情况，当小蛇撞墙时，游戏失败。</p>
<p>由于小蛇一直是蛇头走在最前面，所以在update中只需要判断蛇头的坐标是否超过窗口边界坐标。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> newSnakeHead.y &lt; <span class="number">0</span> <span class="keyword">or</span> newSnakeHead.y &gt; HEIGHT <span class="keyword">or</span> newSnakeHead.x &lt; <span class="number">0</span> <span class="keyword">or</span> newSnakeHead.x &gt; WIDTH:</span><br><span class="line">    isLose = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>在<code>draw()</code>函数中，添加游戏失败的显示信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span>():</span></span><br><span class="line">    screen.clear()</span><br><span class="line">    <span class="keyword">for</span> snakebody <span class="keyword">in</span> Snake:</span><br><span class="line">        snakebody.draw()</span><br><span class="line">    <span class="comment"># 显示游戏失败信息</span></span><br><span class="line">    <span class="keyword">if</span> isLose:</span><br><span class="line">        screen.draw.text(<span class="string">&quot;Game over!&quot;</span>, (<span class="number">180</span>, HEIGHT / <span class="number">2</span> - <span class="number">100</span>), fontsize=<span class="number">100</span>, color=<span class="string">&#x27;skyblue&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="小蛇吃自己"><a href="#小蛇吃自己" class="headerlink" title="小蛇吃自己"></a>小蛇吃自己</h2><p>当小蛇吃到自己时，同样游戏结束。遍历每一个身体方块，当蛇头和任一身体坐标重合时，那就是吃到蛇肉啦。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> snakebody <span class="keyword">in</span> Snake:</span><br><span class="line">  <span class="keyword">if</span> newSnakeHead.x == snakebody.x <span class="keyword">and</span> newSnakeHead.y == snakebody.y:</span><br><span class="line">    isLose = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<img src="/2021/01/15/Pygame-Zero%E4%B9%8B%E8%B4%AA%E5%90%83%E8%9B%87%EF%BC%88%E5%9B%9B%EF%BC%89/lose.png" class>

<h1 id="食物的随机出现"><a href="#食物的随机出现" class="headerlink" title="食物的随机出现"></a>食物的随机出现</h1><h2 id="食物初始状态"><a href="#食物初始状态" class="headerlink" title="食物初始状态"></a>食物初始状态</h2><p>首先需要将食物的图片放在<code>images</code>文件夹中。</p>
<img src="/2021/01/15/Pygame-Zero%E4%B9%8B%E8%B4%AA%E5%90%83%E8%9B%87%EF%BC%88%E5%9B%9B%EF%BC%89/cookie.jpg" class>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始位置随机</span></span><br><span class="line">cookie = Actor(<span class="string">&#x27;cookie&#x27;</span>)</span><br><span class="line">cookie.x = random.randint(<span class="number">10</span>,<span class="number">30</span>)*TILE_SIZE</span><br><span class="line">cookie.y = random.randint(<span class="number">10</span>,<span class="number">30</span>)*TILE_SIZE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span>():</span></span><br><span class="line">    cookie.draw()</span><br></pre></td></tr></table></figure>

<h2 id="吃到食物增加长度"><a href="#吃到食物增加长度" class="headerlink" title="吃到食物增加长度"></a>吃到食物增加长度</h2><p>如果在一次移动中，小蛇没有吃到食物，那么就需要删除旧的蛇尾。如果小蛇吃到了食物，那么就不需要删除旧蛇尾了，直接在食物的位置添加一个新的蛇头即可。</p>
<p>怎样算吃到食物？<code>newSnakeHead.x == cookie.x and newSnakeHead.y == cookie.y</code></p>
<p>在之前的<code>update()</code>函数中修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>():</span></span><br><span class="line">    <span class="comment"># 小蛇吃到食物后无需删除蛇尾，将食物位置重新随机</span></span><br><span class="line">    <span class="keyword">if</span> newSnakeHead.x == cookie.x <span class="keyword">and</span> newSnakeHead.y == cookie.y:</span><br><span class="line">        cookie.x = random.randint(<span class="number">5</span>, <span class="number">35</span>) * TILE_SIZE</span><br><span class="line">        cookie.y = random.randint(<span class="number">5</span>, <span class="number">25</span>) * TILE_SIZE</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">del</span> Snake[<span class="built_in">len</span>(Snake) - <span class="number">1</span>]</span><br><span class="line">    Snake.insert(<span class="number">0</span>, newSnakeHead)</span><br></pre></td></tr></table></figure>

<p>到目前为止，整体游戏效果已经比较完整！</p>
<h1 id="显示得分"><a href="#显示得分" class="headerlink" title="显示得分"></a>显示得分</h1><p>接下来的功能是一个优化，就是分数的显示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在窗口左上角显示分数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span>():</span></span><br><span class="line">    screen.draw.text(<span class="string">&quot;Score:&quot;</span> + <span class="built_in">str</span>(score), (<span class="number">20</span>, <span class="number">20</span>), fontsize=<span class="number">25</span>, color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 吃到食物加1分</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>():</span></span><br><span class="line">    <span class="keyword">global</span> score</span><br><span class="line">    <span class="keyword">if</span> newSnakeHead.x == cookie.x <span class="keyword">and</span> newSnakeHead.y == cookie.y:</span><br><span class="line">        score += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>看看最后的整体效果吧！</p>
<img src="/2021/01/15/Pygame-Zero%E4%B9%8B%E8%B4%AA%E5%90%83%E8%9B%87%EF%BC%88%E5%9B%9B%EF%BC%89/game.png" class>

<hr>
<p>附项目完整代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pgzrun</span><br><span class="line"></span><br><span class="line">TILE_SIZE = <span class="number">20</span></span><br><span class="line">WIDTH = <span class="number">40</span> * TILE_SIZE</span><br><span class="line">HEIGHT = <span class="number">30</span> * TILE_SIZE</span><br><span class="line">isLose = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">snakehead = Actor(<span class="string">&#x27;snake1&#x27;</span>)</span><br><span class="line">snakehead.x = WIDTH / <span class="number">2</span></span><br><span class="line">snakehead.y = HEIGHT / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">cookie = Actor(<span class="string">&#x27;cookie&#x27;</span>)</span><br><span class="line">cookie.x = random.randint(<span class="number">10</span>, <span class="number">30</span>) * TILE_SIZE</span><br><span class="line">cookie.y = random.randint(<span class="number">10</span>, <span class="number">30</span>) * TILE_SIZE</span><br><span class="line"></span><br><span class="line">Snake = [snakehead]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    snakebody = Actor(<span class="string">&#x27;snake1&#x27;</span>)</span><br><span class="line">    snakebody.x = Snake[i].x - TILE_SIZE</span><br><span class="line">    snakebody.y = Snake[i].y</span><br><span class="line">    Snake.append(snakebody)</span><br><span class="line"></span><br><span class="line">direction = <span class="string">&#x27;right&#x27;</span></span><br><span class="line">score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span>():</span></span><br><span class="line">    screen.clear()</span><br><span class="line">    cookie.draw()</span><br><span class="line">    <span class="keyword">for</span> snakebody <span class="keyword">in</span> Snake:</span><br><span class="line">        snakebody.draw()</span><br><span class="line">    <span class="keyword">if</span> isLose:</span><br><span class="line">        screen.draw.text(<span class="string">&quot;Game over!&quot;</span>, (<span class="number">180</span>, HEIGHT / <span class="number">2</span> - <span class="number">100</span>), fontsize=<span class="number">100</span>,</span><br><span class="line">                         color=<span class="string">&#x27;skyblue&#x27;</span>)</span><br><span class="line">    screen.draw.text(<span class="string">&quot;Score: &quot;</span> + <span class="built_in">str</span>(score), (<span class="number">20</span>, <span class="number">20</span>), fontsize=<span class="number">25</span>,</span><br><span class="line">                     color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>():</span></span><br><span class="line">    <span class="keyword">global</span> direction, isLose, score</span><br><span class="line">    <span class="keyword">if</span> keyboard.left:</span><br><span class="line">        direction = <span class="string">&#x27;left&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> keyboard.right:</span><br><span class="line">        direction = <span class="string">&#x27;right&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> keyboard.up:</span><br><span class="line">        direction = <span class="string">&#x27;up&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> keyboard.down:</span><br><span class="line">        direction = <span class="string">&#x27;down&#x27;</span></span><br><span class="line">    newSnakeHead = Actor(<span class="string">&#x27;snake1&#x27;</span>)  <span class="comment"># 创建新蛇头</span></span><br><span class="line">    <span class="keyword">if</span> direction == <span class="string">&#x27;up&#x27;</span>:</span><br><span class="line">        newSnakeHead.x = Snake[<span class="number">0</span>].x</span><br><span class="line">        newSnakeHead.y = Snake[<span class="number">0</span>].y - TILE_SIZE</span><br><span class="line">    <span class="keyword">if</span> direction == <span class="string">&#x27;down&#x27;</span>:</span><br><span class="line">        newSnakeHead.x = Snake[<span class="number">0</span>].x</span><br><span class="line">        newSnakeHead.y = Snake[<span class="number">0</span>].y + TILE_SIZE</span><br><span class="line">    <span class="keyword">if</span> direction == <span class="string">&#x27;left&#x27;</span>:</span><br><span class="line">        newSnakeHead.x = Snake[<span class="number">0</span>].x - TILE_SIZE</span><br><span class="line">        newSnakeHead.y = Snake[<span class="number">0</span>].y</span><br><span class="line">    <span class="keyword">if</span> direction == <span class="string">&#x27;right&#x27;</span>:</span><br><span class="line">        newSnakeHead.x = Snake[<span class="number">0</span>].x + TILE_SIZE</span><br><span class="line">        newSnakeHead.y = Snake[<span class="number">0</span>].y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> newSnakeHead.y &lt; <span class="number">0</span> <span class="keyword">or</span> newSnakeHead.y &gt; HEIGHT <span class="keyword">or</span> newSnakeHead.x &lt; <span class="number">0</span> <span class="keyword">or</span> newSnakeHead.x &gt; WIDTH:</span><br><span class="line">        isLose = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> body <span class="keyword">in</span> Snake:</span><br><span class="line">        <span class="keyword">if</span> newSnakeHead.x == body.x <span class="keyword">and</span> newSnakeHead.y == body.y:</span><br><span class="line">            isLose = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> newSnakeHead.x == cookie.x <span class="keyword">and</span> newSnakeHead.y == cookie.y:</span><br><span class="line">        score += <span class="number">1</span></span><br><span class="line">        cookie.x = random.randint(<span class="number">5</span>, <span class="number">35</span>) * TILE_SIZE</span><br><span class="line">        cookie.y = random.randint(<span class="number">5</span>, <span class="number">25</span>) * TILE_SIZE</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">del</span> Snake[<span class="built_in">len</span>(Snake) - <span class="number">1</span>]</span><br><span class="line">    Snake.insert(<span class="number">0</span>, newSnakeHead)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pgzrun.go()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>PygameZero中文文档 - 2</title>
    <url>/2019/08/28/PygameZero%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%20-%202/</url>
    <content><![CDATA[<p>本篇介绍了FlappyBird的PygameZero实现，为了方便与Scratch比较，所以没有加入计分功能。</p>
<span id="more"></span>

<h1 id="舞台"><a href="#舞台" class="headerlink" title="舞台"></a>舞台</h1><p>在Scratch舞台区的内容大概是这样的：</p>
<p><img src="https://pygame-zero.readthedocs.io/zh_CN/latest/_images/flappybird-stage.png" alt="sc"></p>
<p>除了舞台背景之外，还有三个对象：小鸟，上方管道和下方管道，对应的Pygame Zero代码是把这些对象都设置为 <code>Actors</code> ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bird = Actor(<span class="string">&#x27;bird1&#x27;</span>, (<span class="number">75</span>, <span class="number">200</span>))</span><br><span class="line">pipe_top = Actor(<span class="string">&#x27;top&#x27;</span>, anchor=(<span class="string">&#x27;left&#x27;</span>, <span class="string">&#x27;bottom&#x27;</span>))</span><br><span class="line">pipe_bottom = Actor(<span class="string">&#x27;bottom&#x27;</span>, anchor=(<span class="string">&#x27;left&#x27;</span>, <span class="string">&#x27;top&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>在Pygame Zero中，我们还必须保证绘制这些对象。原则上，这为绘制场景提供了一些灵活性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span>():</span></span><br><span class="line">    screen.blit(<span class="string">&#x27;background&#x27;</span>, (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    pipe_top.draw()</span><br><span class="line">    pipe_bottom.draw()</span><br><span class="line">    bird.draw()</span><br></pre></td></tr></table></figure>

<h1 id="管道移动"><a href="#管道移动" class="headerlink" title="管道移动"></a>管道移动</h1><p>不管小鸟如何，管道都以恒定的速度移动。当它们离开屏幕的左侧时，会向右环绕，并且他们的垂直位置是随机的。</p>
<p>在Scratch中，可以通过为上方管道和下方管道创建两个不同脚本来实现。</p>
<p><img src="https://pygame-zero.readthedocs.io/en/stable/_images/flappybird-top-start.png"></p>
<p><img src="https://pygame-zero.readthedocs.io/en/stable/_images/flappybird-bottom-start.png"></p>
<p>总结一下这里都干了啥：</p>
<ul>
<li>当管道离开屏幕的左侧时，条件<code>x position &lt; -240</code>为真，这将会重置管道。</li>
<li>变量<code>pipe_height</code>用于改变管道在竖直方向上的位置。因为它们之间空隙高度应保持不变，我们无法随机<em>两个</em>高度。因此，我们只在其中一个脚本设置了<code>pipe_height</code>随机的逻辑，而另一个脚本则没有这个逻辑。</li>
<li>脚本<code>set y position to pipe height +/- 230 </code>让上方的管道在<code>pipe_height</code>之上，让下方管道在<code>pipe_height</code>之下。</li>
</ul>
<p>在Pygame Zero中代码就简单多了。我们可以定义一个函数不停的更新两个管道。当然我把更新管道的过程分成了两部分，这样管道重置的过程就更加清晰：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">WIDTH = <span class="number">400</span></span><br><span class="line">HEIGHT = <span class="number">708</span></span><br><span class="line">GAP = <span class="number">130</span></span><br><span class="line">SPEED = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reset_pipes</span>():</span></span><br><span class="line">    pipe_gap_y = random.randint(<span class="number">200</span>, HEIGHT - <span class="number">200</span>)</span><br><span class="line">    pipe_top.pos = (WIDTH, pipe_gap_y - GAP // <span class="number">2</span>)</span><br><span class="line">    pipe_bottom.pos = (WIDTH, pipe_gap_y + GAP // <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_pipes</span>():</span></span><br><span class="line">    pipe_top.left -= SPEED</span><br><span class="line">    pipe_bottom.left -= SPEED</span><br><span class="line">    <span class="keyword">if</span> pipe_top.right &lt; <span class="number">0</span>:</span><br><span class="line">        reset_pipes()</span><br></pre></td></tr></table></figure>

<p>与Scratch一个小小的不同，是我可以把需要复用的值定义为“常量”，用<strong>大写字母</strong>表示。当我需要调整游戏时，我只需要修改一次值就好了。比如在上面的例子中，当我需要增大或者减小空隙高度的时候，我只需要简单的修改 <code>GAP</code> 的值就可以了。</p>
<p>与Scratch代码最大的不同在于，Python代码中没有 <code>forever</code> 循环。这是Scratch和大多数基于文本的编程语言的区别：你必须通过重复的更新一小步动画的方式来更新游戏。重复的过程让Pygame Zero有机会处理输入或者刷新屏幕。如此循环往复就会形成游戏了，所以任何循环都必须快速完成。</p>
<p>当你需要更新一步动画的时候，Pygame Zero会调用 <code>update()</code> 函数，所以我们只需要调用一次 <code>update_walls</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>():</span></span><br><span class="line">   update_walls()</span><br></pre></td></tr></table></figure>

<h2 id="小鸟"><a href="#小鸟" class="headerlink" title="小鸟"></a>小鸟</h2><p>上面介绍的如何把Scratch逻辑转换为Python代码的模式，同样适用于小鸟的逻辑。我们首先来看 一下Python代码。</p>
<p>用来更新小鸟相关的代码被整合到了一个叫做<code>update_bird</code> 的函数中。</p>
<h2 id="根据重力移动小鸟"><a href="#根据重力移动小鸟" class="headerlink" title="根据重力移动小鸟"></a>根据重力移动小鸟</h2><p>这段代码包含的第一部分，是根据重力移动小鸟的相关代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">GRAVITY = <span class="number">0.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 小鸟的初始状态</span></span><br><span class="line">bird.dead = <span class="literal">False</span></span><br><span class="line">bird.vy = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_bird</span>():</span></span><br><span class="line">    uy = bird.vy</span><br><span class="line">    bird.vy += GRAVITY</span><br><span class="line">    bird.y += bird.vy</span><br><span class="line">    bird.x = <span class="number">75</span></span><br></pre></td></tr></table></figure>

<p>这是一个很简单的重力公式：</p>
<ul>
<li>GRAVITY 指的是 <strong>重力加速度</strong> </li>
<li>加速度是指<strong>速度</strong>的改变</li>
<li>速度代表小鸟的<strong>位置</strong>的改变</li>
</ul>
<p>因此我们需要追踪一个 <code>bird.vy</code> 变量，表示小鸟在 <code>y</code> 方向的速度。这是我们新定义的一个变量，而不是Pygame Zero提供的。</p>
<ul>
<li>GRAVITY 指的是 <strong>重力加速度</strong> ：<code>GRAVITY</code> 大于0</li>
<li>加速度是指<strong>速度</strong>的改变：把 <code>GRAVITY</code> 加到 <code>bird.vy</code> </li>
<li>速度代表小鸟的<strong>位置</strong>的改变: 把 <code>bird.vy</code> 加到 <code>bird.y</code> 上</li>
</ul>
<p>注意！小鸟水平方向的位置是始终不变的，整个游戏中小鸟的 <code>x</code> 坐标始终是 75。我们通过让管道移向小鸟来模拟小鸟的运动。这看起来就像是一个移动的镜头在跟随着小鸟，所以游戏中并不需要 <code>vx</code> 变量。</p>
<h2 id="让小鸟拍打翅膀"><a href="#让小鸟拍打翅膀" class="headerlink" title="让小鸟拍打翅膀"></a>让小鸟拍打翅膀</h2><p>接下来的部分是让小鸟可以拍打翅膀：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> bird.dead:</span><br><span class="line">    <span class="keyword">if</span> bird.vy &lt; -<span class="number">3</span>:</span><br><span class="line">        bird.image = <span class="string">&#x27;bird2&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bird.image = <span class="string">&#x27;bird1&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这会检查小鸟是向上移动还是向下移动。如果小鸟向上移动我们设置图片为 <code>bird2</code> ，否则设置图片为<code>bird1</code> 。（-3是通过不断试错得出的经验值，这样游戏看起来会更加真实。）</p>
<p><img src="/2019/08/28/PygameZero%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%20-%202/bird2.png" alt="bird1"></p>
<p><img src="/2019/08/28/PygameZero%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%20-%202/bird1.png" alt="bird2"></p>
<h2 id="检测小鸟是否撞管子"><a href="#检测小鸟是否撞管子" class="headerlink" title="检测小鸟是否撞管子"></a>检测小鸟是否撞管子</h2><p>接下来我们要检测小鸟有没有撞管子。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> bird.colliderect(pipe_top) <span class="keyword">or</span> bird.colliderect(pipe_bottom):</span><br><span class="line">    bird.dead = <span class="literal">True</span></span><br><span class="line">    bird.image = <span class="string">&#x27;birddead&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/08/28/PygameZero%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%20-%202/birddead.png" alt="birddead"></p>
<p>如果小鸟撞到管子了，我们就把变量 <code>bird.dead</code> 值设置为 <code>True</code>。这是一个<strong>布尔值</strong>表示非假即真，这样我们可以方便的检测小鸟是否还活着。如果小鸟挂了，我们就不需要响应玩家的输入了。</p>
<h2 id="检测小鸟是否触顶-触底"><a href="#检测小鸟是否触顶-触底" class="headerlink" title="检测小鸟是否触顶/触底"></a>检测小鸟是否触顶/触底</h2><p>最后我们检测一下小鸟有没有触底或触顶（屏幕的上下边缘），如果是的话就重置小鸟的状态和属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="number">0</span> &lt; bird.y &lt; <span class="number">720</span>:</span><br><span class="line">    bird.y = <span class="number">200</span></span><br><span class="line">    bird.dead = <span class="literal">False</span></span><br><span class="line">    bird.vy = <span class="number">0</span></span><br><span class="line">    reset_pipes()</span><br></pre></td></tr></table></figure>

<p>重置小鸟，为什么要调用 <code>reset_pipes()</code> 呢？是因为我们把管道代码定义成一个独立的函数，所以每当我们想重置游戏时都可以调用它。这样，小鸟回到初始位置时会让玩家有一段反应的时间，这样才是一个友好的游戏。</p>
<h2 id="放在update-函数中"><a href="#放在update-函数中" class="headerlink" title="放在update()函数中"></a>放在<code>update()</code>函数中</h2><p>再次重申，以上过程的每一帧都要调用，因此我们把这些操作放到 <code>update_date()</code> 函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>():</span></span><br><span class="line">   update_walls()</span><br><span class="line">   update_bird()</span><br></pre></td></tr></table></figure>

<h2 id="响应玩家输入控制"><a href="#响应玩家输入控制" class="headerlink" title="响应玩家输入控制"></a>响应玩家输入控制</h2><p>小鸟逻辑的最后一部分是必须响应玩家控制。当我们按键时要让小鸟向上飞。当你按了键盘上的任何一个按键，Pygame Zero都会调用 <code>on_key_down</code> 函数（需要先定义）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">FLAP_VELOCITY = -<span class="number">6.5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_key_down</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bird.dead:</span><br><span class="line">        bird.vy = FLAP_VELOCITY</span><br></pre></td></tr></table></figure>

<p>这里，如果小鸟没挂的话，我们设置小鸟的 <code>vy</code> 为一个负数：在Pygame Zero中，意味着小鸟在向上移动。</p>
<p>无论Scratch还是Python代码，你都能够找到许多相似之处：</p>
<p><img src="https://pygame-zero.readthedocs.io/zh_CN/latest/_images/flappybird-bird-start.png" alt="_images/flappybird-bird-start.png"> <img src="https://pygame-zero.readthedocs.io/en/stable/_images/flappybird-bird-space.png" alt="_images/flappybird-space.png"></p>
<p>Scratch和Pygame Zero最大的区别在于：</p>
<ul>
<li>在Pygame Zero中你不能无限循环，只能更新每一帧并然后重复</li>
<li>坐标系不同。Pygame Zero中屏幕的左上角是原点 <code>x = 0, y = 0</code>, <code>x</code>轴正方向跟Scratch一样是从左向右的，但是 <code>y</code> 轴指向屏幕下方！这也是 为什么<code>GRAVITY</code> 是正数而 <code>FLAP_VELOCITY</code> 是负数了。</li>
<li><code>bird.dead</code> 是一个布尔值，所以我们可以写 <code>if not bird.dead</code> 而不是像Scratch一样写 <code>dead = 0</code>。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>许多Scratch种的概念可以直接迁移到Pygame Zero中。</p>
<p>下面是一些对比：</p>
<table>
<thead>
<tr>
<th align="left">In Scratch</th>
<th align="left">In Pygame Zero</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>change y by 1</code> (上)</td>
<td align="left"><code>bird.y -= 1</code></td>
</tr>
<tr>
<td align="left"><code>change y by -1</code> (下)</td>
<td align="left"><code>bird.y += 1</code></td>
</tr>
<tr>
<td align="left"><code>set costume to &lt;name&gt;</code></td>
<td align="left"><code>bird.image = &#39;name&#39;</code></td>
</tr>
<tr>
<td align="left"><code>if dead = 0</code></td>
<td align="left"><code>if not bird.dead:</code></td>
</tr>
<tr>
<td align="left"><code>set dead to 0</code></td>
<td align="left"><code>bird.dead = False</code></td>
</tr>
<tr>
<td align="left"><code>if touching Top?</code></td>
<td align="left"><code>if bird.colliderect(pipe_top)</code></td>
</tr>
<tr>
<td align="left"><code>When Flag clicked</code>… <code>forever</code></td>
<td align="left">把代码放入<code>update()</code>函数中</td>
</tr>
<tr>
<td align="left"><code>When [any] key pressed</code></td>
<td align="left"><code>def on_key_down():</code></td>
</tr>
<tr>
<td align="left"><code>pick random a to b</code></td>
<td align="left"><code>import random</code> to load the <code>random</code> module, then <code>random.randint(a, b)</code></td>
</tr>
<tr>
<td align="left">(0, 0) 是舞台中心</td>
<td align="left">(0, 0) 是窗口左上角</td>
</tr>
</tbody></table>
<p>在某些情况下，Python中的代码更简单，因为Python的代码可以组织成更易于阅读的方式。</p>
<p>Pygame Zero中的角色也让我们更加简单的使用坐标。我们使用 <code>anchor</code> 位置来定位管道，我们通过检测管道的 <code>pipe_top.right &lt; 0</code> 而不是 <code>if x position &lt; -240</code> 来判断管道是否离开了屏幕。</p>
<h1 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># flappybird.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pgzrun</span><br><span class="line"></span><br><span class="line">bird = Actor(<span class="string">&#x27;bird2&#x27;</span>, (<span class="number">75</span>, <span class="number">200</span>))</span><br><span class="line">pipe_top = Actor(<span class="string">&#x27;top&#x27;</span>, anchor=(<span class="string">&#x27;left&#x27;</span>, <span class="string">&#x27;bottom&#x27;</span>))</span><br><span class="line">pipe_bottom = Actor(<span class="string">&#x27;bottom&#x27;</span>, anchor=(<span class="string">&#x27;left&#x27;</span>, <span class="string">&#x27;top&#x27;</span>))</span><br><span class="line"></span><br><span class="line">WIDTH = <span class="number">400</span></span><br><span class="line">HEIGHT = <span class="number">708</span></span><br><span class="line">GAP = <span class="number">150</span></span><br><span class="line">SPEED = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reset_pipes</span>():</span></span><br><span class="line">    pipe_gap_y = random.randint(<span class="number">200</span>, HEIGHT - <span class="number">200</span>)</span><br><span class="line">    pipe_top.pos = (WIDTH, pipe_gap_y - GAP // <span class="number">2</span>)</span><br><span class="line">    pipe_bottom.pos = (WIDTH, pipe_gap_y + GAP // <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_pipes</span>():</span></span><br><span class="line">    pipe_top.left -= SPEED</span><br><span class="line">    pipe_bottom.left -= SPEED</span><br><span class="line">    <span class="keyword">if</span> pipe_top.right &lt; <span class="number">0</span>:</span><br><span class="line">        reset_pipes()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GRAVITY = <span class="number">0.3</span></span><br><span class="line"></span><br><span class="line">bird.dead = <span class="literal">False</span></span><br><span class="line">bird.vy = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_bird</span>():</span></span><br><span class="line">    bird.image = <span class="string">&#x27;bird2&#x27;</span></span><br><span class="line">    bird.vy += GRAVITY</span><br><span class="line">    bird.y += bird.vy</span><br><span class="line">    bird.x = <span class="number">75</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> bird.colliderect(pipe_top) <span class="keyword">or</span> bird.colliderect(pipe_bottom):</span><br><span class="line">        bird.dead = <span class="literal">True</span></span><br><span class="line">        bird.image = <span class="string">&#x27;dead&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bird.dead:</span><br><span class="line">        <span class="keyword">if</span> bird.vy &lt; -<span class="number">3</span>:</span><br><span class="line">            bird.image = <span class="string">&#x27;bird2&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            bird.image = <span class="string">&#x27;bird1&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">0</span> &lt; bird.y &lt; <span class="number">720</span>:</span><br><span class="line">        bird.y = <span class="number">200</span></span><br><span class="line">        bird.dead = <span class="literal">False</span></span><br><span class="line">        bird.vy = <span class="number">0</span></span><br><span class="line">        reset_pipes()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span>():</span></span><br><span class="line">    screen.blit(<span class="string">&#x27;background&#x27;</span>, (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    pipe_top.draw()</span><br><span class="line">    pipe_bottom.draw()</span><br><span class="line">    bird.draw()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>():</span></span><br><span class="line">    update_pipes()</span><br><span class="line">    update_bird()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FLAP_VELOCITY = -<span class="number">6.5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_key_down</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bird.dead:</span><br><span class="line">        bird.vy = FLAP_VELOCITY</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_mouse_down</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bird.dead:</span><br><span class="line">        bird.vy = FLAP_VELOCITY</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pgzrun.go()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>小提示：导入<code>pgzrun</code>后，调用<code>pgzrun.go()</code>可以直接运行程序，而不需要在命令行中使用命令<code>pgzrun flappybird.py</code>。</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>PygameZero中文文档 - 3</title>
    <url>/2019/08/28/PygameZero%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%20-%203/</url>
    <content><![CDATA[<p>Pygame Zero会自动识别并调用您定义的事件钩，这种方法可以使您不必自己实现事件循环机制。</p>
<span id="more"></span>

<h2 id="游戏循环挂钩"><a href="#游戏循环挂钩" class="headerlink" title="游戏循环挂钩"></a>游戏循环挂钩</h2><p>一个典型的循环钩看起来有点像这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> game_has_not_ended():</span><br><span class="line">    process_input()</span><br><span class="line">    update()</span><br><span class="line">    draw()</span><br></pre></td></tr></table></figure>

<p>输入处理要更加复杂一些，但Pygame Zero可以让您在自己的游戏模块中轻松地定义<code>update()</code>和<code>draw()</code>函数。</p>
<h2 id="draw"><a href="#draw" class="headerlink" title=" draw()"></a><code> draw()</code></h2><p>​        当需要重绘游戏窗口时，Pygame Zero就会调用这个函数。</p>
<p>​        <code>draw()</code> 函数必须是一个无参函数。</p>
<p>​        Pygame Zero会在游戏窗口需要重绘时进行计算，以避免屏幕没有任何改变时重绘。它将在游戏循环的每一        步的以下的情况中绘制屏幕：</p>
<ul>
<li><p>如果已经定义了一个<code>update()</code>功能（见下文）。</p>
</li>
<li><p>如果有时钟事件。</p>
</li>
<li><p>如果一个输入事件被触发。</p>
<p>如果您尝试修改<code>draw()</code>函数中的某些内容或使其具有动画效果，这种做法会让你很难受。例如，这段代码就是错误的：外星人并不一定会在屏幕上继续移动：</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span>():</span></span><br><span class="line">    alien.left += <span class="number">1</span></span><br><span class="line">    alien.draw()</span><br></pre></td></tr></table></figure>

<p>​        正确的做法是使用<code>update()</code>函数来修改或让元素动起来，<code>draw()</code>函数仅仅是在屏幕上绘制画面。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span>():</span></span><br><span class="line">    alien.draw()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>():</span></span><br><span class="line">    alien.left += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="update-或-update-dt"><a href="#update-或-update-dt" class="headerlink" title="update()或 update(dt)"></a><code>update()</code>或 <code>update(dt)</code></h2><p>​        Pygame Zero会调用这个函数来实现您的游戏逻辑。<code>update()</code>会被重复调用，每秒钟60次。</p>
<p>​        编写<code>update()</code>函数有两种不同的方法。</p>
<p>​        在简单的游戏中，您可以假设每次调用<code>update()</code>函数都经过了一小段时间（几分之一秒）。也许你甚至并不关心时间的步长多大：您可以只按每帧固定的像素数移动对象（或者通过一个常量来让它们加速等等）。</p>
<p>​        一种更高级的方法，是根据两次调用之间实际花费的时间，来进行移动和物理计算。这样可以提供更流畅的动画，但涉及的计算可能更难，并且当时间步长变大时，你要更小心的处理来避免意外发生。</p>
<p>​        要使用基于时间的方法，您可以修改<code>update()</code>函数让它只接收一个参数。这样做以后，Pygame Zero会以<strong>秒</strong>为单位传递经过的时间。您可以使用它来衡量有段移动的计算。</p>
<h1 id="事件处理挂钩"><a href="#事件处理挂钩" class="headerlink" title="事件处理挂钩"></a>事件处理挂钩</h1><p>与游戏循环挂钩类似，你的Pygame Zero程序可以通过定义具有特定名称的函数来响应输入事件。</p>
<p>有点像<code>update()</code>函数这种情况，Pygame Zero会通过检查事件处理函数来决定如何调用。所以你不需要让事件处理函数传参。例如，Pygame Zero会调用 <code>on_mouse_down</code>函数的任何变体：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_mouse_down</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Mouse button clicked&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_mouse_down</span>(<span class="params">pos</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Mouse button clicked at&quot;</span>, pos)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_mouse_down</span>(<span class="params">button</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Mouse button&quot;</span>, button, <span class="string">&quot;clicked&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_mouse_down</span>(<span class="params">pos, button</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Mouse button&quot;</span>, button, <span class="string">&quot;clicked at&quot;</span>, pos)</span><br></pre></td></tr></table></figure>

<p>它通过查看参数的名称来完成此操作，所以参数必须完全拼写正确，就像上边代码列出的一样。每个事件挂钩都有一组可以使用的不同参数，如下所述。</p>
<p><code>on_mouse_down([pos][, button])</code></p>
<p>​        按下鼠标按键时调用。</p>
<p>参数：</p>
<ul>
<li><strong>pos</strong> – 一个元组(x, y) 表示按键按下时鼠标指针的位置。</li>
<li><strong>button</strong> – 一个 <code>mouse</code> 枚举值，表示按下的鼠标按键。</li>
</ul>
<p><code>on_mouse_up([pos][, button])</code></p>
<p>​        释放鼠标按键时调用。</p>
<p>参数：</p>
<ul>
<li><strong>pos</strong> – 一个元组(x, y) 表示按键释放时鼠标指针的位置。</li>
<li><strong>button</strong> – 一个 <code>mouse</code> 枚举值，表示释放的鼠标按键。</li>
</ul>
<p><code>on_mouse_move([pos][, rel][, buttons])</code></p>
<p>​        移动鼠标时调用。</p>
<p>参数：</p>
<ul>
<li><p><strong>pos</strong> – 一个元组(x, y) 表示鼠标指针移动到的位置。</p>
</li>
<li><p><strong>rel</strong> – 一个元组(delta_x, delta_y)表示鼠标指针位置的变化。</p>
</li>
<li><p><strong>buttons</strong> – 一组 <code>mouse</code>枚举值，表示在移动过程中按下的按键。</p>
</li>
</ul>
<p>要处理鼠标拖动，请使用下面这样的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_mouse_move</span>(<span class="params">rel, buttons</span>):</span></span><br><span class="line">    <span class="keyword">if</span> mouse.LEFT <span class="keyword">in</span> buttons:</span><br><span class="line">        <span class="comment"># the mouse was dragged, do something with `rel`</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<p><code>on_key_down([key][, mod][, unicode])</code></p>
<p>​        按下按键时调用。</p>
<p>参数：</p>
<ul>
<li><strong>key</strong> – 一个整数，表示按下的键。</li>
<li><strong>unicode</strong> – 相关时键入的字符编码。 并非所有按键都会产生可打印的字符 - 许多可能是控制字符。如果按键与Unicode字符编码不对应，则为空字符串。</li>
<li><strong>mod</strong> –  按下的修饰键的位掩码。</li>
</ul>
<p><code>on_key_up([key][, mod])</code></p>
<p>​        释放按键时调用。</p>
<p>参数:</p>
<ul>
<li><strong>key</strong> – 一个整数，表示释放的按键。</li>
<li><strong>mod</strong> – 按下的修饰键的位掩码。</li>
</ul>
<p><code>on_music_end()</code></p>
<p>​        音乐曲目结束时调用。</p>
<p>​        请注意，如果将音轨配置为循环，则不会调用此方法。</p>
<h1 id="鼠标和键盘按键"><a href="#鼠标和键盘按键" class="headerlink" title="鼠标和键盘按键"></a>鼠标和键盘按键</h1><p>内置对象<code>mouse</code>，<code>keys</code>可用于确定在上述事件中按下了哪些按钮或按键。</p>
<p>请注意，鼠标滚轮事件显示为按下按钮 <code>WHEEL_UP</code>/ <code>WHEEL_DOWN</code>按钮常量。</p>
<ul>
<li><p><code>mouse</code>类</p>
<p>可以由<code>on_mouse_*</code>处理程序接收的内置枚举按钮 。</p>
<p><code>LEFT</code> <code>MIDDLE</code> <code>RIGHT</code> <code>WHEEL_UP</code> <code>WHEEL_DOWN</code></p>
</li>
<li><p><code>keys</code>类</p>
<p>可由<code>on_key_*</code> 处理程序接收的内置枚举按钮。</p>
<p><code>BACKSPACE</code> <code>TAB</code> <code>CLEAR</code> <code>RETURN</code> <code>PAUSE</code> <code>ESCAPE</code> <code>SPACE</code> <code>EXCLAIM</code> <code>QUOTEDBL</code> <code>HASH</code> <code>DOLLAR</code> <code>AMPERSAND</code> <code>QUOTE</code> <code>LEFTPAREN</code> <code>RIGHTPAREN</code> <code>ASTERISK</code> <code>PLUS</code> <code>COMMA</code> <code>MINUS</code> <code>PERIOD</code> <code>SLASH</code> <code>K_0</code> <code>K_1</code> <code>K_2</code> <code>K_3</code> <code>K_4</code> <code>K_5</code> <code>K_6</code> <code>K_7</code> <code>K_8</code> <code>K_9</code> <code>COLON</code> <code>SEMICOLON</code> <code>LESS</code> <code>EQUALS</code> <code>GREATER</code> <code>QUESTION</code> <code>AT</code> <code>LEFTBRACKET</code> <code>BACKSLASH</code> <code>RIGHTBRACKET</code> <code>CARET</code> <code>UNDERSCORE</code> <code>BACKQUOTE</code> <code>A</code> <code>B</code> <code>C</code> <code>D</code> <code>E</code> <code>F</code> <code>G</code> <code>H</code> <code>I</code> <code>J</code> <code>K</code> <code>L</code> <code>M</code> <code>N</code> <code>O</code> <code>P</code> <code>Q</code> <code>R</code> <code>S</code> <code>T</code> <code>U</code> <code>V</code> <code>W</code> <code>X</code> <code>Y</code> <code>Z</code> <code>DELETE</code> <code>KP0</code> <code>KP1</code> <code>KP2</code> <code>KP3</code> <code>KP4</code> <code>KP5</code> <code>KP6</code> <code>KP7</code> <code>KP8</code> <code>KP9</code> <code>KP_PERIOD</code> <code>KP_DIVIDE</code> <code>KP_MULTIPLY</code> <code>KP_MINUS</code> <code>KP_PLUS</code> <code>KP_ENTER</code> <code>KP_EQUALS</code> <code>UP</code> <code>DOWN</code> <code>RIGHT</code> <code>LEFT</code> <code>INSERT</code> <code>HOME</code> <code>END</code> <code>PAGEUP</code> <code>PAGEDOWN</code> <code>F1</code> <code>F2</code> <code>F3</code> <code>F4</code> <code>F5</code> <code>F6</code> <code>F7</code> <code>F8</code> <code>F9</code> <code>F10</code> <code>F11</code> <code>F12</code> <code>F13</code> <code>F14</code> <code>F15</code> <code>NUMLOCK</code> <code>CAPSLOCK</code> <code>SCROLLOCK</code> <code>RSHIFT</code> <code>LSHIFT</code> <code>RCTRL</code> <code>LCTRL</code> <code>RALT</code> <code>LALT</code> <code>RMETA</code> <code>LMETA</code> <code>LSUPER</code> <code>RSUPER</code> <code>MODE</code> <code>HELP</code> <code>PRINT</code> <code>SYSREQ</code> <code>BREAK</code> <code>MENU</code> <code>POWER</code> <code>EURO</code> <code>LAST</code></p>
</li>
</ul>
<p>此外，您可以访问一组表示<strong>修饰键</strong>的常量：</p>
<ul>
<li><p><code>keymods</code>类</p>
<p>表示在<code>on_key_up</code>/ <code>on_key_down</code>事件期间可能已被压下的修饰键的常量。</p>
<p><code>LSHIFT</code> <code>RSHIFT</code> <code>SHIFT</code> <code>LCTRL</code> <code>RCTRL</code> <code>CTRL</code> <code>LALT</code> <code>RALT</code> <code>ALT</code> <code>LMETA</code> <code>RMETA</code> <code>META</code> <code>NUM</code> <code>CAPS</code> <code>MODE</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>PygameZero制作Pacman</title>
    <url>/2020/11/28/PygameZero%E5%88%B6%E4%BD%9CPacman/</url>
    <content><![CDATA[<p>本篇来介绍Pacman的PygameZero实现。</p>
<img src="/2020/11/28/PygameZero%E5%88%B6%E4%BD%9CPacman/pacman.png" class>

<span id="more"></span>

<p>先上代码，后边补上讲解</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pgzrun</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">WIDTH = <span class="number">500</span></span><br><span class="line">HEIGHT = <span class="number">500</span></span><br><span class="line">pacman = Actor(<span class="string">&#x27;向右的吃豆人&#x27;</span>)</span><br><span class="line">pacman.pos = [<span class="number">250</span>, <span class="number">250</span>]</span><br><span class="line">bean1 = Actor(<span class="string">&#x27;豆子&#x27;</span>)</span><br><span class="line">bean1.x = random.randint(<span class="number">100</span>, <span class="number">400</span>)</span><br><span class="line">bean1.y = random.randint(<span class="number">100</span>, <span class="number">400</span>)</span><br><span class="line">bean2 = Actor(<span class="string">&#x27;豆子&#x27;</span>)</span><br><span class="line">bean2.x = random.randint(<span class="number">100</span>, <span class="number">400</span>)</span><br><span class="line">bean2.y = random.randint(<span class="number">100</span>, <span class="number">400</span>)</span><br><span class="line">bean3 = Actor(<span class="string">&#x27;豆子&#x27;</span>)</span><br><span class="line">bean3.x = random.randint(<span class="number">100</span>, <span class="number">400</span>)</span><br><span class="line">bean3.y = random.randint(<span class="number">100</span>, <span class="number">400</span>)</span><br><span class="line">beans = [bean1, bean2, bean3]</span><br><span class="line">score = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span>():</span></span><br><span class="line">    screen.blit(<span class="string">&#x27;游戏背景&#x27;</span>, [<span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">    pacman.draw()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> beans:</span><br><span class="line">        i.draw()</span><br><span class="line">    screen.draw.text(<span class="built_in">str</span>(score), [<span class="number">15</span>, <span class="number">15</span>], color=<span class="string">&#x27;orange&#x27;</span>, fontsize=<span class="number">30</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_key_down</span>(<span class="params">key</span>):</span></span><br><span class="line">    <span class="keyword">if</span> key == keys.LEFT:</span><br><span class="line">        pacman.image = <span class="string">&#x27;向左的吃豆人&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> key == keys.RIGHT:</span><br><span class="line">        pacman.image = <span class="string">&#x27;向右的吃豆人&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> key == keys.UP:</span><br><span class="line">        pacman.image = <span class="string">&#x27;向上的吃豆人&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> key == keys.DOWN:</span><br><span class="line">        pacman.image = <span class="string">&#x27;向下的吃豆人&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> key == keys.SPACE:</span><br><span class="line">        <span class="built_in">print</span>(score)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>():</span></span><br><span class="line">    <span class="keyword">global</span> score</span><br><span class="line">    <span class="keyword">if</span> pacman.image == <span class="string">&#x27;向左的吃豆人&#x27;</span>:</span><br><span class="line">        pacman.x -= <span class="number">5</span></span><br><span class="line">    <span class="keyword">if</span> pacman.image == <span class="string">&#x27;向右的吃豆人&#x27;</span>:</span><br><span class="line">        pacman.x += <span class="number">5</span></span><br><span class="line">    <span class="keyword">if</span> pacman.image == <span class="string">&#x27;向上的吃豆人&#x27;</span>:</span><br><span class="line">        pacman.y -= <span class="number">5</span></span><br><span class="line">    <span class="keyword">if</span> pacman.image == <span class="string">&#x27;向下的吃豆人&#x27;</span>:</span><br><span class="line">        pacman.y += <span class="number">5</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> beans:</span><br><span class="line">        <span class="keyword">if</span> pacman.colliderect(i):</span><br><span class="line">            i.x = random.randint(<span class="number">100</span>, <span class="number">400</span>)</span><br><span class="line">            i.y = random.randint(<span class="number">100</span>, <span class="number">400</span>)</span><br><span class="line">            score += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(score)</span><br><span class="line">    <span class="keyword">if</span> pacman.x &lt; <span class="number">0</span> <span class="keyword">or</span> pacman.x &gt; <span class="number">500</span> <span class="keyword">or</span> pacman.y &lt; <span class="number">0</span> <span class="keyword">or</span> pacman.y &gt; <span class="number">500</span>:</span><br><span class="line">        score -= <span class="number">3</span></span><br><span class="line">        <span class="built_in">print</span>(score)</span><br><span class="line">        pacman.pos = [<span class="number">250</span>, <span class="number">250</span>]</span><br><span class="line">    <span class="keyword">if</span> score &lt; <span class="number">0</span>:</span><br><span class="line">        exit()</span><br><span class="line">pgzrun.go()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中if后直接加变量</title>
    <url>/2019/12/23/Python%E4%B8%ADif%E5%90%8E%E7%9B%B4%E6%8E%A5%E5%8A%A0%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<p>python中有时候会使用if语句，后边直接加一个变量，而不是一个布尔表达式，这是在判断神马呢？</p>
<span id="more"></span>

<p>其实意思是判断这个变量是否有值，这个值需要是<strong>非零非空</strong>的值，这行代码返回<code>True</code>或<code>False</code>。<br>Python中除了’’、””、0、()、[]、{}、None为False之外，其他的都是True。<br>举例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls = [[], <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&quot;&quot;</span>, &#123;&#125;, (), [<span class="number">1</span>], <span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&quot;4&quot;</span>, &#123;<span class="number">5</span>&#125;, (<span class="number">6</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ls:</span><br><span class="line">    <span class="keyword">if</span> i:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;i =&#x27;</span>, i, <span class="string">&#x27;有值&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;i =&#x27;</span>, i, <span class="string">&#x27;没值&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = [] 没值</span><br><span class="line">i = <span class="number">0</span> 没值</span><br><span class="line">i =  没值</span><br><span class="line">i =  没值</span><br><span class="line">i = &#123;&#125; 没值</span><br><span class="line">i = () 没值</span><br><span class="line">i = [<span class="number">1</span>] 有值</span><br><span class="line">i = <span class="number">2</span> 有值</span><br><span class="line">i = <span class="number">3</span> 有值</span><br><span class="line">i = <span class="number">4</span> 有值</span><br><span class="line">i = &#123;<span class="number">5</span>&#125; 有值</span><br><span class="line">i = <span class="number">6</span> 有值</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python切片</title>
    <url>/2019/11/11/Python%E5%88%87%E7%89%87/</url>
    <content><![CDATA[<p>在组合数据类型中，经常会用到切片操作，也就是从列表（或其他）中取出特定范围或者按一定规律来取出元素，这个就叫切片。Python中使用中括号<code>[]</code>切片非常方便，可以简化代码。</p>
<span id="more"></span>

<h1 id="什么是切片"><a href="#什么是切片" class="headerlink" title="什么是切片"></a>什么是切片</h1><p>取一个<code>list</code>或<code>tuple</code>的部分元素是非常常见的操作，这个应该就叫<strong>切片</strong>了。比如，一个<code>list</code>如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&#x27;Michael&#x27;, &#x27;Sarah&#x27;, &#x27;Tracy&#x27;, &#x27;Bob&#x27;, &#x27;Jack&#x27;]</span><br></pre></td></tr></table></figure>

<p>取前3个元素，应该怎么做？</p>
<p>笨办法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [L[0], L[1], L[2]]</span><br><span class="line">[&#x27;Michael&#x27;, &#x27;Sarah&#x27;, &#x27;Tracy&#x27;]</span><br></pre></td></tr></table></figure>

<p>之所以是笨办法是因为，扩展一下——取前N个元素就没辙了。</p>
<p>取前N个元素，也就是索引为0-(N-1)的元素，可以用循环：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; r = []</span><br><span class="line">&gt;&gt;&gt; n = 3</span><br><span class="line">&gt;&gt;&gt; for i in range(n):</span><br><span class="line">...     r.append(L[i])</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; r</span><br><span class="line">[&#x27;Michael&#x27;, &#x27;Sarah&#x27;, &#x27;Tracy&#x27;]</span><br></pre></td></tr></table></figure>

<h1 id="切片来了"><a href="#切片来了" class="headerlink" title="切片来了"></a>切片来了</h1><p>对这种经常取指定索引范围的操作，用循环十分繁琐，因此，Python提供了切片（Slice）操作符，能大大简化这种操作。</p>
<p>对应上面的问题，取前3个元素，用一行代码就可以完成切片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L[0:3]</span><br><span class="line">[&#x27;Michael&#x27;, &#x27;Sarah&#x27;, &#x27;Tracy&#x27;]</span><br></pre></td></tr></table></figure>

<p><code>L[0:3]</code>表示，从索引0开始取，直到索引3为止，但不包括索引3。即索引0，1，2，正好是3个元素。</p>
<p>如果第一个索引是0，还可以省略：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L[:3]</span><br><span class="line">[&#x27;Michael&#x27;, &#x27;Sarah&#x27;, &#x27;Tracy&#x27;]</span><br></pre></td></tr></table></figure>

<p>也可以从索引1开始，取出2个元素出来：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L[1:3]</span><br><span class="line">[&#x27;Sarah&#x27;, &#x27;Tracy&#x27;]</span><br></pre></td></tr></table></figure>

<p>类似的，既然Python支持<code>L[-1]</code>取倒数第一个元素，那么它同样支持倒数切片，试试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L[-2:]</span><br><span class="line">[&#x27;Bob&#x27;, &#x27;Jack&#x27;]</span><br><span class="line">&gt;&gt;&gt; L[-2:-1]</span><br><span class="line">[&#x27;Bob&#x27;]</span><br></pre></td></tr></table></figure>

<p>记住倒数第一个元素的索引是-1。</p>
<p>切片操作十分有用。我们先创建一个0-99的数列：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L = list(range(100))</span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[0, 1, 2, 3, ..., 99]</span><br></pre></td></tr></table></figure>

<p>可以通过切片轻松取出某一段数列。比如前10个数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L[:10]</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure>

<p>后10个数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L[-10:]</span><br><span class="line">[90, 91, 92, 93, 94, 95, 96, 97, 98, 99]</span><br></pre></td></tr></table></figure>

<p>前11-20个数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L[10:20]</span><br><span class="line">[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]</span><br></pre></td></tr></table></figure>

<p>前10个数，每两个取一个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L[:10:2]</span><br><span class="line">[0, 2, 4, 6, 8]</span><br></pre></td></tr></table></figure>

<p>所有数，每5个取一个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L[::5]</span><br><span class="line">[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]</span><br></pre></td></tr></table></figure>

<p>甚至什么都不写，只写<code>[:]</code>就可以原样复制一个<code>list</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L[:]</span><br><span class="line">[0, 1, 2, 3, ..., 99]</span><br></pre></td></tr></table></figure>

<p><code>tuple</code>也是一种<code>list</code>，唯一区别是tuple不可变。因此，<code>tuple</code>也可以用切片操作，只是操作的结果仍是<code>tuple</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; (0, 1, 2, 3, 4, 5)[:3]</span><br><span class="line">(0, 1, 2)</span><br></pre></td></tr></table></figure>

<p>字符串<code>&#39;xxx&#39;</code>也可以看成是一种<code>list</code>，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &#x27;ABCDEFG&#x27;[:3]</span><br><span class="line">&#x27;ABC&#x27;</span><br><span class="line">&gt;&gt;&gt; &#x27;ABCDEFG&#x27;[::2]</span><br><span class="line">&#x27;ACEG&#x27;</span><br></pre></td></tr></table></figure>

<p>在很多编程语言中，针对字符串提供了很多各种截取函数（例如<code>substring</code>），其实目的就是对字符串切片。</p>
<p>Python没有针对字符串的截取函数，只需要切片一个操作就可以完成，非常简单。</p>
<blockquote>
<p>参考：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017269965565856">https://www.liaoxuefeng.com/wiki/1016959663602400/1017269965565856</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现照片的手绘效果</title>
    <url>/2019/04/04/Python%E5%AE%9E%E7%8E%B0%E7%85%A7%E7%89%87%E7%9A%84%E6%89%8B%E7%BB%98%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<h1 id="梯度的重构"><a href="#梯度的重构" class="headerlink" title="梯度的重构"></a>梯度的重构</h1><p>利用像素之间的梯度值和虚拟深度值对图像进行重构，根据灰度变化来模拟人类视觉的明暗程度。</p>
<span id="more"></span>

<h1 id="手绘效果的特征"><a href="#手绘效果的特征" class="headerlink" title="手绘效果的特征"></a>手绘效果的特征</h1><ol>
<li>黑白灰色</li>
<li>边界线条较重</li>
<li>相同或相近色彩趋于白色</li>
<li>略有光源效果</li>
</ol>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>用到的第三方库安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pillow,numpy</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#image.py</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.asarray(Image.<span class="built_in">open</span>(<span class="string">&#x27;./yunwuyue.jpg&#x27;</span>).convert(<span class="string">&#x27;L&#x27;</span>)).astype(<span class="string">&#x27;float&#x27;</span>)</span><br><span class="line"></span><br><span class="line">depth = <span class="number">10.</span>     <span class="comment">#预设深度值为10，取值范围0-100</span></span><br><span class="line">grad = np.gradient(a)       <span class="comment">#提取x和y方向的梯度值</span></span><br><span class="line">grad_x, grad_y = grad</span><br><span class="line"><span class="comment">#根据深度值调整x和y方向的梯度值</span></span><br><span class="line">grad_x = grad_x * depth / <span class="number">100.</span></span><br><span class="line">grad_y = grad_y * depth / <span class="number">100.</span></span><br><span class="line">A = np.sqrt(grad_x**<span class="number">2</span> + grad_y**<span class="number">2</span> + <span class="number">1.</span>)</span><br><span class="line">uni_x = grad_x / A</span><br><span class="line">uni_y = grad_y / A</span><br><span class="line">uni_z = <span class="number">1.</span> / A</span><br><span class="line"></span><br><span class="line">vec_el = np.pi / <span class="number">2.2</span></span><br><span class="line">vec_az = np.pi / <span class="number">4</span></span><br><span class="line">dx = np.cos(vec_el) * np.cos(vec_az)</span><br><span class="line">dy = np.cos(vec_el) * np.sin(vec_az)</span><br><span class="line">dz = np.sin(vec_el)</span><br><span class="line"></span><br><span class="line">b = <span class="number">255</span> * (dx * uni_x + dy * uni_y + dz * uni_z)</span><br><span class="line">b = b.clip(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">im = Image.fromarray(b.astype(<span class="string">&#x27;uint8&#x27;</span>))</span><br><span class="line">im.save(<span class="string">&#x27;./yunwuyueHD.jpg&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><p><img src="/2019/04/04/Python%E5%AE%9E%E7%8E%B0%E7%85%A7%E7%89%87%E7%9A%84%E6%89%8B%E7%BB%98%E6%95%88%E6%9E%9C/yunwuyue.jpg"></p>
<p><img src="/2019/04/04/Python%E5%AE%9E%E7%8E%B0%E7%85%A7%E7%89%87%E7%9A%84%E6%89%8B%E7%BB%98%E6%95%88%E6%9E%9C/yunwuyueHD.jpg"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析之Numpy库入门</title>
    <url>/2019/04/04/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8BNumpy%E5%BA%93%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="数据的维度"><a href="#数据的维度" class="headerlink" title="数据的维度"></a>数据的维度</h1><p>一个数据表达一个含义<br>一组数据表达一个或多个含义</p>
<h2 id="一维数据"><a href="#一维数据" class="headerlink" title="一维数据"></a>一维数据</h2><p>一维数据由对等关系的有序或无序数据构成，采用线性方式组织，对应列表、数组和集合等概念。</p>
<p>列表和数组</p>
<ul>
<li>列表：数据类型可以不同</li>
<li>数组：数据类型相同</li>
</ul>
<span id="more"></span>

<h2 id="二维数据"><a href="#二维数据" class="headerlink" title="二维数据"></a>二维数据</h2><p>二维数据由多个一维数据构成，是一维数据的组合形式。表格是典型的二维数据，其中，表头是二维数据的一部分。</p>
<h2 id="多维数据"><a href="#多维数据" class="headerlink" title="多维数据"></a>多维数据</h2><p>多维数据由一维或二维数据在新维度上扩展形成。</p>
<h2 id="高维数据"><a href="#高维数据" class="headerlink" title="高维数据"></a>高维数据</h2><p>高维数据仅利用最基本的二元关系展示数据间的复杂结构。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    “firstName” : “Tian” ,</span><br><span class="line">    “lastName”  : “Song” ,</span><br><span class="line">    “address”   : &#123;</span><br><span class="line">                    “streetAddr” : “中关村南大街<span class="number">5</span>号” ,</span><br><span class="line">                    “city”       : “北京市” ,</span><br><span class="line">                    “zipcode”    : “<span class="number">100081</span>”</span><br><span class="line">                   &#125; ,</span><br><span class="line">    “prof”      : [ “Computer System” , “Security” ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据维度的Python表示"><a href="#数据维度的Python表示" class="headerlink" title="数据维度的Python表示"></a>数据维度的Python表示</h2><p>数据维度是数据的组织形式。</p>
<ul>
<li>一维数据：列表和集合类型</li>
<li>二维数据：列表类型</li>
<li>多维数据：列表类型</li>
<li>高维数据：字典类型或数据表示格式(JSON、XML和YAML格式)</li>
</ul>
<h1 id="NumPy的数组对象：ndarray"><a href="#NumPy的数组对象：ndarray" class="headerlink" title="NumPy的数组对象：ndarray"></a>NumPy的数组对象：ndarray</h1><h2 id="NumPy"><a href="#NumPy" class="headerlink" title="NumPy"></a>NumPy</h2><p>NumPy是一个开源的Python科学计算基础库，包含：</p>
<ul>
<li>一个强大的N维数组对象 ndarray</li>
<li>广播功能函数</li>
<li>整合C/C++/Fortran代码的工具</li>
<li>线性代数、傅里叶变换、随机数生成等功能<br>NumPy是SciPy、Pandas等数据处理或科学计算库的基础。</li>
</ul>
<h2 id="NumPy的引用"><a href="#NumPy的引用" class="headerlink" title="NumPy的引用"></a>NumPy的引用</h2><p>尽管别名可以省略或更改，建议使用上述约定的别名</p>


<h2 id="N维数组对象：ndarray"><a href="#N维数组对象：ndarray" class="headerlink" title="N维数组对象：ndarray"></a>N维数组对象：ndarray</h2><h3 id="Python已有列表类型，为什么需要一个数组对象-类型-？"><a href="#Python已有列表类型，为什么需要一个数组对象-类型-？" class="headerlink" title="Python已有列表类型，为什么需要一个数组对象(类型)？"></a>Python已有列表类型，为什么需要一个数组对象(类型)？</h3><ul>
<li>数组对象可以去掉元素间运算所需的循环，使一维向量更像单个数</li>
<li>设置专门的数组对象，经过优化，可以提升这类应用的运算速度</li>
</ul>
<blockquote>
<p> 观察：科学计算中，一个维度所有数据的类型往往相同</p>
</blockquote>
<ul>
<li>数组对象采用相同的数据类型，有助于节省运算和存储</li>
</ul>
<h3 id="ndarray是一个多维数组对象，由两部分构成："><a href="#ndarray是一个多维数组对象，由两部分构成：" class="headerlink" title="ndarray是一个多维数组对象，由两部分构成："></a>ndarray是一个多维数组对象，由两部分构成：</h3><ul>
<li>实际的数据</li>
<li>描述这些数据的元数据（数据维度、数据类型等）<br>ndarray数组一般要求所有元素类型相同（同质），数组下标从0开始</li>
</ul>
<h3 id="ndarray实例"><a href="#ndarray实例" class="headerlink" title="ndarray实例"></a>ndarray实例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.array()  <span class="comment">#生成一个ndarray数组</span></span><br><span class="line"><span class="comment">#np.array()输出成[]形式，元素由空格分割</span></span><br><span class="line"><span class="comment">#轴(axis): 保存数据的维度；秩(rank)：轴的数量</span></span><br></pre></td></tr></table></figure>

<h3 id="ndarray对象的属性"><a href="#ndarray对象的属性" class="headerlink" title="ndarray对象的属性"></a>ndarray对象的属性</h3><table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>.ndim</code></td>
<td>秩，即轴的数量或维度的数量</td>
</tr>
<tr>
<td><code>.shape</code></td>
<td>ndarray对象的尺度，对于矩阵，n行m列</td>
</tr>
<tr>
<td><code>.size</code></td>
<td>ndarray对象元素的个数，相当于.shape中n*m的值</td>
</tr>
<tr>
<td><code>.dtype</code></td>
<td>ndarray对象的元素类型</td>
</tr>
<tr>
<td><code>.itemsize</code></td>
<td>ndarray对象中每个元素的大小，以字节为单位</td>
</tr>
</tbody></table>
<h1 id="ndarray数组的元素"><a href="#ndarray数组的元素" class="headerlink" title="ndarray数组的元素"></a>ndarray数组的元素</h1><p>ndarray的元素类型(1)</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>bool</td>
<td>布尔类型，True或False</td>
</tr>
<tr>
<td>intc</td>
<td>与C语言中的int类型一致，一般是int32或int64</td>
</tr>
<tr>
<td>intp</td>
<td>用于索引的整数，与C语言中ssize_t一致，int32或int64</td>
</tr>
<tr>
<td>int8</td>
<td>字节长度的整数，取值：[‐128, 127]</td>
</tr>
<tr>
<td>int16</td>
<td>16位长度的整数，取值：[‐32768, 32767]</td>
</tr>
<tr>
<td>int32</td>
<td>32位长度的整数，取值：[‐2^31,2^31‐1]</td>
</tr>
<tr>
<td>int64</td>
<td>64位长度的整数，取值：[‐2^63,2^63‐1]</td>
</tr>
</tbody></table>
<p>ndarray的元素类型(2)</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>uint8</td>
<td>8位无符号整数，取值：[0, 255]</td>
</tr>
<tr>
<td>uint16</td>
<td>16位无符号整数，取值：[0, 65535]</td>
</tr>
<tr>
<td>uint32</td>
<td>32位无符号整数，取值：[0,232‐1]</td>
</tr>
<tr>
<td>uint6</td>
<td>32位无符号整数，取值：[0,264‐1]</td>
</tr>
<tr>
<td>float16</td>
<td>16位半精度浮点数：1位符号位，5位指数，10位尾数</td>
</tr>
<tr>
<td>float32</td>
<td>32位半精度浮点数：1位符号位，8位指数，23位尾数</td>
</tr>
<tr>
<td>float64</td>
<td>64位半精度浮点数：1位符号位，11位指数，52位尾数</td>
</tr>
</tbody></table>
<p>ndarray的元素类型(3)</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>complex64</td>
<td>复数类型，实部和虚部都是32位浮点数</td>
</tr>
<tr>
<td>complex128</td>
<td>复数类型，实部和虚部都是64位浮点数</td>
</tr>
</tbody></table>
<blockquote>
<p>ndarray为什么要支持这么多种元素类型？</p>
</blockquote>
<p>对比：Python语法仅支持整数、浮点数和复数3种类型</p>
<ul>
<li>科学计算涉及数据较多，对存储和性能都有较高要求</li>
<li>对元素类型精细定义，有助于NumPy合理使用存储空间并优化性能</li>
<li>对元素类型精细定义，有助于程序员对程序规模有合理评估</li>
</ul>
<h2 id="非同质的ndarray对象"><a href="#非同质的ndarray对象" class="headerlink" title="非同质的ndarray对象"></a>非同质的ndarray对象</h2><ul>
<li>ndarray数组可以由非同质对象构成</li>
<li>非同质ndarray元素为对象类型</li>
<li>非同质ndarray对象无法有效发挥NumPy优势，尽量避免</li>
</ul>
<h1 id="ndarray数组的创建"><a href="#ndarray数组的创建" class="headerlink" title="ndarray数组的创建"></a>ndarray数组的创建</h1><h2 id="ndarray数组的创建方法"><a href="#ndarray数组的创建方法" class="headerlink" title="ndarray数组的创建方法"></a>ndarray数组的创建方法</h2><ul>
<li>从Python中的列表、元组等类型创建ndarray数组</li>
<li>使用NumPy中函数创建ndarray数组，如：arange, ones, zero</li>
</ul>
<h3 id="（1）从Python中的列表、元组等类型创建ndarray数组"><a href="#（1）从Python中的列表、元组等类型创建ndarray数组" class="headerlink" title="（1）从Python中的列表、元组等类型创建ndarray数组"></a>（1）从Python中的列表、元组等类型创建ndarray数组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x= np.array(<span class="built_in">list</span>/<span class="built_in">tuple</span>)</span><br><span class="line">x= np.array(<span class="built_in">list</span>/<span class="built_in">tuple</span>, dtype=np.float32)</span><br><span class="line"><span class="comment">#当np.array()不指定dtype时，NumPy将根据数据情况关联一个dtype</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从列表类型创建</span></span><br><span class="line">x = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#从元组类型创建</span></span><br><span class="line">x = np.array((<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#从列表和元组混合类型创建</span></span><br><span class="line">x = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">9</span>, <span class="number">8</span>], (<span class="number">0.1</span>, <span class="number">0.2</span>)])</span><br></pre></td></tr></table></figure>

<h3 id="（2）使用NumPy中函数创建ndarray数组，如：arange-ones-zero等"><a href="#（2）使用NumPy中函数创建ndarray数组，如：arange-ones-zero等" class="headerlink" title="（2）使用NumPy中函数创建ndarray数组，如：arange, ones, zero等"></a>（2）使用NumPy中函数创建ndarray数组，如：arange, ones, zero等</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>np.arange(n)</code></td>
<td>类似range()函数，返回ndarray类型，元素从0到n‐1</td>
</tr>
<tr>
<td><code>np.ones(shape)</code></td>
<td>根据shape生成一个全1数组，shape是元组类型</td>
</tr>
<tr>
<td><code>np.zeros(shape)</code></td>
<td>根据shape生成一个全0数组，shape是元组类型</td>
</tr>
<tr>
<td><code>np.full(shape,val)</code></td>
<td>根据shape生成一个数组，每个元素值都是valnp.eye(n)创建一个正方的n*n单位矩阵，对角线为1，其余为0</td>
</tr>
<tr>
<td><code>np.ones_like(a)</code></td>
<td>根据数组a的形状生成一个全1数组</td>
</tr>
<tr>
<td><code>np.zeros_like(a)</code></td>
<td>根据数组a的形状生成一个全0数组</td>
</tr>
<tr>
<td><code>np.full_like(a,val)</code></td>
<td>根据数组a的形状生成一个数组，每个元素值都是val</td>
</tr>
</tbody></table>
<h3 id="（3）使用NumPy中其他函数创建ndarray数组"><a href="#（3）使用NumPy中其他函数创建ndarray数组" class="headerlink" title="（3）使用NumPy中其他函数创建ndarray数组"></a>（3）使用NumPy中其他函数创建ndarray数组</h3><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>np.linspace()</code></td>
<td>根据起止数据等间距地填充数据，形成数组</td>
</tr>
<tr>
<td><code>np.concatenate()</code></td>
<td>将两个或多个数组合并成一个新的</td>
</tr>
</tbody></table>
<h1 id="ndarray数组的变换"><a href="#ndarray数组的变换" class="headerlink" title="ndarray数组的变换"></a>ndarray数组的变换</h1><p>对于创建后的ndarray数组，可以对其进行维度变换和元素类型变换</p>
<h2 id="ndarray数组的维度变换"><a href="#ndarray数组的维度变换" class="headerlink" title="ndarray数组的维度变换"></a>ndarray数组的维度变换</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>.reshape(shape)</code></td>
<td>不改变数组元素，返回一个shape形状的数组，原数组不变</td>
</tr>
<tr>
<td><code>.resize(shape)</code></td>
<td>与.reshape()功能一致，但修改原数组</td>
</tr>
<tr>
<td><code>.swapaxes(ax1,ax2)</code></td>
<td>将数组n个维度中两个维度进行调换</td>
</tr>
<tr>
<td><code>.flatten()</code></td>
<td>对数组进行降维，返回折叠后的一维数组，原数组不变</td>
</tr>
</tbody></table>
<h2 id="ndarray数组的类型变换"><a href="#ndarray数组的类型变换" class="headerlink" title="ndarray数组的类型变换"></a>ndarray数组的类型变换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_a = a.astype(new_type)</span><br></pre></td></tr></table></figure>

<p>astype()方法一定会创建新的数组（原始数据的一个拷贝），即使两个类型一致。</p>
<h2 id="ndarray数组向列表的转换"><a href="#ndarray数组向列表的转换" class="headerlink" title="ndarray数组向列表的转换"></a>ndarray数组向列表的转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls = a.tolist()</span><br></pre></td></tr></table></figure>

<h1 id="ndarray数组的操作"><a href="#ndarray数组的操作" class="headerlink" title="ndarray数组的操作"></a>ndarray数组的操作</h1><h2 id="数组的索引和切片"><a href="#数组的索引和切片" class="headerlink" title="数组的索引和切片"></a>数组的索引和切片</h2><ul>
<li>索引：获取数组中特定位置元素的过程</li>
<li>切片：获取数组元素子集的过程</li>
</ul>
<h3 id="一维数组的索引和切片"><a href="#一维数组的索引和切片" class="headerlink" title="一维数组的索引和切片"></a>一维数组的索引和切片</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">7</span>]: a = np.array([<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: a[<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">8</span>]: <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#起始编号: 终止编号(不含): 步长，3元素冒号分割</span></span><br><span class="line"><span class="comment">#编号0开始从左递增，或‐1开始从右递减</span></span><br><span class="line">In [<span class="number">9</span>]: a[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">9</span>]: array([<span class="number">8</span>, <span class="number">6</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="多维数组的索引和切片"><a href="#多维数组的索引和切片" class="headerlink" title="多维数组的索引和切片"></a>多维数组的索引和切片</h3><p>多维数组的索引：每个维度一个索引值，逗号分割</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">10</span>]: a = np.arange(<span class="number">24</span>).reshape((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: a</span><br><span class="line">Out[<span class="number">11</span>]: </span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">        [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: a[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">Out[<span class="number">12</span>]: <span class="number">23</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: a[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">13</span>]: <span class="number">6</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: a[-<span class="number">1</span>,-<span class="number">2</span>,-<span class="number">3</span>]</span><br><span class="line">Out[<span class="number">14</span>]: <span class="number">17</span></span><br></pre></td></tr></table></figure>

<p>多维数组的切片： 选取一个维度用”:”,每个维度切片方法与一维数组相同,每个维度可以使用步长跳跃切片。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#In [10]: a = np.arange(24).reshape((2,3,4))</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: a[:,<span class="number">1</span>,-<span class="number">3</span>]</span><br><span class="line">Out[<span class="number">15</span>]: array([ <span class="number">5</span>, <span class="number">17</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: a[:,<span class="number">1</span>:<span class="number">3</span>,:]</span><br><span class="line">Out[<span class="number">16</span>]: </span><br><span class="line">array([[[ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: a[:,:,::<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">17</span>]: </span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">2</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">6</span>],</span><br><span class="line">        [ <span class="number">8</span>, <span class="number">10</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">12</span>, <span class="number">14</span>],</span><br><span class="line">        [<span class="number">16</span>, <span class="number">18</span>],</span><br><span class="line">        [<span class="number">20</span>, <span class="number">22</span>]]])</span><br></pre></td></tr></table></figure>

<h1 id="ndarray数组的运算"><a href="#ndarray数组的运算" class="headerlink" title="ndarray数组的运算"></a>ndarray数组的运算</h1><h2 id="数组与标量之间的运算"><a href="#数组与标量之间的运算" class="headerlink" title="数组与标量之间的运算"></a>数组与标量之间的运算</h2><p>数组与标量之间的运算作用于数组的每一个元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">19</span>]: a = np.arange(<span class="number">24</span>).reshape((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: a</span><br><span class="line">Out[<span class="number">20</span>]: </span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">        [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: a.mean()</span><br><span class="line">Out[<span class="number">21</span>]: <span class="number">11.5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: a = a / a.mean()</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: a</span><br><span class="line">Out[<span class="number">23</span>]: </span><br><span class="line">array([[[<span class="number">0.</span>        , <span class="number">0.08695652</span>, <span class="number">0.17391304</span>, <span class="number">0.26086957</span>],</span><br><span class="line">        [<span class="number">0.34782609</span>, <span class="number">0.43478261</span>, <span class="number">0.52173913</span>, <span class="number">0.60869565</span>],</span><br><span class="line">        [<span class="number">0.69565217</span>, <span class="number">0.7826087</span> , <span class="number">0.86956522</span>, <span class="number">0.95652174</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">1.04347826</span>, <span class="number">1.13043478</span>, <span class="number">1.2173913</span> , <span class="number">1.30434783</span>],</span><br><span class="line">        [<span class="number">1.39130435</span>, <span class="number">1.47826087</span>, <span class="number">1.56521739</span>, <span class="number">1.65217391</span>],</span><br><span class="line">        [<span class="number">1.73913043</span>, <span class="number">1.82608696</span>, <span class="number">1.91304348</span>, <span class="number">2.</span>        ]]])</span><br></pre></td></tr></table></figure>

<h2 id="NumPy一元函数"><a href="#NumPy一元函数" class="headerlink" title="NumPy一元函数"></a>NumPy一元函数</h2><p>对ndarray中的数据执行元素级运算的函数</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>np.abs(x)</code> <code>np.fabs(x)</code></td>
<td>计算数组各元素的绝对值</td>
</tr>
<tr>
<td><code>np.sqrt(x)</code></td>
<td>计算数组各元素的平方根</td>
</tr>
<tr>
<td><code>np.square(x)</code></td>
<td>计算数组各元素的平方</td>
</tr>
<tr>
<td><code>np.log(x)</code> <code>np.log10(x)</code> <code>np.log2(x)</code></td>
<td>计算数组各元素的自然对数、10底对数和2底对数</td>
</tr>
<tr>
<td><code>np.ceil(x)</code> <code>np.floor(x)</code></td>
<td>计算数组各元素的ceiling值 或 floor值</td>
</tr>
<tr>
<td><code>np.rint(x)</code></td>
<td>计算数组各元素的四舍五入值</td>
</tr>
<tr>
<td><code>np.modf(x)</code></td>
<td>将数组各元素的小数和整数部分以两个独立数组形式返回</td>
</tr>
<tr>
<td><code>np.cos(x)</code> <code>np.cosh(x)</code> <code>np.sin(x)</code> <code>np.sinh(x)</code> <code>np.tan(x)</code> <code>np.tanh(x)</code></td>
<td>计算数组各元素的普通型和双曲型三角函数</td>
</tr>
<tr>
<td><code>np.exp(x)</code></td>
<td>计算数组各元素的指数值</td>
</tr>
<tr>
<td><code>np.sign(x)</code></td>
<td>计算数组各元素的符号值，1(+), 0,-1(-)</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">24</span>]: a = np.arange(<span class="number">24</span>).reshape((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: np.square(a)</span><br><span class="line">Out[<span class="number">25</span>]: </span><br><span class="line">array([[[  <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">4</span>,   <span class="number">9</span>],</span><br><span class="line">        [ <span class="number">16</span>,  <span class="number">25</span>,  <span class="number">36</span>,  <span class="number">49</span>],</span><br><span class="line">        [ <span class="number">64</span>,  <span class="number">81</span>, <span class="number">100</span>, <span class="number">121</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">144</span>, <span class="number">169</span>, <span class="number">196</span>, <span class="number">225</span>],</span><br><span class="line">        [<span class="number">256</span>, <span class="number">289</span>, <span class="number">324</span>, <span class="number">361</span>],</span><br><span class="line">        [<span class="number">400</span>, <span class="number">441</span>, <span class="number">484</span>, <span class="number">529</span>]]], dtype=int32)</span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: a = np.sqrt(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: a</span><br><span class="line">Out[<span class="number">27</span>]: </span><br><span class="line">array([[[<span class="number">0.</span>        , <span class="number">1.</span>        , <span class="number">1.41421356</span>, <span class="number">1.73205081</span>],</span><br><span class="line">        [<span class="number">2.</span>        , <span class="number">2.23606798</span>, <span class="number">2.44948974</span>, <span class="number">2.64575131</span>],</span><br><span class="line">        [<span class="number">2.82842712</span>, <span class="number">3.</span>        , <span class="number">3.16227766</span>, <span class="number">3.31662479</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">3.46410162</span>, <span class="number">3.60555128</span>, <span class="number">3.74165739</span>, <span class="number">3.87298335</span>],</span><br><span class="line">        [<span class="number">4.</span>        , <span class="number">4.12310563</span>, <span class="number">4.24264069</span>, <span class="number">4.35889894</span>],</span><br><span class="line">        [<span class="number">4.47213595</span>, <span class="number">4.58257569</span>, <span class="number">4.69041576</span>, <span class="number">4.79583152</span>]]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: np.modf(a)</span><br><span class="line">Out[<span class="number">28</span>]: </span><br><span class="line">(array([[[<span class="number">0.</span>        , <span class="number">0.</span>        , <span class="number">0.41421356</span>, <span class="number">0.73205081</span>],</span><br><span class="line">         [<span class="number">0.</span>        , <span class="number">0.23606798</span>, <span class="number">0.44948974</span>, <span class="number">0.64575131</span>],</span><br><span class="line">         [<span class="number">0.82842712</span>, <span class="number">0.</span>        , <span class="number">0.16227766</span>, <span class="number">0.31662479</span>]],</span><br><span class="line"> </span><br><span class="line">        [[<span class="number">0.46410162</span>, <span class="number">0.60555128</span>, <span class="number">0.74165739</span>, <span class="number">0.87298335</span>],</span><br><span class="line">         [<span class="number">0.</span>        , <span class="number">0.12310563</span>, <span class="number">0.24264069</span>, <span class="number">0.35889894</span>],</span><br><span class="line">         [<span class="number">0.47213595</span>, <span class="number">0.58257569</span>, <span class="number">0.69041576</span>, <span class="number">0.79583152</span>]]]),</span><br><span class="line"> array([[[<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">         [<span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>],</span><br><span class="line">         [<span class="number">2.</span>, <span class="number">3.</span>, <span class="number">3.</span>, <span class="number">3.</span>]],</span><br><span class="line"> </span><br><span class="line">        [[<span class="number">3.</span>, <span class="number">3.</span>, <span class="number">3.</span>, <span class="number">3.</span>],</span><br><span class="line">         [<span class="number">4.</span>, <span class="number">4.</span>, <span class="number">4.</span>, <span class="number">4.</span>],</span><br><span class="line">         [<span class="number">4.</span>, <span class="number">4.</span>, <span class="number">4.</span>, <span class="number">4.</span>]]]))</span><br></pre></td></tr></table></figure>

<h2 id="NumPy二元函数"><a href="#NumPy二元函数" class="headerlink" title="NumPy二元函数"></a>NumPy二元函数</h2><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>+ ‐ * / **</code></td>
<td>两个数组各元素进行对应运算</td>
</tr>
<tr>
<td><code>np.maximum(x,y)</code> <code>np.fmax()</code> <code>np.minimum(x,y)</code> <code>np.fmin()</code></td>
<td>元素级的最大值/最小值计算</td>
</tr>
<tr>
<td><code>np.mod(x,y)</code></td>
<td>元素级的模运算</td>
</tr>
<tr>
<td><code>np.copysign(x,y)</code></td>
<td>将数组y中各元素值的符号赋值给数组x对应元素</td>
</tr>
<tr>
<td><code>&gt;&lt; &gt;= &lt;= == !=</code></td>
<td>算术比较，产生布尔型数组</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">29</span>]: a = np.arange(<span class="number">24</span>).reshape((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: b = np.sqrt(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: a</span><br><span class="line">Out[<span class="number">31</span>]: </span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">        [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: b</span><br><span class="line">Out[<span class="number">32</span>]: </span><br><span class="line">array([[[<span class="number">0.</span>        , <span class="number">1.</span>        , <span class="number">1.41421356</span>, <span class="number">1.73205081</span>],</span><br><span class="line">        [<span class="number">2.</span>        , <span class="number">2.23606798</span>, <span class="number">2.44948974</span>, <span class="number">2.64575131</span>],</span><br><span class="line">        [<span class="number">2.82842712</span>, <span class="number">3.</span>        , <span class="number">3.16227766</span>, <span class="number">3.31662479</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">3.46410162</span>, <span class="number">3.60555128</span>, <span class="number">3.74165739</span>, <span class="number">3.87298335</span>],</span><br><span class="line">        [<span class="number">4.</span>        , <span class="number">4.12310563</span>, <span class="number">4.24264069</span>, <span class="number">4.35889894</span>],</span><br><span class="line">        [<span class="number">4.47213595</span>, <span class="number">4.58257569</span>, <span class="number">4.69041576</span>, <span class="number">4.79583152</span>]]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: np.maximum(a,b)</span><br><span class="line">Out[<span class="number">33</span>]: </span><br><span class="line">array([[[ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>],</span><br><span class="line">        [ <span class="number">4.</span>,  <span class="number">5.</span>,  <span class="number">6.</span>,  <span class="number">7.</span>],</span><br><span class="line">        [ <span class="number">8.</span>,  <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">12.</span>, <span class="number">13.</span>, <span class="number">14.</span>, <span class="number">15.</span>],</span><br><span class="line">        [<span class="number">16.</span>, <span class="number">17.</span>, <span class="number">18.</span>, <span class="number">19.</span>],</span><br><span class="line">        [<span class="number">20.</span>, <span class="number">21.</span>, <span class="number">22.</span>, <span class="number">23.</span>]]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: a &gt; b</span><br><span class="line">Out[<span class="number">34</span>]: </span><br><span class="line">array([[[<span class="literal">False</span>, <span class="literal">False</span>,  <span class="literal">True</span>,  <span class="literal">True</span>],</span><br><span class="line">        [ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>],</span><br><span class="line">        [ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>],</span><br><span class="line">        [ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>],</span><br><span class="line">        [ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>]]])</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Python输出百分比和有效数字</title>
    <url>/2020/05/13/Python%E8%BE%93%E5%87%BA%E7%99%BE%E5%88%86%E6%AF%94%E5%92%8C%E6%9C%89%E6%95%88%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<p>目录：</p>
<ul>
<li><p>输出百分数</p>
</li>
<li><p>输出有效数字</p>
</li>
</ul>
<span id="more"></span>
<h1 id="输出百分数"><a href="#输出百分数" class="headerlink" title="输出百分数"></a>输出百分数</h1><h2 id="方式1：直接使用参数格式化：-2"><a href="#方式1：直接使用参数格式化：-2" class="headerlink" title="方式1：直接使用参数格式化：{:.2%}"></a>方式1：直接使用参数格式化：<code>&#123;:.2%&#125;</code></h2><p><code>&#123;:.2%&#125;</code>： 显示小数点后2位</p>
<ul>
<li>显示小数点后2位：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;percent: &#123;:.2%&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">42</span> / <span class="number">50</span>))</span><br><span class="line"></span><br><span class="line">percent: <span class="number">84.00</span>%</span><br></pre></td></tr></table></figure>

<ul>
<li>不显示小数位：<code>&#123;:.0%&#125;</code>，即，将2改为0：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;percent: &#123;:.0%&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">42</span> / <span class="number">50</span>))</span><br><span class="line"></span><br><span class="line">percent: <span class="number">84</span>%</span><br></pre></td></tr></table></figure>

<h2 id="方式2：格式化为float，然后处理成-格式：-2f"><a href="#方式2：格式化为float，然后处理成-格式：-2f" class="headerlink" title="方式2：格式化为float，然后处理成%格式： {:.2f}%"></a>方式2：格式化为float，然后处理成%格式： <code>&#123;:.2f&#125;%</code></h2><p>与方式1的区别是：</p>
<ol>
<li>需要对42/50乘以 100 。</li>
<li>方式2的%在{ }外边，方式1的%在{ }里边。</li>
</ol>
<ul>
<li>显示小数点后2位：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;percent: &#123;:.2f&#125;%&#x27;</span>.<span class="built_in">format</span>(<span class="number">42</span> / <span class="number">50</span> * <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">percent: <span class="number">84.00</span>%</span><br></pre></td></tr></table></figure>

<ul>
<li>显示小数点后1位：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;percent: &#123;:.1f&#125;%&#x27;</span>.<span class="built_in">format</span>(<span class="number">42</span> / <span class="number">50</span> * <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">percent: <span class="number">84.0</span>%</span><br></pre></td></tr></table></figure>

<ul>
<li>只显示整数位：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;percent: &#123;:.0f&#125;%&#x27;</span>.<span class="built_in">format</span>(<span class="number">42</span> / <span class="number">50</span> * <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">percent: <span class="number">84</span>%</span><br></pre></td></tr></table></figure>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><code>&#123; &#125; </code>的意思是对应<code>format()</code>的一个参数，按默认顺序对应，参数序号从0开始，<code>&#123;0&#125;</code>对应<code>format()</code>的第一个参数，<code>&#123;1&#125;</code>对应第二个参数。例如：</p>
<ul>
<li>默认顺序：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;percent1: &#123;:.2%&#125;, percent2: &#123;:.1%&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">42</span> / <span class="number">50</span>, <span class="number">42</span> / <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">percent1: <span class="number">84.00</span>%, percent2: <span class="number">42.0</span>%</span><br></pre></td></tr></table></figure>

<ul>
<li>指定顺序：<br><code>&#123;1:.1%&#125;</code>对应第2个参数； <code>&#123;0:.1%&#125;</code>对应第1个参数。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;percent2: &#123;1:.1%&#125;, percent1: &#123;0:.1%&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">42</span> / <span class="number">50</span>, <span class="number">42</span> / <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">percent2: <span class="number">42.0</span>%, percent1: <span class="number">84.0</span>%</span><br></pre></td></tr></table></figure>

<h1 id="输出有效数字"><a href="#输出有效数字" class="headerlink" title="输出有效数字"></a>输出有效数字</h1><p>用自带的decimal模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">getcontext().prec = <span class="number">6</span></span><br><span class="line">Decimal(<span class="number">1</span>)/Decimal(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 结果为Decimal(&#x27;0.142857&#x27;)，六个有效数字</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python递归绘制科赫雪花</title>
    <url>/2020/12/08/Python%E9%80%92%E5%BD%92%E7%BB%98%E5%88%B6%E7%A7%91%E8%B5%AB%E9%9B%AA%E8%8A%B1/</url>
    <content><![CDATA[<img src="/2020/12/08/Python%E9%80%92%E5%BD%92%E7%BB%98%E5%88%B6%E7%A7%91%E8%B5%AB%E9%9B%AA%E8%8A%B1/snowflake.png" class>

<span id="more"></span>

<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="递归的定义"><a href="#递归的定义" class="headerlink" title="递归的定义"></a>递归的定义</h2><p>递归通常指：函数定义中调用函数自身的方式。</p>
<p>也就是说，我们在定义函数的时候，函数的内部调用了它自己。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 伪代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    func()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>电影《盗梦空间》本质就是递归：主角在做梦，梦的内容是自己在做梦，梦的内容是自己在做梦……</p>
</blockquote>
<p>递归具有两个关键特征：</p>
<ol>
<li>链条：计算过程存在递归链条</li>
<li>基例：存在一个或多个不需要再次递归的基例</li>
</ol>
<p>类似于数学归纳法：假设n(k)成立，证明n(k+1)成立。</p>
<h2 id="递归的调用过程"><a href="#递归的调用过程" class="headerlink" title="递归的调用过程"></a>递归的调用过程</h2><p>这里我们使用一个小栗子，它就是阶乘。</p>
<p>什么是阶乘呢？这里有一个阶乘的定义：</p>
<img src="/2020/12/08/Python%E9%80%92%E5%BD%92%E7%BB%98%E5%88%B6%E7%A7%91%E8%B5%AB%E9%9B%AA%E8%8A%B1/fact.png" class>

<p>阶乘的定义中，又出现了阶乘本身。这就是<strong>递归</strong>。</p>
<p>我们编写一个函数来求任意一个数的阶乘：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * fact(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>由此我们可以总结出：</p>
<ul>
<li>递归本身是一个函数，需要函数定义方式描述</li>
<li>函数内部需要用分支语句对参数进行判断</li>
<li>对<strong>基例</strong>和<strong>链条</strong>，分别编写对应代码</li>
</ul>
<p>下面我们来看一个经典数列——斐波那契数列。</p>
<p>斐波那契数列又叫“兔子数列”，它指的是这样一个数列：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144...</span><br></pre></td></tr></table></figure>

<p>从第3项开始，每一项都是前边挨着两项的和。它的定义就是：</p>
<img src="/2020/12/08/Python%E9%80%92%E5%BD%92%E7%BB%98%E5%88%B6%E7%A7%91%E8%B5%AB%E9%9B%AA%E8%8A%B1/fib.png" class>

<p>很容易理解，这个定义中的n=1和n=2的情况是基例，而F(n)=F(n-1)+F(n-2)是链条。这样我们可以编写一个函数，求出斐波那契数列的第n项。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>接下来，我们可以循环打印一下数列的前几项。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">15</span>):</span><br><span class="line">    <span class="built_in">print</span>(fib(i), end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 1 2 3 5 8 13 21 34 55 89 144 233 377</span><br></pre></td></tr></table></figure>

<p>如果加入海龟绘图，还可以直接绘制出斐波那契曲线：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">turtle.seth(<span class="number">180</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">15</span>):</span><br><span class="line">    turtle.circle(fib(i), <span class="number">90</span>)</span><br><span class="line">    <span class="built_in">print</span>(fib(i))</span><br><span class="line"></span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure>

<img src="/2020/12/08/Python%E9%80%92%E5%BD%92%E7%BB%98%E5%88%B6%E7%A7%91%E8%B5%AB%E9%9B%AA%E8%8A%B1/fibline.png" class>

<h1 id="科赫曲线"><a href="#科赫曲线" class="headerlink" title="科赫曲线"></a>科赫曲线</h1><h2 id="分形几何"><a href="#分形几何" class="headerlink" title="分形几何"></a>分形几何</h2><p>在大自然中，有很多植物的形状是局部的自己在复制整体的自己。</p>
<h2 id="科赫曲线-1"><a href="#科赫曲线-1" class="headerlink" title="科赫曲线"></a>科赫曲线</h2><p>科赫曲线是指这样一种曲线：当阶数为0时，科赫曲线是一条直线；当阶数不为0时，科赫曲线是一种带凸起的曲线。</p>
<img src="/2020/12/08/Python%E9%80%92%E5%BD%92%E7%BB%98%E5%88%B6%E7%A7%91%E8%B5%AB%E9%9B%AA%E8%8A%B1/koch1.png" class>

<p>科赫曲线具有阶数，每一阶都会将上一阶的所有线段做一次变换。</p>
<img src="/2020/12/08/Python%E9%80%92%E5%BD%92%E7%BB%98%E5%88%B6%E7%A7%91%E8%B5%AB%E9%9B%AA%E8%8A%B1/koch2.png" class>

<p>因此我们定义一个函数<code>def koch(size, n)</code>，得出它的的基例和链条：</p>
<ul>
<li>基例：n=0时，绘制一条直线</li>
<li>链条：n≠0时，对n-1阶的每一条线段都做一次变换</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">koch</span>(<span class="params">size, n</span>):</span>  <span class="comment"># size是初始线段长度</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        turtle.fd(size)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        turtle.lt(<span class="number">0</span>)</span><br><span class="line">        koch(size / <span class="number">3</span>, n - <span class="number">1</span>)</span><br><span class="line">        turtle.lt(<span class="number">60</span>)</span><br><span class="line">        koch(size / <span class="number">3</span>, n - <span class="number">1</span>)</span><br><span class="line">        turtle.rt(<span class="number">120</span>)</span><br><span class="line">        koch(size / <span class="number">3</span>, n - <span class="number">1</span>)</span><br><span class="line">        turtle.lt(<span class="number">60</span>)</span><br><span class="line">        koch(size / <span class="number">3</span>, n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>将重复的代码改为for循环，右转改为左转：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">koch</span>(<span class="params">size, n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        turtle.fd(size)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> angle <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">60</span>, -<span class="number">120</span>, <span class="number">60</span>]:</span><br><span class="line">            turtle.lt(angle)</span><br><span class="line">            koch(size / <span class="number">3</span>, n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>调用该函数<code>koch(300, 3)</code>，绘制一段3阶科赫曲线如下：</p>
<img src="/2020/12/08/Python%E9%80%92%E5%BD%92%E7%BB%98%E5%88%B6%E7%A7%91%E8%B5%AB%E9%9B%AA%E8%8A%B1/koch3.png" class>

<h2 id="科赫雪花"><a href="#科赫雪花" class="headerlink" title="科赫雪花"></a>科赫雪花</h2><p>其实掌握了科赫曲线，科赫雪花绘制就比较简单，只要将科赫曲线重复3次即可拼成一个雪花的形状。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">turtle.pu()</span><br><span class="line">turtle.goto(<span class="number">150</span>, <span class="number">120</span>)</span><br><span class="line">turtle.pd()</span><br><span class="line"></span><br><span class="line">turtle.bgcolor(<span class="string">&#x27;skyblue&#x27;</span>)</span><br><span class="line">turtle.color(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制雪花主体</span></span><br><span class="line">turtle.begin_fill()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    turtle.rt(<span class="number">120</span>)</span><br><span class="line">    koch(<span class="number">300</span>, <span class="number">3</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line">turtle.hideturtle()</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure>

<p>画完的效果就是头图啦~</p>
<img src="/2020/12/08/Python%E9%80%92%E5%BD%92%E7%BB%98%E5%88%B6%E7%A7%91%E8%B5%AB%E9%9B%AA%E8%8A%B1/snowflake.png" class>

<hr>
<blockquote>
<p>转自嵩天老师的课程《Python语言程序设计》-  <a href="https://www.icourse163.org/course/BIT-268001">https://www.icourse163.org/course/BIT-268001</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python题目 - 回文质数</title>
    <url>/2020/01/09/Python%E9%A2%98%E7%9B%AE%20-%20%E5%9B%9E%E6%96%87%E8%B4%A8%E6%95%B0/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>因为 151 既是一个质数又是一个回文数（从左到右和从右到左是看一样的），所以 151 是回文质数。</p>
<p>写一个程序来找出范围 [a,b] (5 \le a &lt; b \le 100,000,000)<a href="5%E2%89%A4*a*%3C*b*%E2%89%A4100,000,000"><em>a</em>,<em>b</em></a>( 一亿)间的所有回文质数。</p>
<h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><p>第 1 行: 二个整数 a 和 b .</p>
<h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><p>输出一个回文质数的列表，一行一个。</p>
<span id="more"></span>

<h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">500</span></span><br></pre></td></tr></table></figure>

<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">101</span></span><br><span class="line"><span class="number">131</span></span><br><span class="line"><span class="number">151</span></span><br><span class="line"><span class="number">181</span></span><br><span class="line"><span class="number">191</span></span><br><span class="line"><span class="number">313</span></span><br><span class="line"><span class="number">353</span></span><br><span class="line"><span class="number">373</span></span><br><span class="line"><span class="number">383</span></span><br></pre></td></tr></table></figure>

<h1 id="超时实现"><a href="#超时实现" class="headerlink" title="超时实现"></a>超时实现</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获得输入</span></span><br><span class="line">ab = <span class="built_in">input</span>().split()</span><br><span class="line">a = <span class="built_in">int</span>(ab[<span class="number">0</span>])</span><br><span class="line">b = <span class="built_in">int</span>(ab[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a, b + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(i)[::-<span class="number">1</span>] == <span class="built_in">str</span>(i): <span class="comment"># 判断是否回文数</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(i ** <span class="number">0.5</span>) + <span class="number">1</span>): <span class="comment"># 判断是否质数</span></span><br><span class="line">                <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(i) <span class="comment"># 是则打印</span></span><br></pre></td></tr></table></figure>

<h1 id="大佬方法"><a href="#大佬方法" class="headerlink" title="大佬方法"></a>大佬方法</h1><p>埃氏筛</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime_numbers</span>(<span class="params">n</span>):</span></span><br><span class="line">    number = [<span class="number">1</span>]*(n+<span class="number">1</span>)  <span class="comment"># 初始化，1表示全部为质数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>((n**<span class="number">0.5</span>))+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> number[i]:  <span class="comment"># 如果下标i对应的数字i是素数</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i*i, n+<span class="number">1</span>, i):  <span class="comment"># 素数i的各个倍数</span></span><br><span class="line">                number[j] = <span class="number">0</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> number[x]:</span><br><span class="line">            <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis操作</title>
    <url>/2019/04/04/Redis%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="环境准备：centOS6-5"><a href="#环境准备：centOS6-5" class="headerlink" title="环境准备：centOS6.5"></a>环境准备：centOS6.5</h1><p>Redis是c语言开发的。<br>安装redis需要c语言的编译环境。如果没有gcc需要在线安装。</p>
<span id="more"></span>

<h1 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h1><p><code>yum install gcc-c++</code></p>
<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><ul>
<li><p>第一步：redis的源码(安装)包上传到linux系统。</p>
</li>
<li><p>第二步：进入到压缩包所在的路径，解压缩redis。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf redis-3.0.0.tar.gz</span><br></pre></td></tr></table></figure>

<ul>
<li>第三步：编译。进入redis源码目录（redis3.0.0）。</li>
</ul>
<p>执行：<code>make </code></p>
<ul>
<li>第四步：进入/usr/redis-3.0.0/src/安装。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make install PREFIX=/usr/java/redis</span><br></pre></td></tr></table></figure>

<p>如果报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zmalloc.h:50:31: error: jemalloc/jemalloc.h: No such file or directory</span><br><span class="line">zmalloc.h:55:2: error: <span class="comment">#error &quot;Newer version of jemalloc required&quot;</span></span><br><span class="line">make[1]: *** [adlist.o] Error 1</span><br><span class="line">make[1]: Leaving directory </span><br><span class="line">`/data0/src/redis-2.6.2/src<span class="string">&#x27;</span></span><br><span class="line"><span class="string">make: *** [all] Error 2</span></span><br></pre></td></tr></table></figure>
<p>解决办法是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make MALLOC=libc</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PREFIX参数指定redis的安装目录。一般软件安装到/usr目录下</p>
</blockquote>
<p>连接redis</p>
<h1 id="redis的启动"><a href="#redis的启动" class="headerlink" title="redis的启动"></a>redis的启动</h1><h2 id="前端启动"><a href="#前端启动" class="headerlink" title="前端启动"></a>前端启动</h2><p>在redis的安装目录的bin目录下直接启动redis-server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-server </span><br></pre></td></tr></table></figure>

<h2 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h2><p>把/root/redis-3.0.0/redis.conf复制到/usr/java/r<br>edis/bin目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp redis.conf /usr/java/redis/bin/</span><br></pre></td></tr></table></figure>

<p>修改配置文件：</p>
<p>启动服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-server redis.conf</span><br></pre></td></tr></table></figure>

<p>查看redis进程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux|grep redis</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root      5190  0.1  0.3  33936  1712 ?        Ssl  18:23   0:00 ./redis-server *:6379    </span><br><span class="line">root      5196  0.0  0.1   4356   728 pts/0    S+   18:24   0:00 grep redis</span><br></pre></td></tr></table></figure>
<h2 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli shutdown</span><br></pre></td></tr></table></figure>

<p>或者通过kill -9 PID关闭</p>
<p>Redis-cli</p>
<p><code>[root@localhost bin]# ./redis-cli </code></p>
<p>默认连接localhost运行在6379端口的redis服务。</p>
<p><code>[root@localhost bin]# ./redis-cli -h </code></p>
<p><code>192.168.75.128 -p 6379</code></p>
<blockquote>
<p>-h：连接的服务器的地址</p>
</blockquote>
<blockquote>
<p>-p：服务的端口号</p>
</blockquote>
<p>关闭redis：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli shutdown</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据开发</category>
      </categories>
      <tags>
        <tag>大数据开发</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL基础语句复习</title>
    <url>/2019/04/04/SQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E5%8F%A5%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="一些最重要的-SQL-命令"><a href="#一些最重要的-SQL-命令" class="headerlink" title="一些最重要的 SQL 命令"></a>一些最重要的 SQL 命令</h1><p>不能忘</p>
<span id="more"></span>

<ul>
<li>SELECT - 从数据库中提取数据</li>
<li>UPDATE - 更新数据库中的数据</li>
<li>DELETE - 从数据库中删除数据</li>
<li>INSERT INTO - 向数据库中插入新数据</li>
<li>CREATE DATABASE - 创建新数据库</li>
<li>ALTER DATABASE - 修改数据库</li>
<li>CREATE TABLE - 创建新表</li>
<li>ALTER TABLE - 变更（改变）数据库表</li>
<li>DROP TABLE - 删除表</li>
<li>CREATE INDEX - 创建索引（搜索键）</li>
<li>DROP INDEX - 删除索引</li>
</ul>
<h1 id="SQL-SELECT-DISTINCT（选择不同）-语法"><a href="#SQL-SELECT-DISTINCT（选择不同）-语法" class="headerlink" title="SQL SELECT DISTINCT（选择不同） 语法"></a>SQL SELECT DISTINCT（选择不同） 语法</h1><p>SELECT DISTINCT语法用于仅返回不同的（different）值。<br>在一张表内，一列通常包含许多重复的值; 有时你只想列出不同的（different）值。<br>SELECT DISTINCT语句用于仅返回不同的（different）值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*实例*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Country <span class="keyword">FROM</span> Customers;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*列出不同（distinct）客户国家的数量*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> Country) <span class="keyword">FROM</span> Customers;</span><br></pre></td></tr></table></figure>

<h1 id="SQL-WHERE-语法"><a href="#SQL-WHERE-语法" class="headerlink" title="SQL WHERE 语法"></a>SQL WHERE 语法</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*实例*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> Country<span class="operator">=</span><span class="string">&#x27;Mexico&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>WHERE子句中可以使用以下运算符：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>等于</td>
</tr>
<tr>
<td>&lt;&gt;</td>
<td>不等于。注意：在某些版本的SQL中，这个操作符可能写成!=</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>BETWEEN</td>
<td>在某个范围内</td>
</tr>
<tr>
<td>LIKE</td>
<td>搜索某种模式</td>
</tr>
<tr>
<td>IN</td>
<td>为列指定多个可能的值</td>
</tr>
</tbody></table>
<h1 id="SQL-AND-amp-OR-运算符"><a href="#SQL-AND-amp-OR-运算符" class="headerlink" title="SQL AND &amp; OR 运算符"></a>SQL AND &amp; OR 运算符</h1><p>WHERE子句可以与AND，OR和NOT运算符结合使用。</p>
<p>AND和OR运算符用于根据多个条件筛选记录：</p>
<ul>
<li>如果由AND分隔的所有条件为TRUE，则AND运算符显示记录。</li>
<li>如果由OR分隔的任何条件为真，则OR运算符显示记录。</li>
</ul>
<p>如果条件不为真，则NOT运算符显示记录。 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*实例*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">WHERE</span> Country<span class="operator">=</span><span class="string">&#x27;Germany&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> City<span class="operator">=</span><span class="string">&#x27;Berlin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> City<span class="operator">=</span><span class="string">&#x27;Berlin&#x27;</span> <span class="keyword">OR</span> City<span class="operator">=</span><span class="string">&#x27;München&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> Country<span class="operator">=</span><span class="string">&#x27;Germany&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> Country<span class="operator">=</span><span class="string">&#x27;Germany&#x27;</span> <span class="keyword">AND</span> (City<span class="operator">=</span><span class="string">&#x27;Berlin&#x27;</span> <span class="keyword">OR</span> City<span class="operator">=</span><span class="string">&#x27;München&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> Country<span class="operator">=</span><span class="string">&#x27;Germany&#x27;</span> <span class="keyword">AND</span> <span class="keyword">NOT</span> Country<span class="operator">=</span><span class="string">&#x27;USA&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="SQL-ORDER-BY-Keyword（按关键字排序）"><a href="#SQL-ORDER-BY-Keyword（按关键字排序）" class="headerlink" title="SQL ORDER BY Keyword（按关键字排序）"></a>SQL ORDER BY Keyword（按关键字排序）</h1><p>SQL ORDER BY 关键字</p>
<p>ORDER BY 关键字用于按升序或降序对结果集进行排序。<br>ORDER BY 关键字默认情况下按升序排序记录。<br>如果需要按降序对记录进行排序，可以使用DESC关键字。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column1, column2, ... <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*ORDER BY 多列 实例*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*从 &quot;Customers&quot; 表中选取所有客户，并按照 &quot;Country&quot; 和 &quot;CustomerName&quot; 列排序*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Country, CustomerName;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*从&quot;Customers&quot; 表中选择所有客户，按 &quot;Country&quot; 升序排列，并按 &quot;CustomerName&quot; 列降序排列*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Country <span class="keyword">ASC</span>, CustomerName <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<h1 id="SQL-INSERT-INTO-语句（在表中插入）"><a href="#SQL-INSERT-INTO-语句（在表中插入）" class="headerlink" title="SQL INSERT INTO 语句（在表中插入）"></a>SQL INSERT INTO 语句（在表中插入）</h1><p>SQL INSERT INTO 语句</p>
<p>INSERT INTO 语句用于向表中插入新记录。</p>
<p>SQL INSERT INTO 语法</p>
<p>INSERT INTO 语句可以用两种形式编写。<br>第一个表单没有指定要插入数据的列的名称，只提供要插入的值：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (column1, column2, column3, ...)</span><br><span class="line"><span class="keyword">VALUES</span> (value1, value2, value3, ...);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*实例*/</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers (CustomerName, ContactName, Address, City, PostalCode, Country)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;Cardinal&#x27;</span>,<span class="string">&#x27;Tom B. Erichsen&#x27;</span>,<span class="string">&#x27;Skagen 21&#x27;</span>,<span class="string">&#x27;Stavanger&#x27;</span>,<span class="string">&#x27;4006&#x27;</span>,<span class="string">&#x27;Norway&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers (CustomerName, City, Country)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;Cardinal&#x27;</span>, <span class="string">&#x27;Stavanger&#x27;</span>, <span class="string">&#x27;Norway&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>如果要为表中的所有列添加值，则不需要在SQL查询中指定列名称。但是，请确保值的顺序与表中的列顺序相同。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name</span><br><span class="line"><span class="keyword">VALUES</span> (value1, value2, value3, ...);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*实例*/</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;Cardinal&#x27;</span>,<span class="string">&#x27;Tom B. Erichsen&#x27;</span>,<span class="string">&#x27;Skagen 21&#x27;</span>,<span class="string">&#x27;Stavanger&#x27;</span>,<span class="string">&#x27;4006&#x27;</span>,<span class="string">&#x27;Norway&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="SQL-NULL-Values（空值）"><a href="#SQL-NULL-Values（空值）" class="headerlink" title="SQL NULL Values（空值）"></a>SQL NULL Values（空值）</h1><p>如何测试NULL值？</p>
<p>使用比较运算符（例如=，&lt;或&lt;&gt;）来测试NULL值是不可行的。<br>我们将不得不使用IS NULL和IS NOT NULL运算符。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*IS NULL语法*/</span></span><br><span class="line"><span class="keyword">SELECT</span> column_names</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*IS NOT NULL语法*/</span></span><br><span class="line"><span class="keyword">SELECT</span> column_names</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<h1 id="SQL-UPDATE-语句（更新表中的记录）"><a href="#SQL-UPDATE-语句（更新表中的记录）" class="headerlink" title="SQL UPDATE 语句（更新表中的记录）"></a>SQL UPDATE 语句（更新表中的记录）</h1><p>UPDATE 语句用于更新表中已存在的记录。 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*SQL UPDATE 语法*/</span></span><br><span class="line"></span><br><span class="line">UPDATE table_name</span><br><span class="line"><span class="keyword">SET</span> column1 <span class="operator">=</span> value1, column2 <span class="operator">=</span> value2, ...</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*实例*/</span></span><br><span class="line"><span class="comment">/*把国家/地区为&quot;Mexico&quot;的所有记录的联系人姓名更新为“Juan”*/</span></span><br><span class="line">UPDATE Customers</span><br><span class="line"><span class="keyword">SET</span> ContactName<span class="operator">=</span><span class="string">&#x27;Juan&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> Country<span class="operator">=</span><span class="string">&#x27;Mexico&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>更新记录时要小心。如果省略WHERE子句，所有记录将被更新！</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE Customers</span><br><span class="line"><span class="keyword">SET</span> ContactName<span class="operator">=</span><span class="string">&#x27;Juan&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="SQL-Delete-语句（删除表中的记录）"><a href="#SQL-Delete-语句（删除表中的记录）" class="headerlink" title="SQL Delete 语句（删除表中的记录）"></a>SQL Delete 语句（删除表中的记录）</h1><p>DELETE 语句用于删除表中的行。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*SQL DELETE 语法*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure>

<p>WHERE子句指定需要删除哪些记录。如果省略了WHERE子句，表中所有记录都将被删除！</p>
<p>删除所有数据：可以删除表中的所有行，而不需要删除该表。这意味着表的结构、属性和索引将保持不变</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name;</span><br><span class="line"><span class="comment">/*或者*/</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL必知必会(1)了解SQL</title>
    <url>/2020/12/06/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A-1-%E4%BA%86%E8%A7%A3SQL/</url>
    <content><![CDATA[<p>数据库（database）：保存有组织的数据的容器（通常是一个文件或一组文件）。</p>
<p>表（table）：某种特定类型数据的结构化清单。</p>
<p>模式：关于数据库和表的布局及特性的信息。</p>
<p>列（column）：表中的一个字段。所有表都是由一个或多个列组成的。</p>
<p>数据类型：所允许的数据的类型。每个表列都有相应的数据类型，它限制（或允许）该列中存储的数据。</p>
<p>行（row）：表中的一个记录。</p>
<p>主键（primary key）：一列（或一组列），其值能够唯一标识表中每一行。</p>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL必知必会(2)检索数据</title>
    <url>/2020/12/06/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A-2-%E6%A3%80%E7%B4%A2%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p><strong>关键字（keyword）</strong>：作为SQL组成部分的保留字。关键字不能用作表或列的名字。</p>
<p><strong>SELECT语句</strong>：从一个或多个表中检索信息，必须给出想选择什么，以及从什么地方选择。</p>
<p>检索单个列：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<table>
<thead>
<tr>
<th>prod_name</th>
</tr>
</thead>
<tbody><tr>
<td>Fish bean bag toy</td>
</tr>
<tr>
<td>Bird bean bag toy</td>
</tr>
<tr>
<td>Rabbit bean bag toy</td>
</tr>
<tr>
<td>8 inch teddy bear</td>
</tr>
<tr>
<td>12 inch teddy bear</td>
</tr>
<tr>
<td>18 inch teddy bear</td>
</tr>
<tr>
<td>Raggedy Ann</td>
</tr>
<tr>
<td>King doll</td>
</tr>
<tr>
<td>Queen doll</td>
</tr>
</tbody></table>
<blockquote>
<p>SQL不区分大小写，一般对关键字使用大写，并将SQL语句分成多行，这样会使代码易于阅读和调试。</p>
</blockquote>
<p>检索多个列：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_name</th>
<th>prod_price</th>
</tr>
</thead>
<tbody><tr>
<td>BNBG01</td>
<td>Fish bean bag toy</td>
<td>3.49</td>
</tr>
<tr>
<td>BNBG02</td>
<td>Bird bean bag toy</td>
<td>3.49</td>
</tr>
<tr>
<td>BNBG03</td>
<td>Rabbit bean bag toy</td>
<td>3.49</td>
</tr>
<tr>
<td>BR01</td>
<td>8 inch teddy bear</td>
<td>5.99</td>
</tr>
<tr>
<td>BR02</td>
<td>12 inch teddy bear</td>
<td>8.99</td>
</tr>
<tr>
<td>BR03</td>
<td>18 inch teddy bear</td>
<td>11.99</td>
</tr>
<tr>
<td>RGAN01</td>
<td>Raggedy Ann</td>
<td>4.99</td>
</tr>
<tr>
<td>RYL01</td>
<td>King doll</td>
<td>9.49</td>
</tr>
<tr>
<td>RYL02</td>
<td>Queen doll</td>
<td>9.49</td>
</tr>
</tbody></table>
<p>检索所有列：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>略</th>
</tr>
</thead>
<tbody><tr>
<td>略</td>
</tr>
</tbody></table>
<blockquote>
<p>使用通配符 * 的优点：可以检索出名字未知的列。</p>
</blockquote>
<p>检索不同的值：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id </span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>vend_id</th>
</tr>
</thead>
<tbody><tr>
<td>BRS01</td>
</tr>
<tr>
<td>BRS01</td>
</tr>
<tr>
<td>BRS01</td>
</tr>
<tr>
<td>DLL01</td>
</tr>
<tr>
<td>DLL01</td>
</tr>
<tr>
<td>DLL01</td>
</tr>
<tr>
<td>DLL01</td>
</tr>
<tr>
<td>FNG01</td>
</tr>
<tr>
<td>FNG01</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> vend_id</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>vend_id</th>
</tr>
</thead>
<tbody><tr>
<td>BRS01</td>
</tr>
<tr>
<td>DLL01</td>
</tr>
<tr>
<td>FNG01</td>
</tr>
</tbody></table>
<blockquote>
<p>关键字DISTINCT可以去重，但会作用于所有的列，不仅是跟在它后边的那一列。</p>
</blockquote>
<p>限制结果：<br>如果想检索一定数量的行，比如只检索5行，以MySQL为例。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line">LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>prod_name</th>
</tr>
</thead>
<tbody><tr>
<td>Fish bean bag toy</td>
</tr>
<tr>
<td>Bird bean bag toy</td>
</tr>
<tr>
<td>Rabbit bean bag toy</td>
</tr>
<tr>
<td>8 inch teddy bear</td>
</tr>
<tr>
<td>12 inch teddy bear</td>
</tr>
</tbody></table>
<p>要想得到后5行数据，需要指定从哪开始以及检索的行数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line">LIMIT <span class="number">5</span> <span class="keyword">OFFSET</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>prod_name</th>
</tr>
</thead>
<tbody><tr>
<td>18 inch teddy bear</td>
</tr>
<tr>
<td>Raggedy Ann</td>
</tr>
<tr>
<td>King doll</td>
</tr>
<tr>
<td>Queen doll</td>
</tr>
</tbody></table>
<blockquote>
<p>表中共9行，所以检索只返回4行。</p>
</blockquote>
<blockquote>
<p>第一个检索的行是第0行。</p>
</blockquote>
<blockquote>
<p><code>LIMIT 4 OFFSET 3</code>可以简化：<code>LIMIT 3,4</code>。需要注意数字顺序相反。</p>
</blockquote>
<p>注释：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name     <span class="comment">--这是一条注释</span></span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br><span class="line"># 这是一条注释</span><br><span class="line"><span class="comment">/*这是</span></span><br><span class="line"><span class="comment">一条注释*/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL必知必会(3)排序检索数据</title>
    <url>/2020/12/06/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A-3-%E6%8E%92%E5%BA%8F%E6%A3%80%E7%B4%A2%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p><strong>子句</strong>：SQL语句由子句构成，有些子句是必须的，有些是可选的。</p>
<p>排序数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<table>
<thead>
<tr>
<th>prod_name</th>
</tr>
</thead>
<tbody><tr>
<td>Fish bean bag toy</td>
</tr>
<tr>
<td>Bird bean bag toy</td>
</tr>
<tr>
<td>Rabbit bean bag toy</td>
</tr>
<tr>
<td>8 inch teddy bear</td>
</tr>
<tr>
<td>12 inch teddy bear</td>
</tr>
<tr>
<td>18 inch teddy bear</td>
</tr>
<tr>
<td>Raggedy Ann</td>
</tr>
<tr>
<td>King doll</td>
</tr>
<tr>
<td>Queen doll</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>prod_name</th>
</tr>
</thead>
<tbody><tr>
<td>12 inch teddy bear</td>
</tr>
<tr>
<td>18 inch teddy bear</td>
</tr>
<tr>
<td>8 inch teddy bear</td>
</tr>
<tr>
<td>Bird bean bag toy</td>
</tr>
<tr>
<td>Fish bean bag toy</td>
</tr>
<tr>
<td>King doll</td>
</tr>
<tr>
<td>Queen doll</td>
</tr>
<tr>
<td>Rabbit bean bag toy</td>
</tr>
<tr>
<td>Raggedy Ann</td>
</tr>
</tbody></table>
<blockquote>
<p>在指定一条ORDER BY子句时，应该保证它是SELECT语句中最后一条子句。否则报错。</p>
</blockquote>
<blockquote>
<p>通常ORDER BY子句中使用的列，是为显示而选择的列。但是用非检索的列排序数据是完全合法的。</p>
</blockquote>
<p>按多个列排序：检索3列，先按价格然后按名称排序。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price, prod_name;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_price</th>
<th>prod_name</th>
</tr>
</thead>
<tbody><tr>
<td>BNBG02</td>
<td>3.49</td>
<td>Bird bean bag toy</td>
</tr>
<tr>
<td>BNBG01</td>
<td>3.49</td>
<td>Fish bean bag toy</td>
</tr>
<tr>
<td>BNBG03</td>
<td>3.49</td>
<td>Rabbit bean bag toy</td>
</tr>
<tr>
<td>RGAN01</td>
<td>4.99</td>
<td>Raggedy Ann</td>
</tr>
<tr>
<td>BR01</td>
<td>5.99</td>
<td>8 inch teddy bear</td>
</tr>
<tr>
<td>BR02</td>
<td>8.99</td>
<td>12 inch teddy bear</td>
</tr>
<tr>
<td>RYL01</td>
<td>9.49</td>
<td>King doll</td>
</tr>
<tr>
<td>RYL02</td>
<td>9.49</td>
<td>Queen doll</td>
</tr>
<tr>
<td>BR03</td>
<td>11.99</td>
<td>18 inch teddy bear</td>
</tr>
</tbody></table>
<p>按列位置排序：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">2</span>, <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_price</th>
<th>prod_name</th>
</tr>
</thead>
<tbody><tr>
<td>BNBG02</td>
<td>3.49</td>
<td>Bird bean bag toy</td>
</tr>
<tr>
<td>BNBG01</td>
<td>3.49</td>
<td>Fish bean bag toy</td>
</tr>
<tr>
<td>BNBG03</td>
<td>3.49</td>
<td>Rabbit bean bag toy</td>
</tr>
<tr>
<td>RGAN01</td>
<td>4.99</td>
<td>Raggedy Ann</td>
</tr>
<tr>
<td>BR01</td>
<td>5.99</td>
<td>8 inch teddy bear</td>
</tr>
<tr>
<td>BR02</td>
<td>8.99</td>
<td>12 inch teddy bear</td>
</tr>
<tr>
<td>RYL01</td>
<td>9.49</td>
<td>King doll</td>
</tr>
<tr>
<td>RYL02</td>
<td>9.49</td>
<td>Queen doll</td>
</tr>
<tr>
<td>BR03</td>
<td>11.99</td>
<td>18 inch teddy bear</td>
</tr>
</tbody></table>
<blockquote>
<p>ORDER BY 2,3 表示按SELECT清单中，先按第2列排序，再按第3列排序。</p>
</blockquote>
<blockquote>
<p>当想排序的列没有出现在SELECT清单中时，不能使用这项技术。</p>
</blockquote>
<p>指定排序方向（升序、降序）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_price</th>
<th>prod_name</th>
</tr>
</thead>
<tbody><tr>
<td>BR03</td>
<td>11.99</td>
<td>18 inch teddy bear</td>
</tr>
<tr>
<td>RYL01</td>
<td>9.49</td>
<td>King doll</td>
</tr>
<tr>
<td>RYL02</td>
<td>9.49</td>
<td>Queen doll</td>
</tr>
<tr>
<td>BR02</td>
<td>8.99</td>
<td>12 inch teddy bear</td>
</tr>
<tr>
<td>BR01</td>
<td>5.99</td>
<td>8 inch teddy bear</td>
</tr>
<tr>
<td>RGAN01</td>
<td>4.99</td>
<td>Raggedy Ann</td>
</tr>
<tr>
<td>BNBG01</td>
<td>3.49</td>
<td>Fish bean bag toy</td>
</tr>
<tr>
<td>BNBG02</td>
<td>3.49</td>
<td>Bird bean bag toy</td>
</tr>
<tr>
<td>BNBG03</td>
<td>3.49</td>
<td>Rabbit bean bag toy</td>
</tr>
</tbody></table>
<blockquote>
<p>默认升序，使用DESC关键字实现降序。</p>
</blockquote>
<p>用多个列排序：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price <span class="keyword">DESC</span>, prod_name;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_price</th>
<th>prod_name</th>
</tr>
</thead>
<tbody><tr>
<td>BR03</td>
<td>11.99</td>
<td>18 inch teddy bear</td>
</tr>
<tr>
<td>RYL01</td>
<td>9.49</td>
<td>King doll</td>
</tr>
<tr>
<td>RYL02</td>
<td>9.49</td>
<td>Queen doll</td>
</tr>
<tr>
<td>BR02</td>
<td>8.99</td>
<td>12 inch teddy bear</td>
</tr>
<tr>
<td>BR01</td>
<td>5.99</td>
<td>8 inch teddy bear</td>
</tr>
<tr>
<td>RGAN01</td>
<td>4.99</td>
<td>Raggedy Ann</td>
</tr>
<tr>
<td>BNBG02</td>
<td>3.49</td>
<td>Bird bean bag toy</td>
</tr>
<tr>
<td>BNBG01</td>
<td>3.49</td>
<td>Fish bean bag toy</td>
</tr>
<tr>
<td>BNBG03</td>
<td>3.49</td>
<td>Rabbit bean bag toy</td>
</tr>
</tbody></table>
<blockquote>
<p>DESC关键字只应用到直接位于其前面的列名。</p>
</blockquote>
<blockquote>
<p>如果想在多个列上进行降序排序，必须对每一列都指定DESC关键字。</p>
</blockquote>
<blockquote>
<p>DESC - DESCENDING，ASC - ASCENDING。</p>
</blockquote>
<blockquote>
<p>区分大小写和排序顺序：在字典排序顺序中，A与a相同，这是大多数数据库管理系统默认的。</p>
</blockquote>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL必知必会(4)过滤数据</title>
    <url>/2020/12/06/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A-4-%E8%BF%87%E6%BB%A4%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>在SELECT语句中，数据根据WHERE子句中指定的搜索条件进行过滤。</p>
<blockquote>
<p>WHERE子句在表名（FROM子句）之后。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">=</span> <span class="number">3.49</span>;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_price</th>
</tr>
</thead>
<tbody><tr>
<td>Fish bean bag toy</td>
<td>3.49</td>
</tr>
<tr>
<td>Bird bean bag toy</td>
<td>3.49</td>
</tr>
<tr>
<td>Rabbit bean bag toy</td>
<td>3.49</td>
</tr>
</tbody></table>
<blockquote>
<p>WHERE子句的位置。如果同时使用ORDER BY和WHERE子句时，应该让ORDER BY位于WHERE之后，否则报错。</p>
</blockquote>
<p>WHERE子句操作符</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
<th>操作符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>等于</td>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&lt;&gt;</td>
<td>不等于</td>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
<td>!&gt;</td>
<td>不大于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>BETWEEN</td>
<td>在指定的两个值之间</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
<td>IS NULL</td>
<td>为NULL值</td>
</tr>
<tr>
<td>!&lt;</td>
<td>不小于</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>检查单个值：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">&lt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_price</th>
</tr>
</thead>
<tbody><tr>
<td>Fish bean bag toy</td>
<td>3.49</td>
</tr>
<tr>
<td>Bird bean bag toy</td>
<td>3.49</td>
</tr>
<tr>
<td>Rabbit bean bag toy</td>
<td>3.49</td>
</tr>
<tr>
<td>8 inch teddy bear</td>
<td>5.99</td>
</tr>
<tr>
<td>12 inch teddy bear</td>
<td>8.99</td>
</tr>
<tr>
<td>Raggedy Ann</td>
<td>4.99</td>
</tr>
<tr>
<td>King doll</td>
<td>9.49</td>
</tr>
<tr>
<td>Queen doll</td>
<td>9.49</td>
</tr>
</tbody></table>
<p>不匹配检查：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">&lt;&gt;</span> <span class="string">&#x27;DLL01&#x27;</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>vend_id</th>
<th>prod_name</th>
</tr>
</thead>
<tbody><tr>
<td>BRS01</td>
<td>8 inch teddy bear</td>
</tr>
<tr>
<td>BRS01</td>
<td>12 inch teddy bear</td>
</tr>
<tr>
<td>BRS01</td>
<td>18 inch teddy bear</td>
</tr>
<tr>
<td>FNG01</td>
<td>King doll</td>
</tr>
<tr>
<td>FNG01</td>
<td>Queen doll</td>
</tr>
</tbody></table>
<blockquote>
<p><code>&lt;&gt;</code> 和<code>!=</code>通常可以互换，但取决于DBMS是否支持。</p>
</blockquote>
<p>范围值检查：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_price</th>
</tr>
</thead>
<tbody><tr>
<td>8 inch teddy bear</td>
<td>5.99</td>
</tr>
<tr>
<td>12 inch teddy bear</td>
<td>8.99</td>
</tr>
<tr>
<td>King doll</td>
<td>9.49</td>
</tr>
<tr>
<td>Queen doll</td>
<td>9.49</td>
</tr>
</tbody></table>
<blockquote>
<p>使用BETWEEN时，必须指定两个值，这两个值必须用AND关键字分隔。BETWEEN匹配的是“闭区间”。</p>
</blockquote>
<p>空值检查：<br>NULL：无值，它与字段包含0、空字符串和空格都不同。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<p>Empty set (0.00 sec)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_email <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>cust_name</th>
</tr>
</thead>
<tbody><tr>
<td>Kids Place</td>
</tr>
<tr>
<td>The Toy Store</td>
</tr>
</tbody></table>
<blockquote>
<p>确定值是否为NULL，不能直接检查是否 = NULL。</p>
</blockquote>
<blockquote>
<p>NULL和非匹配。“未知”有特殊的含义，数据库不知道它们是否匹配，所以在进行匹配过滤或非匹配过滤时，不会返回含有NULL的行。过滤数据时，一定要验证被过滤列中含NULL的行，确实出现在返回的数据中。</p>
</blockquote>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL必知必会(5)高级过滤数据</title>
    <url>/2020/12/06/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A-5-%E9%AB%98%E7%BA%A7%E8%BF%87%E6%BB%A4%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p><strong>操作符（operator）</strong>：用来连接或改变WHERE子句中的子句的关键字，也称为逻辑操作符（logical operator）。</p>
<p><strong>AND操作符</strong>：要通过不止一个列进行过滤。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> ‘DLL01’ <span class="keyword">AND</span> prod_price <span class="operator">&lt;=</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_price</th>
<th>prod_name</th>
</tr>
</thead>
<tbody><tr>
<td>BNBG01</td>
<td>3.49</td>
<td>Fish bean bag toy</td>
</tr>
<tr>
<td>BNBG02</td>
<td>3.49</td>
<td>Bird bean bag toy</td>
</tr>
<tr>
<td>BNBG03</td>
<td>3.49</td>
<td>Rabbit bean bag toy</td>
</tr>
</tbody></table>
<p><strong>OR操作符</strong>：多个条件，满足任意一个即可。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> ‘DLL01’ <span class="keyword">OR</span> vend_id <span class="operator">=</span> ‘BRS01’;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_price</th>
</tr>
</thead>
<tbody><tr>
<td>8 inch teddy bear</td>
<td>5.99</td>
</tr>
<tr>
<td>12 inch teddy bear</td>
<td>8.99</td>
</tr>
<tr>
<td>18 inch teddy bear</td>
<td>11.99</td>
</tr>
<tr>
<td>Fish bean bag toy</td>
<td>3.49</td>
</tr>
<tr>
<td>Bird bean bag toy</td>
<td>3.49</td>
</tr>
<tr>
<td>Rabbit bean bag toy</td>
<td>3.49</td>
</tr>
<tr>
<td>Raggedy Ann</td>
<td>4.99</td>
</tr>
</tbody></table>
<p>求值顺序：<br>目标：想要列出价格为10美元及以上，且由DLL01或BRS01制造的所有产品。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*------------错误示例------------*/</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> ‘DLL01’ <span class="keyword">OR</span> vend_id <span class="operator">=</span> ‘BRS01’</span><br><span class="line">        <span class="keyword">AND</span> prod_price <span class="operator">&gt;=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_price</th>
</tr>
</thead>
<tbody><tr>
<td>18 inch teddy bear</td>
<td>11.99</td>
</tr>
<tr>
<td>Fish bean bag toy</td>
<td>3.49</td>
</tr>
<tr>
<td>Bird bean bag toy</td>
<td>3.49</td>
</tr>
<tr>
<td>Rabbit bean bag toy</td>
<td>3.49</td>
</tr>
<tr>
<td>Raggedy Ann</td>
<td>4.99</td>
</tr>
</tbody></table>
<blockquote>
<p>SQL在处理OR操作符之前，优先处理AND操作符。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*------------正确示例------------*/</span></span><br><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> (vend_id <span class="operator">=</span> ‘DLL01’ <span class="keyword">OR</span> vend_id <span class="operator">=</span> ‘BRS01’)</span><br><span class="line">    <span class="keyword">AND</span> prod_price <span class="operator">&gt;=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_price</th>
</tr>
</thead>
<tbody><tr>
<td>18 inch teddy bear</td>
<td>11.99</td>
</tr>
</tbody></table>
<blockquote>
<p>圆括号比AND或OR具有更高的优先级，任何时候使用具有AND、OR的WHERE子句，都可以使用圆括号消除歧义。</p>
</blockquote>
<p><strong>IN操作符</strong>：用来指定条件范围，范围中的每个条件都可以进行匹配。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (‘DLL01’, ‘BRS01’)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_price</th>
</tr>
</thead>
<tbody><tr>
<td>12 inch teddy bear</td>
<td>8.99</td>
</tr>
<tr>
<td>18 inch teddy bear</td>
<td>11.99</td>
</tr>
<tr>
<td>8 inch teddy bear</td>
<td>5.99</td>
</tr>
<tr>
<td>Bird bean bag toy</td>
<td>3.49</td>
</tr>
<tr>
<td>Fish bean bag toy</td>
<td>3.49</td>
</tr>
<tr>
<td>Rabbit bean bag toy</td>
<td>3.49</td>
</tr>
<tr>
<td>Raggedy Ann</td>
<td>4.99</td>
</tr>
</tbody></table>
<blockquote>
<p>IN操作符与OR具有相同功能。</p>
</blockquote>
<blockquote>
<p>使用IN操作符的优点：</p>
<ul>
<li>在有很多合法选项时，IN更加清楚直观；</li>
<li>在于其他AND、OR组合使用IN时，求值顺序易管理；</li>
<li>IN比一组OR执行更快；</li>
<li>IN可以包含其他SELECT语句，能够更动态的建立WHERE子句。</li>
</ul>
</blockquote>
<p><strong>NOT操作符</strong>：WHERE子句中用来否定其后条件的关键字。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name </span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> vend_id <span class="operator">=</span> ‘DLL01’</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>prod_name</th>
</tr>
</thead>
<tbody><tr>
<td>12 inch teddy bear</td>
</tr>
<tr>
<td>18 inch teddy bear</td>
</tr>
<tr>
<td>8 inch teddy bear</td>
</tr>
<tr>
<td>King doll</td>
</tr>
<tr>
<td>Queen doll</td>
</tr>
</tbody></table>
<p>+——————–+</p>
<blockquote>
<p>上面的例子，也可以用<code>&lt;&gt;</code>来完成。</p>
</blockquote>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Scratch还能做出这么酷炫的3D效果？</title>
    <url>/2021/05/23/Scratch%E8%BF%98%E8%83%BD%E5%81%9A%E5%87%BA%E8%BF%99%E4%B9%88%E9%85%B7%E7%82%AB%E7%9A%843D%E6%95%88%E6%9E%9C%EF%BC%9F/</url>
    <content><![CDATA[<p>哇！</p>
<iframe src="//player.bilibili.com/player.html?aid=758188286&bvid=BV1y64y1d7yt&cid=343226566&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<span id="more"></span>

<p>酷炫的3D星空效果，想知道怎么实现的吗？</p>
<h1 id="绘制角色"><a href="#绘制角色" class="headerlink" title="绘制角色"></a>绘制角色</h1><p>Scratch版本3.22.0</p>
<p>首先把小猫干掉，我们选择自己绘制角色。</p>
<p>按住shift再绘制圆形，可以画出正圆！但是画之前，先选好填充颜色。这样填充会给人一种3D立体的感觉。</p>
<img src="/2021/05/23/Scratch%E8%BF%98%E8%83%BD%E5%81%9A%E5%87%BA%E8%BF%99%E4%B9%88%E9%85%B7%E7%82%AB%E7%9A%843D%E6%95%88%E6%9E%9C%EF%BC%9F/1.png" class>

<p>下面开始画圆，大小在<code>40*40</code>左右即可。</p>
<img src="/2021/05/23/Scratch%E8%BF%98%E8%83%BD%E5%81%9A%E5%87%BA%E8%BF%99%E4%B9%88%E9%85%B7%E7%82%AB%E7%9A%843D%E6%95%88%E6%9E%9C%EF%BC%9F/2.png" class>

<h1 id="选择背景"><a href="#选择背景" class="headerlink" title="选择背景"></a>选择背景</h1><p>由于是星空，所以我们需要选择深色背景（如Galaxy、Stars、Nebula），也可以像我一样直接拿一个黑色长方形~</p>
<img src="/2021/05/23/Scratch%E8%BF%98%E8%83%BD%E5%81%9A%E5%87%BA%E8%BF%99%E4%B9%88%E9%85%B7%E7%82%AB%E7%9A%843D%E6%95%88%E6%9E%9C%EF%BC%9F/3.png" class>

<h1 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h1><h2 id="本体"><a href="#本体" class="headerlink" title="本体"></a>本体</h2><p>这个程序中，本体要做的只有一个，那就是不停克隆自己：</p>
<img src="/2021/05/23/Scratch%E8%BF%98%E8%83%BD%E5%81%9A%E5%87%BA%E8%BF%99%E4%B9%88%E9%85%B7%E7%82%AB%E7%9A%843D%E6%95%88%E6%9E%9C%EF%BC%9F/4.png" class>

<h2 id="距离"><a href="#距离" class="headerlink" title="距离"></a>距离</h2><p>我们平时看东西，会有一个「近大远小」的现象，距离我们比较近的都会特别大，距离我们很远的都会很小。</p>
<p>对于我们的星星也可以这样来设计，首先创建一个变量距离，因为每个星星到我们的距离都不同，因此这个变量<strong>仅适用于当前角色</strong>。假设星星到我们的距离时1到10之间，那么可以使用随机来创建不同距离的星星。</p>
<img src="/2021/05/23/Scratch%E8%BF%98%E8%83%BD%E5%81%9A%E5%87%BA%E8%BF%99%E4%B9%88%E9%85%B7%E7%82%AB%E7%9A%843D%E6%95%88%E6%9E%9C%EF%BC%9F/5.png" class>

<h2 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h2><p>当距离越小，角色就应该越大；距离越大，角色就应该越小。<strong>角色的大小和距离成反比。</strong>那么可以使用除法来设置角色大小：</p>
<img src="/2021/05/23/Scratch%E8%BF%98%E8%83%BD%E5%81%9A%E5%87%BA%E8%BF%99%E4%B9%88%E9%85%B7%E7%82%AB%E7%9A%843D%E6%95%88%E6%9E%9C%EF%BC%9F/6.png" class>

<h2 id="开始移动"><a href="#开始移动" class="headerlink" title="开始移动"></a>开始移动</h2><p>下面只需要让这些星星从右向左移动就行了，先移到最右边，再减少x坐标，直到移出舞台。</p>
<img src="/2021/05/23/Scratch%E8%BF%98%E8%83%BD%E5%81%9A%E5%87%BA%E8%BF%99%E4%B9%88%E9%85%B7%E7%82%AB%E7%9A%843D%E6%95%88%E6%9E%9C%EF%BC%9F/7.png" class>

<p>看看效果：</p>
<iframe src="//player.bilibili.com/player.html?aid=630739988&bvid=BV18b4y1o7Rc&cid=343226890&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="450" width="100%"> </iframe>

<p>噢，我的上帝，看起来速度<strong>相同</strong>还很快，一点也不3D啊~</p>
<h2 id="速度"><a href="#速度" class="headerlink" title="速度"></a>速度</h2><p>除了近大远小，还有「近快远慢」。当你坐在车上，看眼前的大树，它们嗖嗖嗖的从眼前闪过。而如果看看远处的山，却感觉它好像几乎没有移动。</p>
<p>所以把近处（距离小）的星星速度变快，远处的变慢吧。又是反比，继续使用除法！</p>
<img src="/2021/05/23/Scratch%E8%BF%98%E8%83%BD%E5%81%9A%E5%87%BA%E8%BF%99%E4%B9%88%E9%85%B7%E7%82%AB%E7%9A%843D%E6%95%88%E6%9E%9C%EF%BC%9F/9.png" class>

<iframe src="//player.bilibili.com/player.html?aid=333170393&bvid=BV19A411G7n4&cid=343227151&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="450" width="100%"> </iframe>

<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>至此程序已经基本完成了，不过还有一个不合常理之处，那就是小的克隆体会出现在大的克隆体之上。这里涉及到一个「层」的概念，我们根据距离，将角色后移相应层数即可。</p>
<img src="/2021/05/23/Scratch%E8%BF%98%E8%83%BD%E5%81%9A%E5%87%BA%E8%BF%99%E4%B9%88%E9%85%B7%E7%82%AB%E7%9A%843D%E6%95%88%E6%9E%9C%EF%BC%9F/11.png" class>

<h1 id="全部程序和运行效果"><a href="#全部程序和运行效果" class="headerlink" title="全部程序和运行效果"></a>全部程序和运行效果</h1><img src="/2021/05/23/Scratch%E8%BF%98%E8%83%BD%E5%81%9A%E5%87%BA%E8%BF%99%E4%B9%88%E9%85%B7%E7%82%AB%E7%9A%843D%E6%95%88%E6%9E%9C%EF%BC%9F/12.png" class>

<iframe src="//player.bilibili.com/player.html?aid=758188286&bvid=BV1y64y1d7yt&cid=343226566&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="450" width="100%"> </iframe>

]]></content>
      <categories>
        <category>Scratch</category>
      </categories>
      <tags>
        <tag>Scratch</tag>
      </tags>
  </entry>
  <entry>
    <title>ChatGPT首次会晤</title>
    <url>/2023/02/16/chatGPT%E9%A6%96%E6%AC%A1%E4%BC%9A%E6%99%A4/</url>
    <content><![CDATA[<blockquote>
<p>为节省时间，本文部分内容由ChatGPT生成。</p>
</blockquote>
<span id="more"></span>
<h1 id="什么是ChatGPT？"><a href="#什么是ChatGPT？" class="headerlink" title="什么是ChatGPT？"></a>什么是ChatGPT？</h1><p>ChatGPT是一种基于自然语言处理技术的聊天机器人，它可以通过对话与用户进行交互。它是由OpenAI开发的，采用了最新的GPT（Generative Pre-training Transformer）模型，可以实现对话的生成和理解。与传统的聊天机器人不同，ChatGPT可以模拟人类对话的风格和方式，从而实现更加自然、流畅的交流。ChatGPT的应用场景包括但不限于自然语言交互、文本生成、智能客服、语音交互等。</p>
<h1 id="ChatGPT为什么突然火了？"><a href="#ChatGPT为什么突然火了？" class="headerlink" title="ChatGPT为什么突然火了？"></a>ChatGPT为什么突然火了？</h1><p>ChatGPT突然火起来主要是由于其所使用的GPT模型的出色表现和实用性。GPT是一种自然语言处理技术，能够在未知上下文中生成自然语言文本。在最近几年的发展中，GPT已经实现了极大的进步，成为自然语言生成的最先进技术之一。而ChatGPT则将这种技术应用到聊天机器人中，实现了更加自然、流畅的对话体验，从而得到了广泛的关注和使用。</p>
<p>另外，随着社交媒体和在线社区的兴起，人们的社交活动也越来越多地发生在网络中。在这种情况下，ChatGPT的普及也得益于其方便快捷的聊天体验，用户可以在不受时间和空间限制的情况下与ChatGPT进行交互，获取所需的信息和支持。</p>
<p>总之，ChatGPT的突然火起来是由于其使用的GPT技术的出色表现和实用性，以及社交活动向网络化转移的趋势所推动的。</p>
<h1 id="如何使用ChatGPT"><a href="#如何使用ChatGPT" class="headerlink" title="如何使用ChatGPT"></a>如何使用ChatGPT</h1><p>要使用ChatGPT进行对话，可以按照以下步骤进行：</p>
<ol>
<li><p>找到可以访问ChatGPT的平台。例如，OpenAI官方网站上提供了一个在线的ChatGPT接口，用户可以直接在网页上与ChatGPT进行交互。</p>
</li>
<li><p>进入ChatGPT界面后，输入您想要与ChatGPT进行对话的内容。ChatGPT会根据您的输入内容，生成相应的回复，并返回给您。</p>
</li>
<li><p>根据ChatGPT的回复内容，继续与ChatGPT进行对话。您可以通过不断地输入内容和观察ChatGPT的回复，逐渐深入对话，获取您想要的信息或体验愉快的聊天时光。</p>
</li>
</ol>
<p>除了在OpenAI官方网站上，还有其他许多平台和应用程序支持ChatGPT，例如智能音箱、聊天应用程序等。使用这些应用程序时，用户可以通过语音输入或者文本输入与ChatGPT进行交互，享受更为便捷和自然的聊天体验。</p>
<p>需要注意的是，尽管ChatGPT能够产生人类类似的对话，但它并不能完全代替人类交互。ChatGPT目前仍有其局限性和缺陷，需要持续的技术发展和改进。因此，在使用ChatGPT时，需要保持谨慎和理性，同时遵守相应的法律法规和使用规范。</p>
<h1 id="中国用户如何注册openai账号？"><a href="#中国用户如何注册openai账号？" class="headerlink" title="中国用户如何注册openai账号？"></a>中国用户如何注册openai账号？</h1><p>由于目前OpenAI官方网站仅支持英文界面，因此对于中国用户来说，注册OpenAI账号可能会有一些难度。以下是一个简要的注册流程：</p>
<ol>
<li><p>打开OpenAI官方网站<a href="https://openai.com/">https://openai.com/</a>，进入网站首页。</p>
</li>
<li><p>点击右上角的“Sign Up”按钮，进入注册页面。</p>
</li>
<li><p>在注册页面上，需要填写邮箱地址、密码、用户名等信息，以完成账号注册。请注意，OpenAI官方网站要求密码必须包含字母和数字，并且长度不得少于8位。</p>
</li>
<li><p>注册成功后，您可以登录OpenAI官方网站，进入ChatGPT接口页面，开始与ChatGPT进行交互。</p>
</li>
</ol>
<p>需要注意的是，由于OpenAI接口目前需要访问国外服务器，可能会受到网络访问的影响。同时，OpenAI的访问权限和服务范围也受到一些限制，用户需要注意遵守相关规定，并在使用过程中保持谨慎和理性。</p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>ChatGPT</tag>
      </tags>
  </entry>
  <entry>
    <title>kaggle项目之泰坦尼克幸存预测</title>
    <url>/2020/05/12/kaggle%E9%A1%B9%E7%9B%AE%20-%20%E6%B3%B0%E5%9D%A6%E5%B0%BC%E5%85%8B%E5%B9%B8%E5%AD%98%E9%A2%84%E6%B5%8B/</url>
    <content><![CDATA[<p>kaggle是一个机器学习竞赛平台。</p>
<span id="more"></span>

<h1 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h1><p>作为kaggle的第一个项目，很有必要记录一下遇到的问题和解决的办法，哈哈哈。<br>kaggle是个国外网站，首先加载很慢……其次呢是鄙人英语水平实在不好，全程翻译……<br>在项目描述中，推荐通过<a href="https://www.kaggle.com/alexisbcook/titanic-tutorial">这个大佬的教程</a>来完成这个项目，所以下面的内容全都是跟这位大佬的解说，一步一步进行的。</p>
<h1 id="Steps"><a href="#Steps" class="headerlink" title="Steps~"></a>Steps~</h1><p>教程的右侧就是操作步骤喽！</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>首先我们需要点击参加比赛按钮，并且接受规则什么的，然后就可以点击data标签，来获取需要的<strong>数据集</strong>了！我们可以使用gender_submission.csv这个文件，来尝试提交一下答案<del>这个数据比较偏激，只是用来测试提交答案功能的，不过我们应该提交的答案，需要和它格式相同，也就是说这是一个答案模板</del></p>
<p>这里我上传答案若干次，都失败了，原因不明……</p>
<h2 id="Your-coding-environment"><a href="#Your-coding-environment" class="headerlink" title="Your coding environment"></a>Your coding environment</h2><p>这里就要开始搭建环境了，新建一个kaggle的notebook<del>这篇就是诞生于此</del><br>接下开，就是复制大佬的代码，从导入数据开始!</p>
<p>下面的代码，新建笔记本时就自动生成了，主要是导入需要的库。比如数据分析必备的numpy和pandas，读写文件需要的os。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This Python 3 environment comes with many helpful analytics libraries installed</span></span><br><span class="line"><span class="comment"># It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python</span></span><br><span class="line"><span class="comment"># For example, here&#x27;s several helpful packages to load</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># linear algebra</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment"># data processing, CSV file I/O (e.g. pd.read_csv)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Input data files are available in the read-only &quot;../input/&quot; directory</span></span><br><span class="line"><span class="comment"># For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">for</span> dirname, _, filenames <span class="keyword">in</span> os.walk(<span class="string">&#x27;/kaggle/input&#x27;</span>):</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">        <span class="built_in">print</span>(os.path.join(dirname, filename))</span><br><span class="line"></span><br><span class="line"><span class="comment"># You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using &quot;Save &amp; Run All&quot; </span></span><br><span class="line"><span class="comment"># You can also write temporary files to /kaggle/temp/, but they won&#x27;t be saved outside of the current session</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/12/kaggle%E9%A1%B9%E7%9B%AE%20-%20%E6%B3%B0%E5%9D%A6%E5%B0%BC%E5%85%8B%E5%B9%B8%E5%AD%98%E9%A2%84%E6%B5%8B/out1.jpg"></p>
<p>下面的代码是用来读取训练数据的，运行后展示前5行结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_data = pd.read_csv(<span class="string">&quot;/kaggle/input/titanic/train.csv&quot;</span>)</span><br><span class="line">train_data.head()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/12/kaggle%E9%A1%B9%E7%9B%AE%20-%20%E6%B3%B0%E5%9D%A6%E5%B0%BC%E5%85%8B%E5%B9%B8%E5%AD%98%E9%A2%84%E6%B5%8B/out2.jpg"></p>
<p>下面的代码是用来读取测试数据的，运行后展示前5行结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_data = pd.read_csv(<span class="string">&quot;/kaggle/input/titanic/test.csv&quot;</span>)</span><br><span class="line">test_data.head()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/12/kaggle%E9%A1%B9%E7%9B%AE%20-%20%E6%B3%B0%E5%9D%A6%E5%B0%BC%E5%85%8B%E5%B9%B8%E5%AD%98%E9%A2%84%E6%B5%8B/out3.jpg"></p>
<h2 id="Improve-your-score"><a href="#Improve-your-score" class="headerlink" title="Improve your score"></a>Improve your score</h2><p>假如我们的gender_submission.csv文件成立，也就是女性全部存活，男性全部死亡。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">women = train_data.loc[train_data.Sex == <span class="string">&#x27;female&#x27;</span>][<span class="string">&quot;Survived&quot;</span>]</span><br><span class="line">rate_women = <span class="built_in">sum</span>(women)/<span class="built_in">len</span>(women)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;% of women who survived:&quot;</span>, rate_women)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/05/12/kaggle%E9%A1%B9%E7%9B%AE%20-%20%E6%B3%B0%E5%9D%A6%E5%B0%BC%E5%85%8B%E5%B9%B8%E5%AD%98%E9%A2%84%E6%B5%8B/out4.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">men = train_data.loc[train_data.Sex == <span class="string">&#x27;male&#x27;</span>][<span class="string">&quot;Survived&quot;</span>]</span><br><span class="line">rate_men = <span class="built_in">sum</span>(men)/<span class="built_in">len</span>(men)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;% of men who survived:&quot;</span>, rate_men)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/12/kaggle%E9%A1%B9%E7%9B%AE%20-%20%E6%B3%B0%E5%9D%A6%E5%B0%BC%E5%85%8B%E5%B9%B8%E5%AD%98%E9%A2%84%E6%B5%8B/out5.jpg"><br>通过结果我们可以看出，船上有74%女性幸存，而只有19%的男性幸存。所以猜测的“女性全部存活，男性全部死亡”这个结论，是非常贴近结果的！！<br>但是我们还有其他的指标，不能只看性别，还要看年龄等等。此时就可以请机器学习来自动完成~这里我们使用随机森林来实现（我也不知道什么是随机森林，先看例子吧）。<br>二话不说贴代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"></span><br><span class="line">y = train_data[<span class="string">&quot;Survived&quot;</span>]</span><br><span class="line"></span><br><span class="line">features = [<span class="string">&quot;Pclass&quot;</span>, <span class="string">&quot;Sex&quot;</span>, <span class="string">&quot;SibSp&quot;</span>, <span class="string">&quot;Parch&quot;</span>]</span><br><span class="line">X = pd.get_dummies(train_data[features])</span><br><span class="line">X_test = pd.get_dummies(test_data[features])</span><br><span class="line"></span><br><span class="line">model = RandomForestClassifier(n_estimators=<span class="number">100</span>, max_depth=<span class="number">5</span>, random_state=<span class="number">1</span>)</span><br><span class="line">model.fit(X, y)</span><br><span class="line">predictions = model.predict(X_test)</span><br><span class="line"></span><br><span class="line">output = pd.DataFrame(&#123;<span class="string">&#x27;PassengerId&#x27;</span>: test_data.PassengerId, <span class="string">&#x27;Survived&#x27;</span>: predictions&#125;)</span><br><span class="line">output.to_csv(<span class="string">&#x27;my_submission.csv&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Your submission was successfully saved!&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/05/12/kaggle%E9%A1%B9%E7%9B%AE%20-%20%E6%B3%B0%E5%9D%A6%E5%B0%BC%E5%85%8B%E5%B9%B8%E5%AD%98%E9%A2%84%E6%B5%8B/out6.jpg"><br>秃然就完成了！我们可以点击右上角的Save Version，并选择Save &amp; Run All (Commit)这个按钮，保存就可以了。保存以后我们点击Save Version后的数字，进入笔记本，再选择通过Viewer打开，就可以看到和大佬教程一样的格式了~</p>
<h2 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h2><p>程序生成了一个my_submission.csv文件，可以在Viewer中的output标签看到，点击提交就算完成比赛了~</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>到此这个项目就算完成了，教程的最后是大佬的机器学习课程广告（怪不得一直在教程里说不用理解代码，抄就完事），据说只有3个小时，会讲解刚刚抄的代码。<br>通过这个项目，我们基本了解了如何参加一次kaggle比赛，从报名到提交答案，每个步骤几乎都涉及过，搞起来！</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS下pygame版本选择</title>
    <url>/2021/09/28/macOS%E4%B8%8Bpygame%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[<p><code>pygame 2.0</code>  VS  <code>pygame 2.0.0 dev6</code></p>
<p>先说<strong>结论</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple pygame==2.0.0.dev6</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>以下问题和解决方案仅适用于：</p>
<ul>
<li>我的个人电脑：mbp2019 macOS 10.15.7</li>
<li>python 3.8.10</li>
</ul>
<img src="/2021/09/28/macOS%E4%B8%8Bpygame%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9/%E7%94%B5%E8%84%91.png" class>

<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>当我使用<code>pygame 2.0</code>制作最简单的弹球游戏时，电脑屏幕的显示略有抽风，弹球并不是预期的一种匀速直线运动，而是像下面这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">screen = pygame.display.set_mode((<span class="number">600</span>, <span class="number">500</span>))</span><br><span class="line">pygame.display.set_caption(<span class="string">&quot;移动矩形&quot;</span>)</span><br><span class="line"></span><br><span class="line">color = <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span></span><br><span class="line">pos_x = <span class="number">300</span></span><br><span class="line">pos_y = <span class="number">250</span></span><br><span class="line">vx = <span class="number">1</span></span><br><span class="line">vy = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">    screen.fill((<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>))</span><br><span class="line"></span><br><span class="line">    pos_x += vx</span><br><span class="line">    pos_y += vy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pos_x &gt; <span class="number">500</span> <span class="keyword">or</span> pos_x &lt; <span class="number">0</span>:</span><br><span class="line">        vx = -vx</span><br><span class="line">    <span class="keyword">if</span> pos_y &gt; <span class="number">400</span> <span class="keyword">or</span> pos_y &lt; <span class="number">0</span>:</span><br><span class="line">        vy = -vy</span><br><span class="line">    pos = pos_x, pos_y, <span class="number">100</span>, <span class="number">100</span></span><br><span class="line">    pygame.draw.rect(screen, color, pos)</span><br><span class="line"></span><br><span class="line">    pygame.display.update()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="/2021/09/28/macOS%E4%B8%8Bpygame%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9/%E6%8A%BD%E9%A3%8E.gif" class>

<p>这<strong>不行</strong>啊！怎么能恢复正常呢？</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>终于在众多的百度谷歌中，找到一个短小精悍的<a href="https://stackoverflow.com/questions/68225235/unable-to-obtain-graphics-context-for-nswindow-mojave-behavior-pygame">回答</a>，解决方案是用pygame的一个开发版，我怕出现问题就原封不动的安装了答主的版本（加了个镜像）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple pygame==2.0.0.dev6</span><br></pre></td></tr></table></figure>

<p>这下好了：</p>
<img src="/2021/09/28/macOS%E4%B8%8Bpygame%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9/%E6%AD%A3%E5%B8%B8.gif" class>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>bug</tag>
        <tag>Python</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS安装VEX Tournament Manager端口占用问题</title>
    <url>/2023/02/02/macOS%E5%AE%89%E8%A3%85VEX-Tournament-Manager%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>Hi!</p>
<span id="more"></span>
<h1 id="安装VEX-Tournament-Manager"><a href="#安装VEX-Tournament-Manager" class="headerlink" title="安装VEX Tournament Manager"></a>安装VEX Tournament Manager</h1><p>准备学习VEX机器人了，在安装VEX Tournament Manager时遇到了打不开的情形，并收获<strong>3连弹</strong>，如下图所示：<br><img src="/2023/02/02/macOS%E5%AE%89%E8%A3%85VEX-Tournament-Manager%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/error1.png" alt="error1"><br><img src="/2023/02/02/macOS%E5%AE%89%E8%A3%85VEX-Tournament-Manager%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/error2.png" alt="error2"><br><img src="/2023/02/02/macOS%E5%AE%89%E8%A3%85VEX-Tournament-Manager%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/error3.png" alt="error3"></p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>打开系统设置 - 通用 - 隔空投送与接力<br>关闭 <code>隔空播放接收器</code><br><img src="/2023/02/02/macOS%E5%AE%89%E8%A3%85VEX-Tournament-Manager%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/solve1.png" alt="solve1"><br><img src="/2023/02/02/macOS%E5%AE%89%E8%A3%85VEX-Tournament-Manager%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/solve2.png" alt="solve2"></p>
]]></content>
      <categories>
        <category>机器人编程</category>
      </categories>
      <tags>
        <tag>bug</tag>
        <tag>VEX</tag>
      </tags>
  </entry>
  <entry>
    <title>pygame笨拙的旋转</title>
    <url>/2021/10/09/pygame%E7%AC%A8%E6%8B%99%E7%9A%84%E6%97%8B%E8%BD%AC/</url>
    <content><![CDATA[<p>标题来自Jonathan S.Harbour的《Python游戏编程入门》。</p>
<span id="more"></span>

<p>先不写了。有空再说。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>游戏</tag>
        <tag>pygame</tag>
      </tags>
  </entry>
  <entry>
    <title>pyinstaller的傻瓜式用法</title>
    <url>/2023/03/06/pyinstaller%E7%9A%84%E5%82%BB%E7%93%9C%E5%BC%8F%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p><code>PyInstaller</code>是一个能将Python程序打包成可执行文件的优秀第三方库，Python程序打包后，新的程序就可以在没有安装Python的电脑上运行。<code>pyinstaller</code>最新版本已经支持绝大部分操作系统。</p>
<span id="more"></span>
<p>在日常编程时，我经常会用Python帮家人、朋友和学生处理一些小问题，然而他们的电脑上很可能并未安装Python，此时我们先对程序打包，然后就可以直接发给他们使用了。</p>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>最近有的班陆续要从micro:bit转向学Python，这就要求学生们从用鼠标转移到用键盘，那么提前练习打字，熟悉各按键的位置就很有必要。</p>
<p>下面的打字游戏代码就是本次要打包的项目。</p>
<h2 id="打字游戏简介"><a href="#打字游戏简介" class="headerlink" title="打字游戏简介"></a>打字游戏简介</h2><p>打字游戏是一个比较有意义的项目，既能打字，又是游戏。[doge]<br>以下是使用<code>pygame</code>编写的简单版打字游戏：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.<span class="built_in">locals</span> <span class="keyword">import</span> KEYDOWN</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">screen = pygame.display.set_mode((<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line"></span><br><span class="line">myfont = pygame.font.Font(<span class="literal">None</span>, <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">diff_ticks = <span class="number">20</span></span><br><span class="line">ticks = pygame.time.get_ticks() + diff_ticks</span><br><span class="line">word_diff_ticks = <span class="number">1000</span></span><br><span class="line">word_ticks = pygame.time.get_ticks() + word_diff_ticks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_random_word</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取随机的字母，使用ascii码</span></span><br><span class="line"><span class="string">    :return: x, y, 字母, 字母颜色</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    color = (random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">0</span>, <span class="number">255</span>),</span><br><span class="line">             random.randint(<span class="number">0</span>, <span class="number">255</span>))  <span class="comment"># 颜色随机</span></span><br><span class="line">    x = random.randint(<span class="number">100</span>, <span class="number">800</span> - <span class="number">100</span>)  <span class="comment"># x坐标从左右边距各100之间随机</span></span><br><span class="line">    y = <span class="number">0</span></span><br><span class="line">    word = random.randint(<span class="number">65</span>, <span class="number">90</span>)</span><br><span class="line">    <span class="keyword">return</span> [x, y, word, color]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = [get_random_word()]  <span class="comment"># 创建初始列表</span></span><br><span class="line"></span><br><span class="line">state = <span class="number">1</span>  <span class="comment"># 1.进行中 2.失败</span></span><br><span class="line">flash = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> state == <span class="number">1</span> <span class="keyword">and</span> <span class="built_in">len</span>(arr) &gt; <span class="number">0</span> <span class="keyword">and</span> event.<span class="built_in">type</span> == KEYDOWN:</span><br><span class="line">            <span class="keyword">if</span> event.key == arr[<span class="number">0</span>][<span class="number">2</span>] + <span class="number">32</span>:  <span class="comment"># 大小写字母差32</span></span><br><span class="line">                arr.pop(<span class="number">0</span>)  <span class="comment"># 如果打字正确，从列表中弹出</span></span><br><span class="line"></span><br><span class="line">    screen.fill((<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))  <span class="comment"># 白色背景</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):  <span class="comment"># 绘制这些字母</span></span><br><span class="line">        x, y, word, c = arr[i]</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">and</span> flash:</span><br><span class="line">            c = (random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">0</span>, <span class="number">255</span>),</span><br><span class="line">                 random.randint(<span class="number">0</span>, <span class="number">255</span>))  <span class="comment"># 随机颜色</span></span><br><span class="line">        textImage = myfont.render(<span class="built_in">chr</span>(word), <span class="literal">True</span>, c)</span><br><span class="line">        screen.blit(textImage, (x, y))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> state == <span class="number">2</span>:  <span class="comment"># 失败，结束程序</span></span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> state == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> pygame.time.get_ticks() &gt;= word_ticks:  <span class="comment"># 计时增加新字母</span></span><br><span class="line">            word_ticks += word_diff_ticks</span><br><span class="line">            arr.append(get_random_word())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pygame.time.get_ticks() &gt;= ticks:</span><br><span class="line">            ticks += diff_ticks</span><br><span class="line">            flash = <span class="number">1</span> - flash</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">                arr[i][<span class="number">1</span>] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(arr) &gt; <span class="number">0</span> <span class="keyword">and</span> arr[<span class="number">0</span>][<span class="number">1</span>] &gt; <span class="number">600</span>:  <span class="comment"># 闪烁的字母的y坐标大于600</span></span><br><span class="line">                state = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    pygame.display.flip()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="pyinstaller的使用"><a href="#pyinstaller的使用" class="headerlink" title="pyinstaller的使用"></a><code>pyinstaller</code>的使用</h1><h2 id="安装与升级"><a href="#安装与升级" class="headerlink" title="安装与升级"></a>安装与升级</h2><p>如果你没有安装过<code>pyinstaller</code>，在终端（命令提示符）使用<code>pip</code>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure>
<p>如果你安装过<code>pyinstaller</code>，想要使用最新版本，在终端（命令提示符）使用<code>pip</code>升级</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install --upgrade pyinstaller</span><br></pre></td></tr></table></figure>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="快速"><a href="#快速" class="headerlink" title="快速"></a>快速</h3><p>直接在终端输入命令<code>pyinstaller</code>和你要打包的py文件路径，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyinstaller test.py</span><br></pre></td></tr></table></figure>
<p>待命令执行完毕后，日志信息最后出现<code>successfully</code>就代表打包成功。<br><img src="/2023/03/06/pyinstaller%E7%9A%84%E5%82%BB%E7%93%9C%E5%BC%8F%E7%94%A8%E6%B3%95/successfully.png"><br>打包会生成一些文件和文件夹，在<code>dist</code>文件夹中就可以找到我们想要的打包好的程序。</p>
<h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><p><code>pyinstaller</code>提供了很多命令参数，用户可以根据需要进行选择。<a href="https://pyinstaller.org/en/stable/usage.html#options">官方文档</a>列出了全部的参数，以下我只选择一些我用过的：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>缩写</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>--onedir</code></td>
<td><code>-D</code></td>
<td>打包多个文件，在dist中生成很多依赖文件</td>
</tr>
<tr>
<td><code>--windowed, --noconsole</code></td>
<td><code>-w</code></td>
<td>使用Windows子系统执行，当程序启动的时候不会打开命令行</td>
</tr>
<tr>
<td><code>–-icon=&lt;FILE.ico&gt;</code></td>
<td><code>-i</code></td>
<td>将<code>file.ico</code>添加为可执行文件的资源</td>
</tr>
</tbody></table>
<h1 id="打包打字游戏"><a href="#打包打字游戏" class="headerlink" title="打包打字游戏"></a>打包打字游戏</h1><p>这里我们以打字游戏为例，对它进行Windows和macOS不同系统的打包，并为了美观加上一个图标。</p>
<h2 id="图标下载"><a href="#图标下载" class="headerlink" title="图标下载"></a>图标下载</h2><p>推荐<a href="https://www.iconfont.cn/">阿里巴巴矢量图标库</a>，搜索想要的图标后，可以根据需求选择大小和格式进行下载。<br><img src="/2023/03/06/pyinstaller%E7%9A%84%E5%82%BB%E7%93%9C%E5%BC%8F%E7%94%A8%E6%B3%95/icon.png"></p>
<h2 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h2><p>我们将py文件与图标放在同一个文件夹下，并在终端执行打包命令，对于Windows系统和macOS系统，需要分开操作。</p>
<blockquote>
<p>这里的不同系统是指打包好的程序需要再哪种系统运行，打包过程的命令可以在任一系统进行，不受影响</p>
</blockquote>
<ul>
<li>Windows</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyinstaller -w -F -i FILE.ico 打字训练.py </span><br></pre></td></tr></table></figure>
<p><img src="/2023/03/06/pyinstaller%E7%9A%84%E5%82%BB%E7%93%9C%E5%BC%8F%E7%94%A8%E6%B3%95/exe.png"></p>
<ul>
<li>macOS<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyinstaller -w -D -i FILE.ico 打字训练.py </span><br></pre></td></tr></table></figure>
<img src="/2023/03/06/pyinstaller%E7%9A%84%E5%82%BB%E7%93%9C%E5%BC%8F%E7%94%A8%E6%B3%95/app.png"></li>
</ul>
<p><strong>运行试试效果吧！</strong></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python三个数比较</title>
    <url>/2021/07/21/python%E4%B8%89%E4%B8%AA%E6%95%B0%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<p>如何进行三个数的大小比较？</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法1</span></span><br><span class="line">a, b, c = <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> a != b <span class="keyword">and</span> b != c <span class="keyword">and</span> a != c:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;三个数都不相等&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line">a, b, c = <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> a != b != c:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;三个数都不相等&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>运行上面的程序，得出结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三个数都不相等</span><br><span class="line">三个数都不相等</span><br></pre></td></tr></table></figure>

<p>而对于方法2，我们赋值时<code>a</code>和<code>c</code>是相等的，程序并没有判断<code>a</code>和<code>c</code>的关系。</p>
<p>因此结论是：当比较三个数是否大小相等时，要严格按照<strong>两两比较</strong>的形式，即<strong>方法1是正确的</strong>。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>运算符</tag>
      </tags>
  </entry>
  <entry>
    <title>tkinter中如何给控件的command传递参数</title>
    <url>/2022/09/30/tkinter%E4%B8%AD%E5%A6%82%E4%BD%95%E7%BB%99%E6%8E%A7%E4%BB%B6%E7%9A%84command%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<p>踩坑了，务必记录一下。</p>
<span id="more"></span>

<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在tkinter程序中，<code>Button</code>绑定的函数是不能带返回值的，编写代码时<code>command=</code>后边的函数名不能带有括号（不能直接执行）。</p>
<p>那如果想要传入<strong>带参数的函数</strong>该怎么办呢？（必须带括号的函数）</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h2 id="非循环"><a href="#非循环" class="headerlink" title="非循环"></a>非循环</h2><p>假如在程序中，你会改变<code>Entry</code>中的值，然后<code>Button</code>需要读取这个值，那么直接使用<code>lambda</code>函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此为示例代码</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line">e = tk.Entry(window).pack()</span><br><span class="line">b = tk.Button(window, text=<span class="string">&quot;xx&quot;</span>, command=<span class="keyword">lambda</span>: e.get()).pack()</span><br></pre></td></tr></table></figure>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>假如在程序中，你需要在<code>Button</code>中操作一个循环变量，那么不能向上边一样直接<code>lambda</code>，需要小小操作一番：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此为示例代码</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line"></span><br><span class="line">links = [url1, url2, url3]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建三个按钮，分别调用浏览器打开url1，url2，url3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    b = tk.Button(window, text=<span class="string">&quot;xx&quot;</span>, command=<span class="keyword">lambda</span> i=i: webbrowser.<span class="built_in">open</span>(links[i])).pack()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考：<a href="https://www.zhihu.com/question/399386753">https://www.zhihu.com/question/399386753</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>GUI</tag>
        <tag>tkinter</tag>
      </tags>
  </entry>
  <entry>
    <title>turtle如何自定义画笔形状</title>
    <url>/2020/12/19/turtle%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%BB%E7%AC%94%E5%BD%A2%E7%8A%B6/</url>
    <content><![CDATA[<p>turtle内置的画笔形状一共只有这么几种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;arrow&quot;</span>, <span class="string">&quot;turtle&quot;</span>, <span class="string">&quot;circle&quot;</span>, <span class="string">&quot;square&quot;</span>, <span class="string">&quot;triangle&quot;</span>, <span class="string">&quot;classic&quot;</span></span><br></pre></td></tr></table></figure>

<p>那么总有一些时候，我们希望画笔的形状是可以自定义的，比如导入一张png图片作为shape。</p>
<img src="/2020/12/19/turtle%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%BB%E7%AC%94%E5%BD%A2%E7%8A%B6/car.png" class>

<span id="more"></span>

<h1 id="内置形状"><a href="#内置形状" class="headerlink" title="内置形状"></a>内置形状</h1><p>我们可以循环的创建一下画笔，每个画笔一个形状，一排摆开。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line">shps = [<span class="string">&quot;arrow&quot;</span>, <span class="string">&quot;turtle&quot;</span>, <span class="string">&quot;circle&quot;</span>, <span class="string">&quot;square&quot;</span>, <span class="string">&quot;triangle&quot;</span>, <span class="string">&quot;classic&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(shps)):</span><br><span class="line">    t = turtle.Turtle()</span><br><span class="line">    t.pu()</span><br><span class="line">    t.goto(<span class="number">100</span> * s -<span class="number">300</span>, <span class="number">0</span>)</span><br><span class="line">    t.shape(shps[s])</span><br></pre></td></tr></table></figure>

<p>画出来以后，原来它们是这个样子：</p>
<img src="/2020/12/19/turtle%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%BB%E7%AC%94%E5%BD%A2%E7%8A%B6/shapes.png" class>

<p>其中<code>turtle</code>和<code>classic</code>是最常用的两个形状了，一个是默认的小箭头，另一个是萌萌的小海龟~</p>
<h1 id="自定义形状"><a href="#自定义形状" class="headerlink" title="自定义形状"></a>自定义形状</h1><h2 id="用turtle绘制"><a href="#用turtle绘制" class="headerlink" title="用turtle绘制"></a>用turtle绘制</h2><p>当我查看turtle的官方文档，有一个神秘的<a href="https://docs.python.org/3.7/library/turtle.html#turtle.register_shape">链接</a>出现在shape的附近。</p>
<img src="/2020/12/19/turtle%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%BB%E7%AC%94%E5%BD%A2%E7%8A%B6/doc.png" class>

<p>点击一下，文档会滚动到下边的位置，哦原来是「设置与特殊方法」。</p>
<img src="/2020/12/19/turtle%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%BB%E7%AC%94%E5%BD%A2%E7%8A%B6/doc2.png" class>

<p>官方文档的描述是如此的繁琐，再加上一层机器翻译，更难理解了（字我都认识，放在一起怎么就晕了呢？）。</p>
<p>简单来说，我们可以<strong>注册</strong>一个画笔，注册后就可以对它进行一个使用。</p>
<p>这里的例子，就解释了内置形状的<code>triangle</code>的由来，它是如何注册的。</p>
<p>那么我们可以注册一个新的三角形：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"></span><br><span class="line">screen = t.Screen()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册一个新的形状，叫做 triangle222 ，三点相连形成</span></span><br><span class="line">screen.register_shape(<span class="string">&quot;triangle222&quot;</span>, ((<span class="number">10</span>,-<span class="number">6</span>), (<span class="number">0</span>,<span class="number">50</span>), (-<span class="number">10</span>,-<span class="number">6</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置画笔形状为 triangle222</span></span><br><span class="line">t.shape(<span class="string">&quot;triangle222&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 走两步试试~</span></span><br><span class="line">t.fd(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<p>看看效果吧：</p>
<img src="/2020/12/19/turtle%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%BB%E7%AC%94%E5%BD%A2%E7%8A%B6/nshape1.gif" class>

<p>还不错哦，有了这个方法我们可以自己画一个画笔的形状了！</p>
<h2 id="导入图片作为画笔形状"><a href="#导入图片作为画笔形状" class="headerlink" title="导入图片作为画笔形状"></a>导入图片作为画笔形状</h2><p>这才是本文的重点啊！</p>
<p>我们可以直接注册一个gif来作为画笔的形状，这里我推荐一个免费的图标库<a href="https://www.iconfont.cn/">iconfont</a>，因为画笔最好还是小一些比较好，所以一个好看的图标正合适。我们下载一个小汽车图片。</p>
<img src="/2020/12/19/turtle%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%BB%E7%AC%94%E5%BD%A2%E7%8A%B6/%E5%B0%8F%E6%B1%BD%E8%BD%A6.png" class>

<p>啊，有点大了，用工具将它改的小一些，并将后缀名改为<code>gif</code>。和上边的步骤一样，将这个文件注册为一个<code>shape</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"></span><br><span class="line">screen = t.Screen()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册一个新的形状，直接导入图片</span></span><br><span class="line">screen.register_shape(<span class="string">&quot;小汽车.gif&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置画笔形状为 小汽车.gif</span></span><br><span class="line">t.shape(<span class="string">&quot;小汽车.gif&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 走两步试试~</span></span><br><span class="line">t.fd(<span class="number">200</span>)</span><br></pre></td></tr></table></figure>

<p>看看效果吧：</p>
<img src="/2020/12/19/turtle%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%BB%E7%AC%94%E5%BD%A2%E7%8A%B6/nshape2.gif" class>

<p>简直完美！</p>
<p>这样我们就可以自己选择喜欢的图片来作为画笔形状了。</p>
<blockquote>
<p>参考文献：<a href="https://my.oschina.net/oisanblog/blog/3420837">python学习turtle(更改海龟图标)</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用turtle实现动画效果</title>
    <url>/2020/12/02/%E4%BD%BF%E7%94%A8turtle%E5%AE%9E%E7%8E%B0%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p>众所周知，turtle能够像画笔一样来作图。一个绘图程序运行后，我们能够像看动画一样观看整个绘图过程。但是今天说的动画可和它不太一样。</p>
<span id="more"></span>

<p>我们可以用下面的函数调整画笔的速度。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">turtle.speed(<span class="number">1</span>)</span><br><span class="line">turtle.speed(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>在官方文档中，<code>turtle.speed()</code>的参数是0-10的整数，从<code>1</code>到<code>10</code>速度递增。<code>0</code>比较特殊，速度最快，几乎是瞬间完成。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle, time</span><br><span class="line"></span><br><span class="line">t1 = turtle.Turtle()</span><br><span class="line">t2 = turtle.Turtle()</span><br><span class="line">t3 = turtle.Turtle()</span><br><span class="line"></span><br><span class="line">pens = [t1, t2, t3]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pens)):</span><br><span class="line">    pens[i].pu()</span><br><span class="line">    pens[i].goto(-<span class="number">100</span>, -<span class="number">100</span> + <span class="number">50</span> * i)</span><br><span class="line">    pens[i].pd()</span><br><span class="line"></span><br><span class="line">t1.speed(<span class="number">1</span>)</span><br><span class="line">t2.speed(<span class="number">5</span>)</span><br><span class="line">t3.speed(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">t1.fd(<span class="number">300</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">t2.fd(<span class="number">300</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">t3.fd(<span class="number">300</span>)</span><br></pre></td></tr></table></figure>

<p>效果比较明显：</p>
<img src="/2020/12/02/%E4%BD%BF%E7%94%A8turtle%E5%AE%9E%E7%8E%B0%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/speed.gif" class>

<p>可以说，这是一种动画的效果，毕竟能够看到绘画的全过程嘛。但是这个不是今天的重点，今天要讲的是真正的动画。</p>
<img src="/2020/12/02/%E4%BD%BF%E7%94%A8turtle%E5%AE%9E%E7%8E%B0%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/download.png" class>

<p>赶紧进入正题，要想使画面动起来，肯定是先画出主体，再将它移动。这里我们先看一个奇葩转圈图。</p>
<img src="/2020/12/02/%E4%BD%BF%E7%94%A8turtle%E5%AE%9E%E7%8E%B0%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/roll1.gif" class>



<blockquote>
<p>“很快啊！”          ——马老师</p>
</blockquote>
<p>下面看一下代码，为什么画完之后会转起来？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line">turtle.speed(<span class="number">0</span>)</span><br><span class="line">turtle.Screen().bgcolor(<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个函数主要是画出一个奇葩图形，你想转什么就画什么</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arm</span>(<span class="params">col</span>):</span></span><br><span class="line">    turtle.begin_fill()</span><br><span class="line">    turtle.color(col)</span><br><span class="line">    turtle.fd(<span class="number">60</span>)</span><br><span class="line">    turtle.lt(<span class="number">60</span>)</span><br><span class="line">    turtle.fd(<span class="number">60</span>)</span><br><span class="line">    turtle.rt(<span class="number">60</span>)</span><br><span class="line">    turtle.fd(<span class="number">60</span>)</span><br><span class="line">    turtle.rt(<span class="number">60</span>)</span><br><span class="line">    turtle.fd(<span class="number">60</span>)</span><br><span class="line">    turtle.lt(<span class="number">60</span>)</span><br><span class="line">    turtle.fd(<span class="number">60</span>)</span><br><span class="line">    turtle.lt(<span class="number">120</span>)</span><br><span class="line">    turtle.fd(<span class="number">120</span>)</span><br><span class="line">    turtle.lt(<span class="number">60</span>)</span><br><span class="line">    turtle.fd(<span class="number">120</span>)</span><br><span class="line">    turtle.lt(<span class="number">60</span>)</span><br><span class="line">    turtle.fd(<span class="number">120</span>)</span><br><span class="line">    turtle.lt(<span class="number">120</span>)</span><br><span class="line">    turtle.end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个函数可以画出我们转动的主体，我的主体是6个不同颜色的arm</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">turn</span>(<span class="params">angle</span>):</span></span><br><span class="line">    turtle.seth(angle)</span><br><span class="line">    arm(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    turtle.lt(<span class="number">60</span>)</span><br><span class="line">    arm(<span class="string">&#x27;orange&#x27;</span>)</span><br><span class="line">    turtle.lt(<span class="number">60</span>)</span><br><span class="line">    arm(<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">    turtle.lt(<span class="number">60</span>)</span><br><span class="line">    arm(<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">    turtle.lt(<span class="number">60</span>)</span><br><span class="line">    arm(<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">    turtle.lt(<span class="number">60</span>)</span><br><span class="line">    arm(<span class="string">&#x27;purple&#x27;</span>)</span><br><span class="line">    turtle.lt(<span class="number">60</span>)</span><br><span class="line">    turtle.hideturtle()</span><br><span class="line"></span><br><span class="line">angle = <span class="number">0</span>  <span class="comment"># 设置一个初始角度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    turtle.clear()</span><br><span class="line">    turn(angle)</span><br><span class="line">    turtle.tracer(n=<span class="number">1000000000</span>)</span><br><span class="line">    angle += <span class="number">15</span>  <span class="comment"># 每次循环角度都增加15度</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里两个自定义函数都很好理解，主要看一下 <code>turtle.tracer()</code>，它的意思<strong>大概是</strong>将之前画过的作品重复一次，<code>n</code>的大小就是重复的速度，也就是说<code>n</code>如果很大，就可以瞬间完成刚才的画作。所以循环中的过程可以理解为（图有些丑）：</p>
<pre class="mermaid">graph TD
    B((开始)) -->C{while True}
    C -->  D[clear清屏] 
    D[clear清屏] --> E[seth改变角度]
    E[seth改变角度] --> F[tracer再画一次]
    F[tracer再画一次] --> G[角度增加15]
    G[角度增加15] --> C</pre>

<p>所以，图中的6个arm就转起来了，修改每次循环的角度可以调整旋转速度和方向哦。（负数为反方向）</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式日志采集框架Flume</title>
    <url>/2019/04/04/%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E6%A1%86%E6%9E%B6Flume/</url>
    <content><![CDATA[<h1 id="Flume概述"><a href="#Flume概述" class="headerlink" title="Flume概述"></a>Flume概述</h1><p>Flume is a distributed, reliable, and available service for efficiently collecting(收集), aggregating(聚合), and moving(移动) large amounts of log data. </p>
<ul>
<li>Flume官网：<a href="http://flume.apache.org/">http://flume.apache.org/</a></li>
<li>FLume是一个分布式、高可靠、高可用的服务，用于分布式海量日志高效收集、聚合、移动系统。</li>
</ul>
<span id="more"></span>

<h2 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h2><ul>
<li>可靠性</li>
<li>扩展性</li>
<li>管理性</li>
</ul>
<h2 id="业界同类产品对比"><a href="#业界同类产品对比" class="headerlink" title="业界同类产品对比"></a>业界同类产品对比</h2><ul>
<li>Flume: Cloudera/Apache  Java</li>
<li>Scribe: Facebook C/C++ 不再维护</li>
<li>Chukwa: Yahoo/Apache Java 不再维护</li>
<li>Fluentd: Ruby</li>
<li>Logstash: ELK(Elasticsearch,Kibana)</li>
</ul>
<h2 id="Flume架构及核心组件"><a href="#Flume架构及核心组件" class="headerlink" title="Flume架构及核心组件"></a>Flume架构及核心组件</h2><p><img src="/2019/04/04/%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E6%A1%86%E6%9E%B6Flume/flume.png"></p>
<ul>
<li>Source      收集</li>
<li>Channel     聚集</li>
<li>Sink        输出</li>
</ul>
<h1 id="Flume环境部署"><a href="#Flume环境部署" class="headerlink" title="Flume环境部署"></a>Flume环境部署</h1><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ol>
<li>Java Runtime Environment - Java 1.8 or later</li>
<li>Memory - Sufficient memory for configurations used by sources, channels or sinks</li>
<li>Disk Space - Sufficient disk space for configurations used by channels or sinks</li>
<li>Directory Permissions - Read/Write permissions for directories used by agent</li>
</ol>
<h3 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h3><p>下载解压到~/app<br>将java配置到系统环境变量中：<code>vi ~/.bash_profile</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/root/app/jdk1.8.0_191</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>
<p>检测：<code>java -version</code></p>
<h3 id="安装Flume"><a href="#安装Flume" class="headerlink" title="安装Flume"></a>安装Flume</h3><p>下载解压到~/app<br>将flume配置到系统环境变量中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> FLUME_HOME=/root/app/apache-flume-1.6.0-cdh5.7.0-bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$FLUME_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>
<p>flume-env.sh的配置：<code>export JAVA_HOME=/root/app/jdk1.8.0_191</code><br>检测：<code>flume-ng version</code></p>
<h1 id="Flume实战"><a href="#Flume实战" class="headerlink" title="Flume实战"></a>Flume实战</h1><h2 id="需求1：从指定网络端口采集数据输出到控制台"><a href="#需求1：从指定网络端口采集数据输出到控制台" class="headerlink" title="需求1：从指定网络端口采集数据输出到控制台"></a>需求1：从指定网络端口采集数据输出到控制台</h2><p>使用flume的关键就是写配置文件：</p>
<ol>
<li>配置source</li>
<li>配置channel</li>
<li>配置sink</li>
<li>把以上3个组件串起来</li>
</ol>
<p>配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># example.conf: A single-node Flume configuration</span><br><span class="line"></span><br><span class="line"># a1:agent名称</span><br><span class="line"># r1:source名称</span><br><span class="line"># k1:sink名称</span><br><span class="line"># c1:channel名称</span><br><span class="line"></span><br><span class="line"># Name the components on this agent</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"></span><br><span class="line"># a1.channels.c1.capacity = 1000</span><br><span class="line"># a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>

<p>启动agent</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flume-ng agent \</span><br><span class="line">--name a1 \</span><br><span class="line">--conf <span class="variable">$FLUME_HOME</span>/conf \</span><br><span class="line">--conf-file <span class="variable">$FLUME_HOME</span>/conf/example.conf \</span><br><span class="line">-Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure>

<p>使用telnet进行测试：<code>telnet localhost 44444</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Event: &#123; headers:&#123;&#125; body: 68 65 6C 6C 6F 0D     hello. &#125;</span><br></pre></td></tr></table></figure>
<p>Event是Flume数据传输的基本单元<br>Event = 可选的header + byte array</p>
<h2 id="需求2：监控一个文件实时采集新增的数据输出到控制台"><a href="#需求2：监控一个文件实时采集新增的数据输出到控制台" class="headerlink" title="需求2：监控一个文件实时采集新增的数据输出到控制台"></a>需求2：监控一个文件实时采集新增的数据输出到控制台</h2><p>Agent选型：exec source + memory channel + logger sink</p>
<p>配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># example.conf: A single-node Flume configuration</span><br><span class="line"></span><br><span class="line"># Name the components on this agent</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># Describe/configure the source</span><br><span class="line">a1.sources.r1.type = exec</span><br><span class="line">a1.sources.r1.command = tail -F /root/data/data.log</span><br><span class="line">a1.sources.r1.shell = /bin/bash -c</span><br><span class="line"></span><br><span class="line"># Describe the sink</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"># Use a channel which buffers events in memory</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"></span><br><span class="line"># a1.channels.c1.capacity = 1000</span><br><span class="line"># a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># Bind the source and sink to the channel</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>

<p>启动agent</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flume-ng agent \</span><br><span class="line">--name a1 \</span><br><span class="line">--conf <span class="variable">$FLUME_HOME</span>/conf \</span><br><span class="line">--conf-file <span class="variable">$FLUME_HOME</span>/conf/exec-memory-logger.conf \</span><br><span class="line">-Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure>

<h2 id="需求3：将A服务器上的日志实时采集到B服务器"><a href="#需求3：将A服务器上的日志实时采集到B服务器" class="headerlink" title="需求3：将A服务器上的日志实时采集到B服务器"></a>需求3：将A服务器上的日志实时采集到B服务器</h2><p>技术选型：exec source + memory channel + avro sink<br>          avro source + memory channel + logger sink</p>
<p>配置文件1:exec-memory-avro.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec-memory-avro.sources = exec-source</span><br><span class="line">exec-memory-avro.sinks = avro-sink</span><br><span class="line">exec-memory-avro.channels = memory-channel</span><br><span class="line"></span><br><span class="line">exec-memory-avro.sources.exec-source.type = exec</span><br><span class="line">exec-memory-avro.sources.exec-source.command = tail -F /root/data/data.log</span><br><span class="line">exec-memory-avro.sources.exec-source.shell = /bin/bash -c</span><br><span class="line"></span><br><span class="line">exec-memory-avro.sinks.avro-sink.type = avro</span><br><span class="line">exec-memory-avro.sinks.avro-sink.hostname = bigdata-01</span><br><span class="line">exec-memory-avro.sinks.avro-sink.port = 44444</span><br><span class="line"></span><br><span class="line">exec-memory-avro.channels.memory-channel.type = memory</span><br><span class="line"></span><br><span class="line">exec-memory-avro.sources.exec-source.channels = memory-channel</span><br><span class="line">exec-memory-avro.sinks.avro-sink.channel = memory-channel</span><br></pre></td></tr></table></figure>

<p>配置文件2:avro-memory-logger.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">avro-memory-logger.sources = avro-source</span><br><span class="line">avro-memory-logger.sinks = logger-sink</span><br><span class="line">avro-memory-logger.channels = memory-channel</span><br><span class="line"></span><br><span class="line">avro-memory-logger.sources.avro-source.type = avro</span><br><span class="line">avro-memory-logger.sources.avro-source.bind = bigdata-01</span><br><span class="line">avro-memory-logger.sources.avro-source.port = 44444</span><br><span class="line"></span><br><span class="line">avro-memory-logger.sinks.logger-sink.type = logger</span><br><span class="line"></span><br><span class="line">avro-memory-logger.channels.memory-channel.type = memory</span><br><span class="line"></span><br><span class="line">avro-memory-logger.sources.avro-source.channels = memory-channel</span><br><span class="line">avro-memory-logger.sinks.logger-sink.channel = memory-channel</span><br></pre></td></tr></table></figure>

<p>先启动avro-memory-logger</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flume-ng agent \</span><br><span class="line">--name avro-memory-logger \</span><br><span class="line">--conf <span class="variable">$FLUME_HOME</span>/conf \</span><br><span class="line">--conf-file <span class="variable">$FLUME_HOME</span>/conf/avro-memory-logger.conf \</span><br><span class="line">-Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure>
<p>再启动exec-memory-avro</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flume-ng agent \</span><br><span class="line">--name exec-memory-avro \</span><br><span class="line">--conf <span class="variable">$FLUME_HOME</span>/conf \</span><br><span class="line">--conf-file <span class="variable">$FLUME_HOME</span>/conf/exec-memory-avro.conf \</span><br><span class="line">-Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure>

<p>日志收集过程：</p>
<ol>
<li>机器A上监控一个文件，当我们访问主站的时候，会有用户行为日志记录到access.log中</li>
<li>avro sink 把新产生的日志输出到对应的 avro source 指定的 hostname 和 port 上</li>
<li>通过 avro source 对应的 agent 将我们的日志输出到控制台(kafka)</li>
</ol>
]]></content>
      <categories>
        <category>大数据开发</category>
      </categories>
      <tags>
        <tag>大数据开发</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式消息发布订阅系统Kafka</title>
    <url>/2019/04/04/%E5%88%86%E5%B8%83%E5%BC%8F%E6%B6%88%E6%81%AF%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E7%B3%BB%E7%BB%9FKafka/</url>
    <content><![CDATA[<h1 id="Kafka概述"><a href="#Kafka概述" class="headerlink" title="Kafka概述"></a>Kafka概述</h1><ul>
<li>和消息系统类似</li>
<li>消息中间件：生产者和消费者</li>
<li>A distributed streaming platform</li>
</ul>
<span id="more"></span>

<h1 id="Kafka架构和核心概念"><a href="#Kafka架构和核心概念" class="headerlink" title="Kafka架构和核心概念"></a>Kafka架构和核心概念</h1><p><img src="/2019/04/04/%E5%88%86%E5%B8%83%E5%BC%8F%E6%B6%88%E6%81%AF%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E7%B3%BB%E7%BB%9FKafka/kafka.png"></p>
<ul>
<li>Kafka is run as a cluster on one or more servers that can span multiple datacenters.</li>
<li>The Kafka cluster stores streams of records in categories called topics.</li>
<li>Each record consists of a key, a value, and a timestamp.</li>
</ul>
<h1 id="单节点单broker的Kafka部署及使用"><a href="#单节点单broker的Kafka部署及使用" class="headerlink" title="单节点单broker的Kafka部署及使用"></a>单节点单broker的Kafka部署及使用</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># $KAFKA_HOME/config/server.properties</span></span><br><span class="line"></span><br><span class="line">broker.id=0</span><br><span class="line">listeners=PLAINTEXT://:9092</span><br><span class="line">host.name=bigdata-01</span><br><span class="line">log.dirs=/root/app/tmp/kafka-logs</span><br><span class="line">zookeeper.connect=bigdata-01:2181</span><br></pre></td></tr></table></figure>
<p>启动kafka</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/kafka-server-start.sh <span class="variable">$KAFKA_HOME</span>/config/server.properties</span><br><span class="line"></span><br><span class="line">USAGE: /root/app/kafka_2.11-0.9.0.0/bin/kafka-server-start.sh [-daemon] server.properties [--override property=value]*</span><br></pre></td></tr></table></figure>
<p>创建topic：zk</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/kafka-topics.sh --create --zookeeper bigdata-01:2181 --replication-factor 1 --partitions 1 --topic hello_topic</span><br></pre></td></tr></table></figure>
<p>查看所有topic</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/kafka-topics.sh --list --zookeeper bigdata-01:2181</span><br></pre></td></tr></table></figure>
<p>发送消息：broker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/kafka-console-producer.sh --broker-list bigdata-01:9092 --topic hello_topic</span><br></pre></td></tr></table></figure>
<p>消费消息：zk</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/kafka-console-consumer.sh --zookeeper bigdata-01:2181 -topic hello_topic</span><br></pre></td></tr></table></figure>
<p>查看所有topic的详细信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kafka-topics.sh --describe --zookeeper bigdata-01:2181</span><br></pre></td></tr></table></figure>
<p>查看指定topic的详细信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kafka-topics.sh --describe --zookeeper bigdata-01:2181 -topic hello_topic</span><br></pre></td></tr></table></figure>

<h1 id="单节点多broker的Kafka部署及使用"><a href="#单节点多broker的Kafka部署及使用" class="headerlink" title="单节点多broker的Kafka部署及使用"></a>单节点多broker的Kafka部署及使用</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置多个配置文件</span></span><br><span class="line">server-1.properties</span><br><span class="line">server-2.properties</span><br><span class="line">server-3.properties</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">kafka-server-start.sh -daemon <span class="variable">$KAFKA_HOME</span>/config/server-1.properties &amp;</span><br><span class="line">kafka-server-start.sh -daemon <span class="variable">$KAFKA_HOME</span>/config/server-2.properties &amp;</span><br><span class="line">kafka-server-start.sh -daemon <span class="variable">$KAFKA_HOME</span>/config/server-3.properties &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建topic</span></span><br><span class="line">bin/kafka-topics.sh --create --zookeeper bigdata-01:2181 --replication-factor 3 --partitions 1 --topic my-replication-topic</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动一个生产者</span></span><br><span class="line">kafka-console-producer.sh --broker-list bigdata-01:9093,bigdata-01:9094，bigdata-01:9095 --topic my-replication-topic</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动一个消费者</span></span><br><span class="line">kafka-console-consumer.sh --zookeeper bigdata-01:2181 -topic my-replication-topic</span><br></pre></td></tr></table></figure>

<h1 id="Kafka容错性测试"><a href="#Kafka容错性测试" class="headerlink" title="Kafka容错性测试"></a>Kafka容错性测试</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bigdata-01 ~]<span class="comment"># kafka-topics.sh --describe --zookeeper bigdata-01:2181</span></span><br><span class="line">Topic:hello_topic	PartitionCount:1	ReplicationFactor:1	Configs:</span><br><span class="line">	Topic: hello_topic	Partition: 0	Leader: 0	Replicas: 0	Isr: 0</span><br><span class="line">Topic:my-replication-topic	PartitionCount:1	ReplicationFactor:3	Configs:</span><br><span class="line">	Topic: my-replication-topic	Partition: 0	Leader: 3	Replicas: 3,1,2	Isr: 3,1,2</span><br></pre></td></tr></table></figure>
<p>此时leader为broker3，如果终止该进程，会发生什么呢？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bigdata-01 ~]<span class="comment"># jps -m</span></span><br><span class="line">2882 ConsoleConsumer --zookeeper bigdata-01:2181 -topic my-replication-topic</span><br><span class="line">2660 Kafka /root/app/kafka_2.11-0.9.0.0/config/server-3.properties</span><br><span class="line">2550 Kafka /root/app/kafka_2.11-0.9.0.0/config/server-1.properties</span><br><span class="line">2843 ConsoleProducer --broker-list bigdata-01:9093,bigdata-01:9094，bigdata-01:9095 --topic my-replication-topic</span><br><span class="line">2955 Jps -m</span><br><span class="line">1934 QuorumPeerMain /root/app/zookeeper-3.4.5-cdh5.7.0/bin/../conf/zoo.cfg</span><br><span class="line"></span><br><span class="line">[root@bigdata-01 ~]<span class="comment"># kill -9 2550</span></span><br><span class="line">[root@bigdata-01 ~]<span class="comment"># kill -9 2660</span></span><br><span class="line">[root@bigdata-01 ~]<span class="comment"># kafka-topics.sh --describe --zookeeper bigdata-01:2181</span></span><br><span class="line">Topic:hello_topic	PartitionCount:1	ReplicationFactor:1	Configs:</span><br><span class="line">	Topic: hello_topic	Partition: 0	Leader: 0	Replicas: 0	Isr: 0</span><br><span class="line">Topic:my-replication-topic	PartitionCount:1	ReplicationFactor:3	Configs:</span><br><span class="line">	Topic: my-replication-topic	Partition: 0	Leader: 2	Replicas: 3,1,2	Isr: 2</span><br></pre></td></tr></table></figure>
<p>发现杀掉broker1,3以后，选举2为leader，并不影响消息的发送和接收。</p>
<h1 id="Kafka的Java-API"><a href="#Kafka的Java-API" class="headerlink" title="Kafka的Java API"></a>Kafka的Java API</h1><p>使用IDEA + Maven构建开发环境，pom.xml配置如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scala.version</span>&gt;</span>2.11.8<span class="tag">&lt;/<span class="name">scala.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">kafka.version</span>&gt;</span>0.9.0.0<span class="tag">&lt;/<span class="name">kafka.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--kafka dependency--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;kafka.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;scala.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>创建Kafka的配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Kafka常用配置文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZK = <span class="string">&quot;bigdata-01:2181&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC = <span class="string">&quot;hello_topic&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BROKER_LIST = <span class="string">&quot;bigdata-01:9092&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GROUP_ID = <span class="string">&quot;test_group_1&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Kafka的生产者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> kafka.javaapi.producer.Producer;</span><br><span class="line"><span class="keyword">import</span> kafka.producer.KeyedMessage;</span><br><span class="line"><span class="keyword">import</span> kafka.producer.ProducerConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Kafka生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaProducer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String topic;</span><br><span class="line">    <span class="keyword">private</span> Producer&lt;Integer,String&gt; producer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KafkaProducer</span><span class="params">(String topic)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.topic = topic;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(<span class="string">&quot;metadata.broker.list&quot;</span>,KafkaProperties.BROKER_LIST);</span><br><span class="line">        properties.put(<span class="string">&quot;serializer.class&quot;</span>,<span class="string">&quot;kafka.serializer.StringEncoder&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;request.required.acks&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        producer = <span class="keyword">new</span> Producer&lt;Integer, String&gt;(<span class="keyword">new</span> ProducerConfig(properties));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> messageNo = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            String message = <span class="string">&quot;message_&quot;</span> + messageNo;</span><br><span class="line">            producer.send(<span class="keyword">new</span> KeyedMessage&lt;Integer, String&gt;(topic, message));</span><br><span class="line">            System.out.println(<span class="string">&quot;Sent: &quot;</span> + message);</span><br><span class="line">            messageNo ++ ;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Kafka的消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> kafka.consumer.Consumer;</span><br><span class="line"><span class="keyword">import</span> kafka.consumer.ConsumerConfig;</span><br><span class="line"><span class="keyword">import</span> kafka.consumer.ConsumerIterator;</span><br><span class="line"><span class="keyword">import</span> kafka.consumer.KafkaStream;</span><br><span class="line"><span class="keyword">import</span> kafka.javaapi.consumer.ConsumerConnector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.wjx.spark.kafka.KafkaProperties.GROUP_ID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Kafka消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String topic;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KafkaConsumer</span><span class="params">(String topic)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.topic = topic;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ConsumerConnector <span class="title">createConnector</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.put(<span class="string">&quot;zookeeper.connect&quot;</span>,KafkaProperties.ZK);</span><br><span class="line">        properties.put(<span class="string">&quot;group.id&quot;</span>,KafkaProperties.GROUP_ID);</span><br><span class="line">        <span class="keyword">return</span> Consumer.createJavaConsumerConnector(<span class="keyword">new</span> ConsumerConfig(properties));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ConsumerConnector consumer = createConnector();</span><br><span class="line">        Map&lt;String,Integer&gt; topicCountMap = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">        topicCountMap.put(topic, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String:topic</span></span><br><span class="line">        <span class="comment">//List&lt;KafkaStream&lt;byte[], byte[]&gt;&gt;  对应的数据流</span></span><br><span class="line">        Map&lt;String, List&lt;KafkaStream&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt;&gt;&gt; messageStreams = consumer.createMessageStreams(topicCountMap);</span><br><span class="line">        KafkaStream&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; stream = messageStreams.get(topic).get(<span class="number">0</span>);<span class="comment">//获取每次接收到的数据</span></span><br><span class="line">        ConsumerIterator&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; iterator = stream.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            String message = <span class="keyword">new</span> String(iterator.next().message());</span><br><span class="line">            System.out.println(<span class="string">&quot;received: &quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Kafka客户端启动测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Kafka Java API测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaClientApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> KafkaProducer(KafkaProperties.TOPIC).start();</span><br><span class="line">        <span class="keyword">new</span> KafkaConsumer(KafkaProperties.TOPIC).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据开发</category>
      </categories>
      <tags>
        <tag>大数据开发</tag>
      </tags>
  </entry>
  <entry>
    <title>利用ChatGPT辅助编写程序——问答系统</title>
    <url>/2023/04/19/%E5%88%A9%E7%94%A8ChatGPT%E8%BE%85%E5%8A%A9%E7%BC%96%E5%86%99%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>本文将介绍如何使用Python和Tkinter库编写一个带有问题和答案数据的简单问答系统，并利用ChatGPT辅助编写。</p>
<span id="more"></span>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>在编写代码之前，需要准备一个包含问题和答案的txt文件，每个问题和答案占两行，且问题和答案之间没有其他内容。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">什么是Python？</span><br><span class="line">Python是一种高级编程语言。</span><br><span class="line">什么是Tkinter？</span><br><span class="line">Tkinter是Python自带的GUI库。</span><br></pre></td></tr></table></figure>
<h1 id="读取txt文件中的数据"><a href="#读取txt文件中的数据" class="headerlink" title="读取txt文件中的数据"></a>读取txt文件中的数据</h1><p>首先，我们需要定义一个函数，用于读取txt文件中的数据。在该函数中，我们使用<code>with open()</code>语句打开txt文件，使用<code>read()</code>函数读取文件内容，并使用<code>splitlines()</code>函数将内容按行分割为一个列表。然后，我们遍历这个列表，将每两行作为一组数据，将问题和答案分别存储为一个字典，最后将这个字典返回。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_txt_file</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read().splitlines()</span><br><span class="line">        question_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), <span class="number">2</span>):</span><br><span class="line">            question = data[i].strip().lower()</span><br><span class="line">            answer = data[i+<span class="number">1</span>].strip()</span><br><span class="line">            question_dict[question] = answer</span><br><span class="line">        <span class="keyword">return</span> question_dict</span><br></pre></td></tr></table></figure>
<h1 id="获取问题对应的答案"><a href="#获取问题对应的答案" class="headerlink" title="获取问题对应的答案"></a>获取问题对应的答案</h1><p>接下来，我们需要定义一个函数，用于获取问题对应的答案。在该函数中，我们首先将输入的问题去除空格并转换为小写字母，并使用<code>[:100]</code>截取前100个字符，以便匹配速度更快。然后，我们使用正则表达式将问题中的空格替换为<code>.*</code>，这样就可以进行关键词匹配了。最后，我们遍历存储问题和答案的字典，使用<code>re.search()</code>函数匹配关键词，如果匹配成功，则返回对应的答案。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_answer</span>(<span class="params">question, question_dict</span>):</span></span><br><span class="line">    question = question.strip().lower()[:<span class="number">100</span>]</span><br><span class="line">    pattern = <span class="string">&#x27;.*&#x27;</span>.join(question.split())</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> question_dict.keys():</span><br><span class="line">        <span class="keyword">if</span> re.search(pattern, key):</span><br><span class="line">            <span class="keyword">return</span> question_dict[key]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<h1 id="创建GUI界面"><a href="#创建GUI界面" class="headerlink" title="创建GUI界面"></a>创建GUI界面</h1><p>对于 GUI 的创建，我们创建了一个标签对象，用于显示问题，一个输入框对象，用于输入问题，一个按钮对象，用于获取答案，以及一个标签对象，用于显示答案。接下来，我们需要将这些对象放置在窗口中，同时还需要对这些对象进行一些设置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个标签对象，用于显示问题</span></span><br><span class="line">question_label = tk.Label(window, text=<span class="string">&#x27;请输入问题：&#x27;</span>, font=(<span class="string">&#x27;微软雅黑&#x27;</span>, <span class="number">20</span>))</span><br><span class="line">question_label.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个输入框对象，用于输入问题</span></span><br><span class="line">question_entry = tk.Entry(window, font=(<span class="string">&#x27;微软雅黑&#x27;</span>, <span class="number">20</span>))</span><br><span class="line">question_entry.grid(row=<span class="number">0</span>, column=<span class="number">1</span>, padx=<span class="number">10</span>, pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个按钮对象，用于获取答案</span></span><br><span class="line">button = tk.Button(window, text=<span class="string">&#x27;获取答案&#x27;</span>, font=(<span class="string">&#x27;微软雅黑&#x27;</span>, <span class="number">20</span>), command=<span class="keyword">lambda</span>: answer_label.config(</span><br><span class="line">    text=get_answer(question_entry.get(), question_dict)))</span><br><span class="line">button.grid(row=<span class="number">0</span>, column=<span class="number">2</span>, padx=<span class="number">10</span>, pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个标签对象，用于显示答案</span></span><br><span class="line">answer_label = tk.Label(window, text=<span class="string">&#x27;&#x27;</span>, font=(<span class="string">&#x27;微软雅黑&#x27;</span>, <span class="number">20</span>))</span><br><span class="line">answer_label.grid(row=<span class="number">1</span>, column=<span class="number">0</span>, columnspan=<span class="number">3</span>, padx=<span class="number">10</span>, pady=<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>在这里，我们通过 <code>grid</code> 函数将每个对象放置在窗口的指定行和列位置。<code>padx</code> 和 <code>pady</code> 参数用于设置对象的水平和垂直间距。<code>columnspan</code> 参数用于将答案标签跨越多列，使其占据整个窗口的宽度。</p>
<p>为了使窗口始终处于顶部，我们还使用了 <code>attributes</code> 函数，并将 <code>&#39;-topmost&#39;</code> 参数设置为 <code>True</code>。最后，我们使用 <code>mainloop</code> 函数进入消息循环，等待用户输入问题。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在本文中，我们使用 Python 和 Tkinter 库编写了一个问答系统，并使用 ChatGPT 辅助开发这个系统。我们使用了一个 GUI，包括标签、输入框、按钮和标签等对象，用于输入问题、获取答案和显示答案。我们还实现了一个函数，用于读取 txt 文件中的数据，并实现了一个函数，用于获取问题对应的答案。最后，我们进入了消息循环，等待用户输入问题并获取答案。</p>
<p>在实际开发中，我们可以进一步优化这个问答系统，例如使用更先进的自然语言处理技术，支持多语言输入和输出，提供更加友好的界面等。</p>
<blockquote>
<p>注意：ChatGPT一般不会一次性完成你想要的程序效果，必须学会进行有效的提问，让AI能够准确get你的需求</p>
</blockquote>
<h1 id="完整程序"><a href="#完整程序" class="headerlink" title="完整程序"></a>完整程序</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入Tkinter、re模块</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用于读取txt文件中的数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_txt_file</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read().splitlines()</span><br><span class="line">        question_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), <span class="number">2</span>):</span><br><span class="line">            question = data[i].strip().lower()  <span class="comment"># 获取问题并去除空格和换行符</span></span><br><span class="line">            answer = data[i+<span class="number">1</span>].strip()  <span class="comment"># 获取答案并去除空格和换行符</span></span><br><span class="line">            question_dict[question] = answer</span><br><span class="line">        <span class="keyword">return</span> question_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用于获取问题对应的答案</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_answer</span>(<span class="params">question, question_dict</span>):</span></span><br><span class="line">    question = question.strip().lower()[:<span class="number">100</span>]  <span class="comment"># 去除空格并转换为小写字母，并截取前100个字符</span></span><br><span class="line">    pattern = <span class="string">&#x27;.*&#x27;</span>.join(question.split())  <span class="comment"># 将空格替换为.*</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> question_dict.keys():</span><br><span class="line">        <span class="keyword">if</span> re.search(pattern, key):</span><br><span class="line">            <span class="keyword">return</span> question_dict[key]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个窗口对象</span></span><br><span class="line">window = tk.Tk()</span><br><span class="line">window.title(<span class="string">&#x27;问答系统&#x27;</span>)</span><br><span class="line">window.geometry(<span class="string">&#x27;800x100&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个标签对象，用于显示问题</span></span><br><span class="line">question_label = tk.Label(window, text=<span class="string">&#x27;请输入问题：&#x27;</span>, font=(<span class="string">&#x27;微软雅黑&#x27;</span>, <span class="number">20</span>))</span><br><span class="line">question_label.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个输入框对象，用于输入问题</span></span><br><span class="line">question_entry = tk.Entry(window, font=(<span class="string">&#x27;微软雅黑&#x27;</span>, <span class="number">20</span>))</span><br><span class="line">question_entry.grid(row=<span class="number">0</span>, column=<span class="number">1</span>, padx=<span class="number">10</span>, pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个按钮对象，用于获取答案</span></span><br><span class="line">button = tk.Button(window, text=<span class="string">&#x27;获取答案&#x27;</span>, font=(<span class="string">&#x27;微软雅黑&#x27;</span>, <span class="number">20</span>), command=<span class="keyword">lambda</span>: answer_label.config(</span><br><span class="line">    text=get_answer(question_entry.get(), question_dict)))</span><br><span class="line">button.grid(row=<span class="number">0</span>, column=<span class="number">2</span>, padx=<span class="number">10</span>, pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个标签对象，用于显示答案</span></span><br><span class="line">answer_label = tk.Label(window, text=<span class="string">&#x27;&#x27;</span>, font=(<span class="string">&#x27;微软雅黑&#x27;</span>, <span class="number">20</span>))</span><br><span class="line">answer_label.grid(row=<span class="number">1</span>, column=<span class="number">0</span>, columnspan=<span class="number">3</span>, padx=<span class="number">10</span>, pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取txt文件中的数据</span></span><br><span class="line">question_dict = read_txt_file(<span class="string">&#x27;data.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让窗口总在前端</span></span><br><span class="line">window.attributes(<span class="string">&#x27;-topmost&#x27;</span>, <span class="literal">True</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入消息循环</span></span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure>

<h1 id="程序效果示例"><a href="#程序效果示例" class="headerlink" title="程序效果示例"></a>程序效果示例</h1><p><img src="/2023/04/19/%E5%88%A9%E7%94%A8ChatGPT%E8%BE%85%E5%8A%A9%E7%BC%96%E5%86%99%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/v5.png" alt="v5.png"></p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>AI</tag>
        <tag>VEX</tag>
      </tags>
  </entry>
  <entry>
    <title>升级版Turtle Race</title>
    <url>/2020/12/17/%E5%8D%87%E7%BA%A7%E7%89%88Turtle-Race/</url>
    <content><![CDATA[<p>其实这个项目来自一位我的新疆的学生。原本的Turtle Race项目只是画出赛道，创建两支画笔然后进行一个赛跑。但是学生后边学习了Turtle的事件、监听、绑定按键等知识以后，将原有的Turtle Race升级，做成一个人机交互小游戏。</p>
<img src="/2020/12/17/%E5%8D%87%E7%BA%A7%E7%89%88Turtle-Race/tr2.gif" class>

<span id="more"></span>

<p>游戏规则很简单：</p>
<p>一共有3只海龟，你控制其中的tina（红色），剩下两只海龟会自动前进。但是跑道旁边有一个红绿灯🚥，只有绿灯、黄灯亮起时才允许前进。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line">s = turtle.Screen()</span><br><span class="line">s.setup(width=<span class="number">500</span>, height=<span class="number">300</span>)</span><br><span class="line">t = turtle.Turtle()</span><br><span class="line">turtle.bgcolor(<span class="string">&#x27;skyblue&#x27;</span>)</span><br><span class="line">t.speed(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印规则</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;游戏规则：红灯停绿灯行，闯红灯有惩罚&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 赛道</span></span><br><span class="line">t.goto(-<span class="number">150</span>, <span class="number">50</span>)</span><br><span class="line">t.color(<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    t.fd(<span class="number">300</span>)</span><br><span class="line">    t.rt(<span class="number">90</span>)</span><br><span class="line">    t.fd(<span class="number">100</span>)</span><br><span class="line">    t.rt(<span class="number">90</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出终点线</span></span><br><span class="line">t.goto(<span class="number">150</span>, <span class="number">50</span>)</span><br><span class="line">t.color(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    t.fd(<span class="number">10</span>)</span><br><span class="line">    t.rt(<span class="number">90</span>)</span><br><span class="line">    t.fd(<span class="number">100</span>)</span><br><span class="line">    t.rt(<span class="number">90</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出分割线</span></span><br><span class="line">t.pu()</span><br><span class="line">t.goto(-<span class="number">150</span>, -<span class="number">16</span>)</span><br><span class="line">t.color(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">t.pd()</span><br><span class="line">t.fd(<span class="number">300</span>)</span><br><span class="line">t.pu()</span><br><span class="line">t.goto(-<span class="number">150</span>, <span class="number">17</span>)</span><br><span class="line">t.pd()</span><br><span class="line">t.fd(<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">t.hideturtle()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建海龟运动员</span></span><br><span class="line">tina = turtle.Turtle()</span><br><span class="line">tina.shape(<span class="string">&#x27;turtle&#x27;</span>)</span><br><span class="line">bob = turtle.Turtle()</span><br><span class="line">bob.shape(<span class="string">&#x27;turtle&#x27;</span>)</span><br><span class="line">frank = turtle.Turtle()</span><br><span class="line">frank.shape(<span class="string">&#x27;turtle&#x27;</span>)</span><br><span class="line">tina.pu()</span><br><span class="line">bob.pu()</span><br><span class="line">frank.pu()</span><br><span class="line">tina.color(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">bob.color(<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">frank.color(<span class="string">&#x27;orange&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动到起点</span></span><br><span class="line">tina.goto(-<span class="number">150</span>, <span class="number">40</span>)</span><br><span class="line">bob.goto(-<span class="number">150</span>, -<span class="number">40</span>)</span><br><span class="line">frank.goto(-<span class="number">150</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写出名字</span></span><br><span class="line">tina.write(<span class="string">&#x27;tina&#x27;</span>, font=(<span class="string">&#x27;楷体&#x27;</span>, <span class="number">15</span>))</span><br><span class="line">bob.write(<span class="string">&#x27;bob&#x27;</span>, font=(<span class="string">&#x27;楷体&#x27;</span>, <span class="number">15</span>))</span><br><span class="line">frank.write(<span class="string">&#x27;frank&#x27;</span>, font=(<span class="string">&#x27;楷体&#x27;</span>, <span class="number">15</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始赛跑并判断胜负</span></span><br><span class="line">a = turtle.Turtle()</span><br><span class="line">a.pu()</span><br><span class="line">a.hideturtle()</span><br><span class="line">a.goto(<span class="number">50</span>, <span class="number">100</span>)</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line">y = <span class="number">0</span></span><br><span class="line">r = <span class="number">0</span></span><br><span class="line">z = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">speed</span>():</span></span><br><span class="line">    tina.speed(<span class="number">0</span>)</span><br><span class="line">    tina.fd(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a.color(<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">a.dot(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">15</span> <span class="keyword">and</span> y &lt; <span class="number">6</span>:</span><br><span class="line">        a.pd()</span><br><span class="line">        a.color(<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line">        a.dot(<span class="number">30</span>)</span><br><span class="line">        y += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">15</span> <span class="keyword">and</span> y &gt; <span class="number">5</span>:</span><br><span class="line">        a.color(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">        a.dot(<span class="number">30</span>)</span><br><span class="line">        r = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> tina.xcor() != tina_x:</span><br><span class="line">            tina.bk(<span class="number">30</span>)</span><br><span class="line">        tina_x = tina.xcor()</span><br><span class="line">        z += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> z &gt; <span class="number">50</span>:</span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">        y = <span class="number">0</span></span><br><span class="line">        z = <span class="number">0</span></span><br><span class="line">        r = <span class="number">0</span></span><br><span class="line">        a.color(<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">        a.dot(<span class="number">30</span>)</span><br><span class="line">    s.onkey(speed, <span class="string">&#x27;Right&#x27;</span>)</span><br><span class="line">    s.listen()</span><br><span class="line">    tina_x = tina.xcor()</span><br><span class="line">    <span class="keyword">if</span> tina_x &gt;= <span class="number">150</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;tina win&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    n = random.randint(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> r == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    bob.fd(n - n * <span class="number">2</span>)</span><br><span class="line">    bob.fd(random.randint(n, <span class="number">10</span>))</span><br><span class="line">    bob_x = bob.xcor()</span><br><span class="line">    <span class="keyword">if</span> bob_x &gt;= <span class="number">150</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;bob win&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(random.randint(<span class="number">0</span>, <span class="number">6</span>)):</span><br><span class="line">        frank.fd(random.randint(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    frank_x = frank.xcor()</span><br><span class="line">    <span class="keyword">if</span> frank_x &gt;= <span class="number">150</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;frank win&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">turtle.mainloop()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据集群搭建</title>
    <url>/2019/04/04/%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>使用虚拟机搭建集群时的必要工作。</p>
<ul>
<li>修改网卡</li>
<li>关闭防火墙</li>
<li>修改主机名、映射关系</li>
<li>安装JDK，配置环境变量</li>
<li>时间同步、集群通信、免密</li>
</ul>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改网卡信息</span></span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"></span><br><span class="line">DEVICE=eth0</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">UUID=81c06473-0e58-4a5a-b4c4-35a2a853ab04</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=yes</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.8.100</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.8.1</span><br><span class="line">DNS1=192.168.8.1</span><br><span class="line">DNS2=114.114.114.114</span><br><span class="line"><span class="comment">#重启生效</span></span><br><span class="line">service network restart</span><br><span class="line"><span class="comment">#++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line"><span class="comment">#关闭防火墙                                     </span></span><br><span class="line">service iptables stop                           </span><br><span class="line">chkconfig iptables off                          </span><br><span class="line"><span class="comment">#++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line"><span class="comment">#修改主机名                                     </span></span><br><span class="line">vi /etc/sysconfig/network                       </span><br><span class="line"><span class="comment">#++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line"><span class="comment">#修改映射关系                                   </span></span><br><span class="line">vi /etc/hosts                                   </span><br><span class="line"><span class="comment">#++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line"><span class="comment">#环境变量                                       </span></span><br><span class="line">vi /etc/profile                                 </span><br><span class="line">                                                </span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/root/app/jdk1.8.0_191         </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin                </span><br><span class="line">                                                </span><br><span class="line"><span class="comment">#source一下生效                                 </span></span><br><span class="line"><span class="built_in">source</span> /etc/profile                             </span><br><span class="line"><span class="comment">#++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line"><span class="comment">#时间同步</span></span><br><span class="line">yum install ntpdate -y</span><br><span class="line">ntpdate 0.asia.pool.ntp.org</span><br><span class="line"><span class="comment">#++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line"><span class="comment">#集群通信</span></span><br><span class="line">yum install openssh-clients</span><br><span class="line"></span><br><span class="line">ssh登陆，scp发送文件</span><br><span class="line">scp -r /etc/hosts bigdata-03:/etc/</span><br><span class="line"></span><br><span class="line"><span class="comment">#免密登陆</span></span><br><span class="line">ssh-keygen -t rsa     <span class="comment">#生成公钥和私钥</span></span><br><span class="line">ssh-copy-id -i /root/.ssh/id_rsa.pub bigdata-03    <span class="comment">#为需要进行免密的机器进行发送公钥（不要忘了给自己发）</span></span><br><span class="line"><span class="comment">#++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据开发</category>
      </categories>
      <tags>
        <tag>大数据开发</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>如何将Chrome插件导出crx文件</title>
    <url>/2022/04/22/%E5%A6%82%E4%BD%95%E5%B0%86Chrome%E6%8F%92%E4%BB%B6%E5%AF%BC%E5%87%BAcrx%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>如何将Chrome插件导出crx文件呢？Chrome相信大家都很熟悉，但是Chrome插件给怎么导出呢，下面就让小编带大家一起了解吧。导出Chrome插件，其实就是把Chrome插件导出，大家可能会很惊讶Chrome插件怎么需要导出呢？但事实就是这样，小编也感到非常惊讶。这就是关于Chrome插件导出的事情了，大家有什么想法呢，欢迎在评论区告诉小编一起讨论哦！</p>
<span id="more"></span>
<p>有些时候，我们需要为浏览器安装扩展程序（插件），以便更好地使用浏览器。然而由于一些原因，直接安装插件不太方便。因此可以使用安装包的形式，直接将安装包拖入浏览器中安装。</p>
<p>那么想要获得安装包，就必须从一个已经安装了这个插件的浏览器中将其导出，这样就可以传递使用。</p>
<p>今天要讨论的就是，这个安装包怎么来的？</p>
<h1 id="查看已安装的插件"><a href="#查看已安装的插件" class="headerlink" title="查看已安装的插件"></a>查看已安装的插件</h1><p>首先进入浏览器，查看已经安装的扩展程序，注意打开<strong>开发者模式</strong>。<br><img src="/2022/04/22/%E5%A6%82%E4%BD%95%E5%B0%86Chrome%E6%8F%92%E4%BB%B6%E5%AF%BC%E5%87%BAcrx%E6%96%87%E4%BB%B6/1.png"></p>
<h1 id="选择要导出的插件"><a href="#选择要导出的插件" class="headerlink" title="选择要导出的插件"></a>选择要导出的插件</h1><p>在插件面板中，可以看到每个插件的ID，以及一个叫做<strong>打包安装程序</strong>的按钮。<br><img src="/2022/04/22/%E5%A6%82%E4%BD%95%E5%B0%86Chrome%E6%8F%92%E4%BB%B6%E5%AF%BC%E5%87%BAcrx%E6%96%87%E4%BB%B6/2.png"></p>
<h1 id="查找插件所在目录"><a href="#查找插件所在目录" class="headerlink" title="查找插件所在目录"></a>查找插件所在目录</h1><p>进入如下目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/Library/Application Support/Google/Chrome/Default/Extensions/</span><br></pre></td></tr></table></figure>
<p>在这个目录中，就是所有已经安装的扩展程序的目录了，目录下级的各文件夹，就是刚才看到的插件ID。</p>
<p>以红圈中的插件为例，我们需要复制版本号的这个文件夹的绝对路径。<br><img src="/2022/04/22/%E5%A6%82%E4%BD%95%E5%B0%86Chrome%E6%8F%92%E4%BB%B6%E5%AF%BC%E5%87%BAcrx%E6%96%87%E4%BB%B6/3.png"></p>
<h1 id="导出插件"><a href="#导出插件" class="headerlink" title="导出插件"></a>导出插件</h1><p>回到浏览器，点击<strong>打包扩展程序</strong>，并将复制的绝对路径粘贴进来，然后点击蓝色的<strong>打包扩展程序</strong>。<br><img src="/2022/04/22/%E5%A6%82%E4%BD%95%E5%B0%86Chrome%E6%8F%92%E4%BB%B6%E5%AF%BC%E5%87%BAcrx%E6%96%87%E4%BB%B6/4.png"></p>
<h1 id="获取安装包"><a href="#获取安装包" class="headerlink" title="获取安装包"></a>获取安装包</h1><p>回到刚刚的文件夹，发现一个<code>.crx</code>后缀的文件出现了，这就是我们打包好的插件。<br><img src="/2022/04/22/%E5%A6%82%E4%BD%95%E5%B0%86Chrome%E6%8F%92%E4%BB%B6%E5%AF%BC%E5%87%BAcrx%E6%96%87%E4%BB%B6/5.png"></p>
<p>这样就可以拖拽使用了。</p>
<blockquote>
<p>参考：<a href="https://www.csdn.net/tags/MtTaEg4sOTQ4ODE5LWJsb2cO0O0O.html">https://www.csdn.net/tags/MtTaEg4sOTQ4ODE5LWJsb2cO0O0O.html</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>安装python库时遇到ValueError: check_hostname requires server_hostname问题及解决</title>
    <url>/2022/03/20/%E5%AE%89%E8%A3%85python%E5%BA%93%E6%97%B6%E9%81%87%E5%88%B0ValueError-check-hostname-requires-server-hostname%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>正当我熟练地使用 <code>pip</code> 安装 <code>requests</code> 模块时，令人意想不到的一幕发生了……</p>
<span id="more"></span>

<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>今天准备爬虫，为了排查问题，我搬出了尘封已久的Windows笔记本，上一次打开这个电脑还是上一次。</p>
<p>这个电脑上的python很干净，我需要安装 <code>requests</code> 来完成爬虫的相关功能。</p>
<p>正当我熟练地使用 <code>pip</code> 安装这个模块时，令人意想不到的一幕发生了：</p>
<img src="/2022/03/20/%E5%AE%89%E8%A3%85python%E5%BA%93%E6%97%B6%E9%81%87%E5%88%B0ValueError-check-hostname-requires-server-hostname%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/1.png" class>

<p>一堆红色字体！</p>
<p>定睛一看，报错信息为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ValueError: check_hostname requires server_hostname</span><br></pre></td></tr></table></figure>

<h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>原来这个尘封已久的电脑，竟然还开机自启动微屁恩~</p>
<p>当我把微屁恩关掉，再次安装，就可以了。顺便更新了一下 <code>pip</code> 。</p>
<p>正确运行结果如上图所示。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>bug</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>实用SQL</title>
    <url>/2019/11/12/%E5%AE%9E%E7%94%A8SQL/</url>
    <content><![CDATA[<p>在编写SQL时，灵活运用一些技巧，可以大大简化程序逻辑。</p>
<span id="more"></span>

<h3 id="插入或替换"><a href="#插入或替换" class="headerlink" title="插入或替换"></a>插入或替换</h3><p>如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就先删除原记录，再插入新记录。此时，可以使用<code>REPLACE</code>语句，这样就不必先查询，再决定是否先删除再插入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REPLACE INTO students (id, class_id, name, gender, score) VALUES (1, 1, &#x27;小明&#x27;, &#x27;F&#x27;, 99);</span><br></pre></td></tr></table></figure>

<p>若<code>id=1</code>的记录不存在，<code>REPLACE</code>语句将插入新记录，否则，当前<code>id=1</code>的记录将被删除，然后再插入新记录。</p>
<h3 id="插入或更新"><a href="#插入或更新" class="headerlink" title="插入或更新"></a>插入或更新</h3><p>如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就更新该记录，此时，可以使用<code>INSERT INTO ... ON DUPLICATE KEY UPDATE ...</code>语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO students (id, class_id, name, gender, score) VALUES (1, 1, &#x27;小明&#x27;, &#x27;F&#x27;, 99) ON DUPLICATE KEY UPDATE name=&#x27;小明&#x27;, gender=&#x27;F&#x27;, score=99;</span><br></pre></td></tr></table></figure>

<p>若<code>id=1</code>的记录不存在，<code>INSERT</code>语句将插入新记录，否则，当前<code>id=1</code>的记录将被更新，更新的字段由<code>UPDATE</code>指定。</p>
<h3 id="插入或忽略"><a href="#插入或忽略" class="headerlink" title="插入或忽略"></a>插入或忽略</h3><p>如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就啥事也不干直接忽略，此时，可以使用<code>INSERT IGNORE INTO ...</code>语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT IGNORE INTO students (id, class_id, name, gender, score) VALUES (1, 1, &#x27;小明&#x27;, &#x27;F&#x27;, 99);</span><br></pre></td></tr></table></figure>

<p>若<code>id=1</code>的记录不存在，<code>INSERT</code>语句将插入新记录，否则，不执行任何操作。</p>
<h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p>如果想要对一个表进行快照，即复制一份当前表的数据到一个新表，可以结合<code>CREATE TABLE</code>和<code>SELECT</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 对class_id=1的记录进行快照，并存储为新表students_of_class1:</span><br><span class="line">CREATE TABLE students_of_class1 SELECT * FROM students WHERE class_id=1;</span><br></pre></td></tr></table></figure>

<p>新创建的表结构和<code>SELECT</code>使用的表结构完全一致。</p>
<h3 id="写入查询结果集"><a href="#写入查询结果集" class="headerlink" title="写入查询结果集"></a>写入查询结果集</h3><p>如果查询结果集需要写入到表中，可以结合<code>INSERT</code>和<code>SELECT</code>，将<code>SELECT</code>语句的结果集直接插入到指定表中。</p>
<p>例如，创建一个统计成绩的表<code>statistics</code>，记录各班的平均成绩：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE statistics (</span><br><span class="line">    id BIGINT NOT NULL AUTO_INCREMENT,</span><br><span class="line">    class_id BIGINT NOT NULL,</span><br><span class="line">    average DOUBLE NOT NULL,</span><br><span class="line">    PRIMARY KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>然后，我们就可以用一条语句写入各班的平均成绩：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO statistics (class_id, average) SELECT class_id, AVG(score) FROM students GROUP BY class_id;</span><br></pre></td></tr></table></figure>

<p>确保<code>INSERT</code>语句的列和<code>SELECT</code>语句的列能一一对应，就可以在<code>statistics</code>表中直接保存查询的结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; select * from statistics;</span><br><span class="line">+----+----------+--------------+</span><br><span class="line">| id | class_id | average      |</span><br><span class="line">+----+----------+--------------+</span><br><span class="line">|  1 |        1 |         86.5 |</span><br><span class="line">|  2 |        2 | 73.666666666 |</span><br><span class="line">|  3 |        3 | 88.333333333 |</span><br><span class="line">+----+----------+--------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>嵩天老师Python(1)基本语法元素</title>
    <url>/2019/04/04/%E5%B5%A9%E5%A4%A9%E8%80%81%E5%B8%88Python(1)%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h1 id="程序设计语言"><a href="#程序设计语言" class="headerlink" title="程序设计语言"></a>程序设计语言</h1><h2 id="编程语言种类很多，但生命力强劲的却不多"><a href="#编程语言种类很多，但生命力强劲的却不多" class="headerlink" title="编程语言种类很多，但生命力强劲的却不多"></a>编程语言种类很多，但生命力强劲的却不多</h2><ul>
<li>编程语言有超过600种，绝大部分都不再被使用</li>
<li>C语言诞生于1972年，它是第一个被广泛使用的编程语言</li>
<li>Python语言诞生于1990年，它是最流行最好用的编程语言</li>
</ul>
<span id="more"></span>

<h2 id="编译和解释"><a href="#编译和解释" class="headerlink" title="编译和解释"></a>编译和解释</h2><p>计算机执行源程序的两种方式：编译和解释</p>
<p>编译:将源代码一次性转换成目标代码的过程</p>
<p>解释:将源代码逐条转换成目标代码同时逐条运行的过程</p>
<h2 id="程序的基本编写方法"><a href="#程序的基本编写方法" class="headerlink" title="程序的基本编写方法"></a>程序的基本编写方法</h2><h3 id="IPO"><a href="#IPO" class="headerlink" title="IPO"></a>IPO</h3><p>程序的基本编写方法</p>
<ul>
<li>I：Input 输入，程序的输入</li>
<li>P：Process 处理，程序的主要逻辑</li>
<li>O：Output 输出，程序的输出</li>
</ul>
<h3 id="编程解决问题的步骤"><a href="#编程解决问题的步骤" class="headerlink" title="编程解决问题的步骤"></a>编程解决问题的步骤</h3><ol>
<li>分析问题：分析问题的计算部分，想清楚</li>
<li>划分边界：划分问题的功能边界，规划IPO</li>
<li>设计算法：设计问题的求解算法，关注算法</li>
<li>编写程序：编写问题的计算程序，编程序</li>
<li>调试测试：调试程序使正确运行，运行调试</li>
<li>升级维护：适应问题的升级维护，更新完善</li>
</ol>
<h1 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h1><p>Guido van Rossum ，Python语言创立者<br>2002年，Python 2.x<br>2008年，Python 3.x</p>
<h1 id="“温度转换”实例"><a href="#“温度转换”实例" class="headerlink" title="“温度转换”实例"></a>“温度转换”实例</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>两种温度体系的转换</p>
<ul>
<li>摄氏度转换为华氏度</li>
<li>华氏度转换为摄氏度</li>
</ul>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>设计算法<br>根据华氏和摄氏温度定义，利用转换公式如下：<br>C = ( F – 32 ) / 1.8<br>F = C * 1.8 + 32<br>其中， C表示摄氏温度， F表示华氏温度</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#TempConvert.py</span></span><br><span class="line">TempStr = <span class="built_in">input</span>(<span class="string">&quot;请输入带有符号的温度值: &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> TempStr[-<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]:</span><br><span class="line">    C = (<span class="built_in">eval</span>(TempStr[<span class="number">0</span>:-<span class="number">1</span>]) - <span class="number">32</span>)/<span class="number">1.8</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;转换后的温度是&#123;:.2f&#125;C&quot;</span>.<span class="built_in">format</span>(C))</span><br><span class="line"><span class="keyword">elif</span> TempStr[-<span class="number">1</span>] <span class="keyword">in</span> [<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]:</span><br><span class="line">    F = <span class="number">1.8</span>*<span class="built_in">eval</span>(TempStr[<span class="number">0</span>:-<span class="number">1</span>]) + <span class="number">32</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;转换后的温度是&#123;:.2f&#125;F&quot;</span>.<span class="built_in">format</span>(F))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入格式错误&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="语法元素"><a href="#语法元素" class="headerlink" title="语法元素"></a>语法元素</h1><h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><p>缩进表达程序的格式框架</p>
<ul>
<li>严格明确：缩进是语法的一部分，缩进不正确程序运行错误</li>
<li>所属关系：表达代码间包含和层次关系的唯一手段</li>
<li>长度一致：程序内一致即可，一般用4个空格或1个TAB</li>
</ul>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>不被程序执行的辅助性说明信息</p>
<ul>
<li>单行注释：以#开头，其后内容为注释<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里是单行注释</span></span><br></pre></td></tr></table></figure></li>
<li>多行注释：以’’’开头和结尾</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27; 这是多行注释第一行</span></span><br><span class="line"><span class="string">这是多行注释第二行 &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h2><p>被编程语言内部定义并保留使用的标识符</p>
<ul>
<li>Python语言有35个保留字(也叫关键字)<br>if, elif, else, in</li>
<li>保留字是编程语言的基本单词，大小写敏感<br>if 是保留字，If 是变量</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th>保留字</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>and</td>
<td>elif</td>
<td>import</td>
<td>raise</td>
<td>global</td>
</tr>
<tr>
<td>as</td>
<td>else</td>
<td>in</td>
<td>return</td>
<td>nonlocal</td>
</tr>
<tr>
<td>assert</td>
<td>except</td>
<td>is</td>
<td>try</td>
<td>True</td>
</tr>
<tr>
<td>break</td>
<td>finally</td>
<td>lambda</td>
<td>while</td>
<td>False</td>
</tr>
<tr>
<td>class</td>
<td>for</td>
<td>not</td>
<td>with</td>
<td>None</td>
</tr>
<tr>
<td>continue</td>
<td>from</td>
<td>or</td>
<td>yield</td>
<td>async</td>
</tr>
<tr>
<td>def</td>
<td>if</td>
<td>pass</td>
<td>del</td>
<td>await</td>
</tr>
</tbody></table>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>数据类型：字符串、整数、浮点数、列表</p>
<h1 id="语句与函数"><a href="#语句与函数" class="headerlink" title="语句与函数"></a>语句与函数</h1><p>赋值语句：由赋值符号构成的一行代码<br>分支语句：由判断条件决定程序运行方向的语句<br>函数：根据输入参数产生不同输出的功能过程</p>
<h2 id="输入函数-input"><a href="#输入函数-input" class="headerlink" title="输入函数 input()"></a>输入函数 input()</h2><p>从控制台获得用户输入的函数</p>
<h2 id="输出函数-print"><a href="#输出函数-print" class="headerlink" title="输出函数 print()"></a>输出函数 print()</h2><p>以字符形式向控制台输出结果的函数</p>
<h2 id="评估函数-eval"><a href="#评估函数-eval" class="headerlink" title="评估函数 eval()"></a>评估函数 eval()</h2><p>去掉参数最外侧引号并执行余下语句的函数</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>嵩天老师Python(2)基本图形绘制</title>
    <url>/2019/04/15/%E5%B5%A9%E5%A4%A9%E8%80%81%E5%B8%88Python(2)%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/</url>
    <content><![CDATA[<h1 id="深入理解Python语言"><a href="#深入理解Python语言" class="headerlink" title="深入理解Python语言"></a>深入理解Python语言</h1><ul>
<li>Python语言是通用语言</li>
<li>Python语言是脚本语言</li>
<li>Python语言是开源语言</li>
<li>Python语言是跨平台语言</li>
<li>Python语言是多模型语言</li>
</ul>
<span id="more"></span>

<h1 id="实例-Python蟒蛇绘制"><a href="#实例-Python蟒蛇绘制" class="headerlink" title="实例: Python蟒蛇绘制"></a>实例: Python蟒蛇绘制</h1><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><ul>
<li>用程序绘制一条蟒蛇</li>
<li>设计蟒蛇的基本形状</li>
</ul>
<h2 id="实例编写"><a href="#实例编写" class="headerlink" title="实例编写"></a>实例编写</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#PythonDraw.py</span></span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.setup(<span class="number">650</span>, <span class="number">350</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.fd(-<span class="number">250</span>)</span><br><span class="line">turtle.pendown()</span><br><span class="line">turtle.pensize(<span class="number">25</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&quot;purple&quot;</span>)</span><br><span class="line">turtle.seth(-<span class="number">40</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    turtle.circle(<span class="number">40</span>, <span class="number">80</span>)</span><br><span class="line">    turtle.circle(-<span class="number">40</span>, <span class="number">80</span>)</span><br><span class="line">turtle.circle(<span class="number">40</span>, <span class="number">80</span>/<span class="number">2</span>)</span><br><span class="line">turtle.fd(<span class="number">40</span>)</span><br><span class="line">turtle.circle(<span class="number">16</span>, <span class="number">180</span>)</span><br><span class="line">turtle.fd(<span class="number">40</span> * <span class="number">2</span>/<span class="number">3</span>)</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure>

<h2 id="图片展示"><a href="#图片展示" class="headerlink" title="图片展示"></a>图片展示</h2><p><img src="/2019/04/15/%E5%B5%A9%E5%A4%A9%E8%80%81%E5%B8%88Python(2)%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/Pythondraw.jpg"></p>
<h2 id="举一反三"><a href="#举一反三" class="headerlink" title="举一反三"></a>举一反三</h2><ul>
<li>程序参数的改变<ul>
<li>Python蟒蛇的颜色：黑色、白色、七彩色…</li>
<li>Python蟒蛇的长度：1节、3节、10节…</li>
<li>Python蟒蛇的方向：向左走、斜着走…</li>
</ul>
</li>
<li>计算问题的扩展<ul>
<li>Python蟒蛇绘制问题是各类图像绘制问题的代表</li>
<li>圆形绘制、五角星绘制、国旗绘制、机器猫绘制…</li>
<li>掌握绘制一条线的方法，就可以绘制整个世界</li>
</ul>
</li>
</ul>
<h1 id="turtle库的使用"><a href="#turtle库的使用" class="headerlink" title="turtle库的使用"></a>turtle库的使用</h1><h2 id="turtle库基本介绍"><a href="#turtle库基本介绍" class="headerlink" title="turtle库基本介绍"></a>turtle库基本介绍</h2><p>turtle(海龟)库是turtle绘图体系的Python实现</p>
<ul>
<li>turtle绘图体系：1969年诞生，主要用于程序设计入门</li>
<li>Python语言的标准库之一</li>
<li>入门级的图形绘制函数库</li>
</ul>
<h3 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h3><p>Python计算生态 = 标准库 + 第三方库</p>
<ul>
<li>标准库：随解释器直接安装到操作系统中的功能模块</li>
<li>第三方库：需要经过安装才能使用的功能模块</li>
<li>库Library、包Package、模块Module，统称<strong>模块</strong></li>
</ul>
<h3 id="turtle的原理"><a href="#turtle的原理" class="headerlink" title="turtle的原理"></a>turtle的原理</h3><p>turtle(海龟)是一种真实的存在</p>
<ul>
<li>有一只海龟，其实在窗体正中心，在画布上游走</li>
<li>走过的轨迹形成了绘制的图形</li>
<li>海龟由程序控制，可以变换颜色、改变宽度等</li>
</ul>
<h2 id="turtle绘图窗体"><a href="#turtle绘图窗体" class="headerlink" title="turtle绘图窗体"></a>turtle绘图窗体</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">turtle.setup(width, height, startx, starty)</span><br></pre></td></tr></table></figure>
<ul>
<li>setup()设置窗体大小及位置</li>
<li>4个参数中后两个可选</li>
<li>setup()不是必须的</li>
</ul>
<h2 id="RGB色彩模式"><a href="#RGB色彩模式" class="headerlink" title="RGB色彩模式"></a>RGB色彩模式</h2><ul>
<li>RGB指红蓝绿三个通道的颜色组合</li>
<li>覆盖视力所能感知的所有颜色</li>
<li>RGB每色取值范围0-255整数或0-1小数</li>
</ul>
<p>常用RGB色彩<br>| 英文名称 | RGB整数值     | RGB小数值        | 中文名称 |<br>| ——– | ————- | —————- | ——– |<br>| white    | 255, 255, 255 | 1, 1, 1          | 白色     |<br>| yellow   | 255, 255, 0   | 1, 1, 0          | 黄色     |<br>| magenta  | 255, 0, 255   | 1, 0, 1          | 洋红     |<br>| cyan     | 0, 255, 255   | 0, 1, 1          | 青色     |<br>| blue     | 0, 0, 255     | 0, 0, 1          | 蓝色     |<br>| black    | 0, 0, 0       | 0, 0, 0          | 黑色     |<br>| seashell | 255, 245, 238 | 1, 0.96, 0.93    | 海贝色   |<br>| gold     | 255, 215, 0   | 1, 0.84, 0       | 金色     |<br>| pink     | 255, 192, 203 | 1, 0.75, 0.80    | 粉红色   |<br>| brown    | 165, 42, 42   | 0.65, 0.16, 0.16 | 棕色     |<br>| purple   | 160, 32, 240  | 0.63, 0.13, 0.94 | 紫色     |<br>| tomato   | 255, 99, 71   | 1, 0.39, 0.28    | 番茄色   |</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">turtle.colormode(mode)</span><br></pre></td></tr></table></figure>

<h1 id="turtle程序语法元素分析"><a href="#turtle程序语法元素分析" class="headerlink" title="turtle程序语法元素分析"></a>turtle程序语法元素分析</h1><h2 id="库引用与import"><a href="#库引用与import" class="headerlink" title="库引用与import"></a>库引用与import</h2><h3 id="库引用"><a href="#库引用" class="headerlink" title="库引用"></a>库引用</h3><p>扩充Python程序功能的方式,使用import保留字完成，采用<a>.<b>()编码风格</b></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &lt;库名&gt; </span><br><span class="line">&lt;库名&gt;.&lt;函数名&gt;(&lt;函数参数&gt;)</span><br></pre></td></tr></table></figure>
<h3 id="import更多用法"><a href="#import更多用法" class="headerlink" title="import更多用法"></a>import更多用法</h3><ol>
<li>使用from和import保留字共同完成</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> &lt;库名&gt; <span class="keyword">import</span> &lt;函数名&gt; </span><br><span class="line"><span class="keyword">from</span> &lt;库名&gt; <span class="keyword">import</span> *</span><br><span class="line">&lt;函数名&gt;(&lt;函数参数&gt;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用import和as保留字共同完成</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &lt;库名&gt; <span class="keyword">as</span> &lt;库别名&gt; </span><br><span class="line">&lt;库别名&gt;.&lt;函数名&gt;(&lt;函数参数&gt;)</span><br></pre></td></tr></table></figure>

<h2 id="turtle画笔控制函数"><a href="#turtle画笔控制函数" class="headerlink" title="turtle画笔控制函数"></a>turtle画笔控制函数</h2><ul>
<li><code>turtle.penup()</code> 别名 <code>turtle.pu()</code><br>抬起画笔，海龟在飞行</li>
<li><code>turtle.pendown()</code> 别名 <code>turtle.pd()</code><br>落下画笔，海龟在爬行</li>
<li><code>turtle.pensize(width)</code> 别名 <code>turtle.width(width)</code><br>画笔宽度，海龟的腰围</li>
<li><code>turtle.pencolor(color)</code> color为颜色字符串或r,g,b值<br>画笔颜色，海龟在涂装<ul>
<li>颜色字符串 ：<code>turtle.pencolor(&quot;purple&quot;)</code></li>
<li>RGB的小数值：<code>turtle.pencolor(0.63, 0.13, 0.94)</code></li>
<li>RGB的元组值：<code>turtle.pencolor((0.63,0.13,0.94))</code></li>
</ul>
</li>
</ul>
<h2 id="turtle运动控制函数"><a href="#turtle运动控制函数" class="headerlink" title="turtle运动控制函数"></a>turtle运动控制函数</h2><ul>
<li><code>turtle.forward(d)</code> 别名 <code>turtle.fd(d)</code><br>向前行进，海龟走直线</li>
<li>d: 行进距离，可以为负数</li>
<li><code>turtle.circle(r, extent=None)</code><br>根据半径r绘制extent角度的弧形</li>
<li>r: 默认圆心在海龟左侧r距离的位置</li>
<li>extent: 绘制角度，默认是360度整圆</li>
</ul>
<h2 id="turtle方向控制函数"><a href="#turtle方向控制函数" class="headerlink" title="turtle方向控制函数"></a>turtle方向控制函数</h2><ul>
<li><code>turtle.setheading(angle)</code> 别名 <code>turtle.seth(angle)</code><br>改变行进方向，海龟走角度</li>
<li>angle: 行进方向的绝对角度</li>
<li><code>turtle.left(angle)</code> 海龟向左转</li>
<li><code>turtle.right(angle)</code> 海龟向右转</li>
<li>angle: 在海龟当前行进方向上旋转的角度</li>
</ul>
<h2 id="循环语句与range-函数"><a href="#循环语句与range-函数" class="headerlink" title="循环语句与range()函数"></a>循环语句与range()函数</h2><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>按照一定次数循环执行一组语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;变量&gt; <span class="keyword">in</span> <span class="built_in">range</span>(&lt;次数&gt;):</span><br><span class="line">    &lt;被循环执行的语句&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;变量&gt;表示每次循环的计数，0到&lt;次数&gt;-1</span></span><br></pre></td></tr></table></figure>

<h3 id="range-函数"><a href="#range-函数" class="headerlink" title="range()函数"></a>range()函数</h3><p>产生循环计数序列</p>
<ul>
<li><code>range(N)</code><br>产生 0 到 N-1的整数序列，共N个</li>
<li><code>range(M,N)</code><br>产生 M 到 N-1的整数序列，共N-M个</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>嵩天老师Python(7)文件和数据格式化</title>
    <url>/2019/04/04/%E5%B5%A9%E5%A4%A9%E8%80%81%E5%B8%88Python(7)%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    <content><![CDATA[<h1 id="文件的使用"><a href="#文件的使用" class="headerlink" title="文件的使用"></a>文件的使用</h1><h2 id="文件的类型"><a href="#文件的类型" class="headerlink" title="文件的类型"></a>文件的类型</h2><h3 id="文件的理解"><a href="#文件的理解" class="headerlink" title="文件的理解"></a>文件的理解</h3><p>文件是数据的抽象和集合</p>
<ul>
<li>文件是存储在辅助存储器上的数据序列</li>
<li>文件是数据存储的一种形式</li>
<li>文件展现形态：文本文件和二进制文件</li>
</ul>
<span id="more"></span>

<p>文本文件 vs 二进制文件</p>
<ul>
<li>文本文件和二进制文件只是文件的展示方式</li>
<li>本质上，所有文件都是二进制形式存储</li>
<li>形式上，所有文件采用两种方式展示</li>
</ul>
<p>文本文件</p>
<ul>
<li>由<strong>单一特定编码</strong>组成的文件，如UTF-8编码</li>
<li>由于存在编码，也被看成是存储着的长字符串</li>
<li>适用于例如：.txt文件、.py文件</li>
</ul>
<p>二进制文件</p>
<ul>
<li>直接由比特0和1组成，<strong>没有统一字符编码</strong></li>
<li>一般存在二进制0和1的组织结构，即文件格式</li>
<li>适用于例如：.png文件、.avi文件等</li>
</ul>
<h2 id="文件的打开和关闭"><a href="#文件的打开和关闭" class="headerlink" title="文件的打开和关闭"></a>文件的打开和关闭</h2><p>文件处理的步骤：打开-操作-关闭</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">文件的存储状态-&gt;&gt;文件的占用状态: a = open( , )</span><br><span class="line">文件的占用状态-&gt;&gt;文件的存储状态: a.close()</span><br></pre></td></tr></table></figure>

<p>文件打开以后就可以对文件进行读写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//读文件函数</span><br><span class="line">a.read(size)</span><br><span class="line">a.readline(size)</span><br><span class="line">a.readlines(hint)</span><br><span class="line"></span><br><span class="line">//写文件函数</span><br><span class="line">a.write(s)</span><br><span class="line">a.writelines(lines)</span><br><span class="line">a.seek(offset)</span><br></pre></td></tr></table></figure>
<p>文件路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;变量名&gt; = <span class="built_in">open</span>(&lt;文件名&gt;, &lt;打开模式&gt;)</span><br></pre></td></tr></table></figure>
<p>打开模式</p>
<table>
<thead>
<tr>
<th>文件的打开模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>‘r’</td>
<td>只读模式，默认值，如果文件不存在，返回FileNotFoundError</td>
</tr>
<tr>
<td>‘w’</td>
<td>覆盖写模式，文件不存在则创建，存在则完全覆盖</td>
</tr>
<tr>
<td>‘x’</td>
<td>创建写模式，文件不存在则创建，存在则返回FileExistsError</td>
</tr>
<tr>
<td>‘a’</td>
<td>追加写模式，文件不存在则创建，存在则在文件最后追加内容</td>
</tr>
<tr>
<td>‘b’</td>
<td>二进制文件模式</td>
</tr>
<tr>
<td>‘t’</td>
<td>文本文件模式，默认值</td>
</tr>
<tr>
<td>‘+’</td>
<td>与r/w/x/a一同使用，在原功能基础上增加同时读写功能</td>
</tr>
</tbody></table>
<p>文件的关闭</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;文件名&gt;.close()</span><br></pre></td></tr></table></figure>

<h2 id="文件内容的读取"><a href="#文件内容的读取" class="headerlink" title="文件内容的读取"></a>文件内容的读取</h2><table>
<thead>
<tr>
<th>操作方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><f>.read(size=-1)</f></td>
<td>读入全部内容，如果给出参数，读入前size长度</td>
</tr>
<tr>
<td><f>.readline(size=-1)</f></td>
<td>读入全部内容，如果给出参数，读入该行前size长度</td>
</tr>
<tr>
<td><f>.readlines(hint=-1)</f></td>
<td>读入文件所有行，以每行为元素形成列表，如果给出参数，读入前hint行</td>
</tr>
</tbody></table>
<p>文件的全文本操作</p>
<ul>
<li><p>遍历全文本：方法一</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fname = <span class="built_in">input</span>(<span class="string">&quot;请输入要打开的文件名称：&quot;</span>)</span><br><span class="line">fo = <span class="built_in">open</span>(fname,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">txt = fo.read()</span><br><span class="line"><span class="comment">#对全文txt进行处理</span></span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure></li>
<li><p>遍历全文本：方法二</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fname = <span class="built_in">input</span>(<span class="string">&quot;请输入要打开的文件名称：&quot;</span>)</span><br><span class="line">fo = <span class="built_in">open</span>(fname,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">txt = fo.read(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">while</span> txt != <span class="string">&quot;&quot;</span>:</span><br><span class="line">    <span class="comment">#对txt进行处理</span></span><br><span class="line">    txt = fo.read(<span class="number">2</span>)</span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure></li>
</ul>
<p>文件的逐行操作</p>
<ul>
<li><p>逐行遍历文件：方法一</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fname = <span class="built_in">input</span>(<span class="string">&quot;请输入要打开的文件名称：&quot;</span>)</span><br><span class="line">fo = <span class="built_in">open</span>(fname,<span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo.readlines():</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure></li>
<li><p>逐行遍历文件：方法二</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fname = <span class="built_in">input</span>(<span class="string">&quot;请输入要打开的文件名称：&quot;</span>)</span><br><span class="line">fo = <span class="built_in">open</span>(fname,<span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="数据的文件写入"><a href="#数据的文件写入" class="headerlink" title="数据的文件写入"></a>数据的文件写入</h2><table>
<thead>
<tr>
<th>操作方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><f>.write(s)</f></td>
<td>向文件写入一个字符串或字节流</td>
</tr>
<tr>
<td><f>.writelines(lines)</f></td>
<td>将一个元素全为字符串的列表写入文件</td>
</tr>
<tr>
<td><f>.seek(offset)</f></td>
<td>改变当前文件操作指针的位置，offset含义如下：0-文件开头，1-当前位置，2-文件结尾</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w+&quot;</span>)</span><br><span class="line">ls = [<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;法国&quot;</span>,<span class="string">&quot;美国&quot;</span>]</span><br><span class="line">fo.writelines(ls)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">      <span class="built_in">print</span>(line)</span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure>
<p>此时控制台没有任何输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w+&quot;</span>)</span><br><span class="line">ls = [<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;法国&quot;</span>,<span class="string">&quot;美国&quot;</span>]</span><br><span class="line">fo.writelines(ls)</span><br><span class="line">fo.seek(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">      <span class="built_in">print</span>(line)</span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure>
<p>此时输出“中国法国美国”</p>
<h1 id="实例：自动轨迹绘制"><a href="#实例：自动轨迹绘制" class="headerlink" title="实例：自动轨迹绘制"></a>实例：自动轨迹绘制</h1><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><ul>
<li>需求：根据脚本来绘制图形</li>
<li>不是写代码而是数据绘制图形</li>
<li>数据脚本是自动化最重要的第一步</li>
</ul>
<h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><ul>
<li>步骤1：定义数据文件格式（接口）</li>
<li>步骤2：编写程序，根据文件接口解析参数绘制图形</li>
<li>步骤3：编制数据文件</li>
</ul>
<h2 id="编写程序"><a href="#编写程序" class="headerlink" title="编写程序"></a>编写程序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#AutoTraceDraw.py</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line">t.title(<span class="string">&#x27;自动轨迹绘制&#x27;</span>)</span><br><span class="line">t.setup(<span class="number">800</span>,<span class="number">600</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">t.pencolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">t.pensize(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据读取</span></span><br><span class="line">datals = []</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">      line = line.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">      datals.append(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">eval</span>, line.split(<span class="string">&quot;,&quot;</span>))))</span><br><span class="line"></span><br><span class="line"><span class="comment">#自动绘制</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(datals)):</span><br><span class="line">      t.pencolor(datals[i][<span class="number">3</span>],datals[i][<span class="number">4</span>],datals[i][<span class="number">5</span>])</span><br><span class="line">      t.fd(datals[i][<span class="number">0</span>])</span><br><span class="line">      <span class="keyword">if</span> datals[i][<span class="number">1</span>]:</span><br><span class="line">            t.right(datals[i][<span class="number">2</span>])</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">            t.left(datals[i][<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<h2 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h2><p>data.txt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">300,0,144,1,0,0</span><br><span class="line">300,0,144,0,1,0</span><br><span class="line">300,0,144,0,0,1</span><br><span class="line">300,0,144,1,1,0</span><br><span class="line">300,0,108,0,1,1</span><br><span class="line">184,0,72,1,0,1</span><br><span class="line">184,0,72,0,0,0</span><br><span class="line">184,0,72,0,0,0</span><br><span class="line">184,0,72,0,0,0</span><br><span class="line">184,1,72,1,0,1</span><br><span class="line">184,1,72,0,0,0</span><br><span class="line">184,1,72,0,0,0</span><br><span class="line">184,1,72,0,0,0</span><br><span class="line">184,1,72,0,0,0</span><br><span class="line">184,1,720,0,0,0</span><br></pre></td></tr></table></figure>

<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="/2019/04/04/%E5%B5%A9%E5%A4%A9%E8%80%81%E5%B8%88Python(7)%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%8C%96/%E8%87%AA%E5%8A%A8%E8%BD%A8%E8%BF%B9%E7%BB%98%E5%88%B6.jpg"></p>
<h1 id="一维数据的格式化和处理"><a href="#一维数据的格式化和处理" class="headerlink" title="一维数据的格式化和处理"></a>一维数据的格式化和处理</h1><h2 id="数据组织的维度"><a href="#数据组织的维度" class="headerlink" title="数据组织的维度"></a>数据组织的维度</h2><p>从一个数据到一组数据：一个数据表达一个含义，一组数据表达一个或多个含义</p>
<ul>
<li>一维数据：由对等关系的有序或无序数据构成，采用线性方式组织，对应列表、数组、集合等概念。</li>
<li>二维数据：由多个一维数据构成，是一维数据的组合形式。表格是典型的二维数据。</li>
<li>多维数据：由一维或二维数据在新的维度上扩展形成</li>
<li>高维数据：键值对</li>
</ul>
<p>数据的操作周期：存储&lt;-&gt;表示&lt;-&gt;操作</p>
<h2 id="一维数据的表示"><a href="#一维数据的表示" class="headerlink" title="一维数据的表示"></a>一维数据的表示</h2><p>如果数据间有序：使用列表类型</p>
<ul>
<li>列表类型可以表达一维有序数据</li>
<li>for循环可以遍历数据，进而对每个数据进行处理</li>
</ul>
<p>如果数据间无序：使用集合类型</p>
<ul>
<li>集合类型可以表达一维无需数据</li>
<li>for循环可以遍历数据，进而对每个数据进行处理</li>
</ul>
<h2 id="一维数据的存储"><a href="#一维数据的存储" class="headerlink" title="一维数据的存储"></a>一维数据的存储</h2><ol>
<li>存储方式一：空格分隔</li>
</ol>
<ul>
<li>使用一个或多个空格分隔进行存储，不换行</li>
<li>缺点：数据中不能存在空格</li>
</ul>
<ol start="2">
<li>存储方式二：逗号分隔</li>
</ol>
<ul>
<li>使用英文半角逗号分隔数据进行存储，不换行</li>
<li>缺点：数据中不能有英文逗号</li>
</ul>
<ol start="3">
<li>存储方式三：其他方式</li>
</ol>
<ul>
<li>使用其他符号或符号组合分隔，建议采用特殊符号</li>
<li>缺点：需要根据数据特点定义，通用性较差</li>
</ul>
<h2 id="一维数据的处理"><a href="#一维数据的处理" class="headerlink" title="一维数据的处理"></a>一维数据的处理</h2><p>从空格分割的文件中<strong>读入</strong>数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">txt = <span class="built_in">open</span>(fname).read()</span><br><span class="line">ls = txt.split()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<p>从特殊符号分割的文件中<strong>读入</strong>数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">txt = <span class="built_in">open</span>(fname).read()</span><br><span class="line">ls = txt.split(<span class="string">&quot;$&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<p>采用空格分隔方式将数据写入文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls = [<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;美国&quot;</span>,<span class="string">&quot;日本&quot;</span>]</span><br><span class="line">f = <span class="built_in">open</span>(fname,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&#x27; &#x27;</span>.join(ls))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<h1 id="二维数据的格式化和处理"><a href="#二维数据的格式化和处理" class="headerlink" title="二维数据的格式化和处理"></a>二维数据的格式化和处理</h1><h2 id="二维数据的表示"><a href="#二维数据的表示" class="headerlink" title="二维数据的表示"></a>二维数据的表示</h2><p>使用列表类型（二维列表）</p>
<ul>
<li>使用两层for循环遍历每个元素</li>
<li>外层列表中每个元素可以对应一行，也可以对应一列</li>
</ul>
<h2 id="CSV格式与二维数据的存储"><a href="#CSV格式与二维数据的存储" class="headerlink" title="CSV格式与二维数据的存储"></a>CSV格式与二维数据的存储</h2><p>CSV：Comma-Separated Values</p>
<ul>
<li>国际通用的一二维数据存储格式，一般.csv扩展名</li>
<li>每行一个一维数据，采用逗号分隔，无空行</li>
<li>Excel可读入输出，一般编辑软件都可以产生</li>
<li>如果某个元素确缺失，逗号仍要保留</li>
<li>二维数据的表头可以作为数据存储，也可以另行存储</li>
</ul>
<p>二维数据的存储</p>
<ul>
<li>按行存或按列存都可以，具体由程序决定</li>
<li>一般索引习惯：<code>ls[row][column]</code>，先行后列</li>
<li>根据一般习惯，外层列表每个元素是一行，按行存</li>
</ul>
<h2 id="二维数据的处理"><a href="#二维数据的处理" class="headerlink" title="二维数据的处理"></a>二维数据的处理</h2><p>从CSV文件中读入数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fo = <span class="built_in">open</span>(fname)</span><br><span class="line">ls =[]</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo:</span><br><span class="line">    line = line.replace(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    ls.append(line.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure>

<p>将数据写入CSV文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls = [[],[],[]]  <span class="comment">#二维列表</span></span><br><span class="line">f.<span class="built_in">open</span>(fname,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ls:</span><br><span class="line">    f.write(<span class="string">&#x27;,&#x27;</span>.join(item) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<p>二维数据的逐一处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls = [[],[],[]]  <span class="comment">#二维列表</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> ls:</span><br><span class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> row:</span><br><span class="line">        <span class="built_in">print</span>(ls[row][column])</span><br></pre></td></tr></table></figure>

<h1 id="wordcloud库的使用"><a href="#wordcloud库的使用" class="headerlink" title="wordcloud库的使用"></a>wordcloud库的使用</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>wordcloud是优秀的词云展示的第三方库，词云以词语为基本单位，更加直观和艺术的展示文本。</p>
<ul>
<li>安装命令<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install wordcloud</span><br></pre></td></tr></table></figure>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2>wordcloud库把词云当作一个WordCloud对象</li>
<li>wordcloud.WordCloud()代表一个文本对应的词云</li>
<li>可以根据文本中词语出现的频率等参数绘制词云</li>
<li>词云的形状、尺寸和颜色都可以设定</li>
</ul>
<p>wordcloud库常规方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">w = wordcloud.WordCloud()</span><br></pre></td></tr></table></figure>
<ul>
<li>以WordCloud对象为基础</li>
<li>配置参数、加载文本、输出文件</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>w.generate(txt)</td>
<td>向WordCloud对象w中加载文本txt，<code>w.generate(&quot;python and wordcloud&quot;)</code></td>
</tr>
<tr>
<td>w.to_file(filename)</td>
<td>将词云输出成图像文件，.png或.jpg格式，<code>w.to_file(&quot;outfile.png&quot;)</code></td>
</tr>
</tbody></table>
<ul>
<li>步骤1：配置对象参数</li>
<li>步骤2：加载词云文本</li>
<li>步骤3：输出词云文件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wordcloud</span><br><span class="line">c = wordcloud.WordCloud()</span><br><span class="line">c.generate(<span class="string">&quot;wordcloud by python&quot;</span>)</span><br><span class="line">c.to_file(<span class="string">&quot;pywordcloud.png&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>从文本到图片，wordcloud做了哪些事情呢？</p>
<ol>
<li>分隔：以空格分隔单词</li>
<li>统计：单词出现次数并过滤</li>
<li>字体：根据统计配置字号</li>
<li>布局：颜色环境尺寸</li>
</ol>
<p>wordcloud配置对象参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w = wordcloud.WordCloud(&lt;参数&gt;)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>width</td>
<td>指定词云对象生成图片的宽度，默认400像素</td>
</tr>
<tr>
<td>height</td>
<td>指定词云对象生成图片的高度，默认200像素</td>
</tr>
<tr>
<td>min_font_size</td>
<td>指定词云中字体的最小字号，默认4号</td>
</tr>
<tr>
<td>max_font_size</td>
<td>指定词云中字体的最大字号，根据高度自动调节</td>
</tr>
<tr>
<td>font_step</td>
<td>指定词云中字体字号的不进间隔，默认为1</td>
</tr>
<tr>
<td>font_path</td>
<td>指定字体文件的路径，默认None</td>
</tr>
<tr>
<td>max_words</td>
<td>指定词云显示的最大单词数量，默认为200</td>
</tr>
<tr>
<td>stop_words</td>
<td>指定词云的排除词列表，即不显示的单词列表</td>
</tr>
<tr>
<td>mask</td>
<td>指定词云形状，默认为长方形，需要引用imread()函数</td>
</tr>
<tr>
<td>background_color</td>
<td>指定词云图片的背景颜色，默认为黑色</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定词云形状，默认为长方形，需要引用imread()函数</span></span><br><span class="line"><span class="keyword">from</span> scipy.misc <span class="keyword">import</span> imread </span><br><span class="line">mk = imread(<span class="string">&quot;pic.png&quot;</span>)</span><br><span class="line">w = wordcloud.WordCloud(mask = mk)</span><br></pre></td></tr></table></figure>

<p>两个小demo</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wordcloud</span><br><span class="line">txt = <span class="string">&quot;life is short, you need python&quot;</span></span><br><span class="line">w = wordcloud.WordCloud( \</span><br><span class="line">	background_color = <span class="string">&quot;white&quot;</span>)</span><br><span class="line">w.generate(txt)</span><br><span class="line">w.to_file(<span class="string">&quot;d:/pywordcloud.png&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2019/04/04/%E5%B5%A9%E5%A4%A9%E8%80%81%E5%B8%88Python(7)%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%8C%96/pywordcloud.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> wordcloud</span><br><span class="line">txt = <span class="string">&quot;程序设计语言是计算机能够理解和\</span></span><br><span class="line"><span class="string">识别用户操作意图的一种交互体系,它按照\</span></span><br><span class="line"><span class="string">特定规则组织计算机指令,使计算机能够自\</span></span><br><span class="line"><span class="string">动进行各种运算处理。&quot;</span></span><br><span class="line">w = wordcloud.WordCloud( width = <span class="number">1000</span>, \</span><br><span class="line">    font_path = <span class="string">&quot;msyh.ttc&quot;</span>, height = <span class="number">700</span>)</span><br><span class="line">w.generate(<span class="string">&quot; &quot;</span>.join(jieba.lcut(txt)))</span><br><span class="line">w.to_file(<span class="string">&quot;d:/zhongwenciyun.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2019/04/04/%E5%B5%A9%E5%A4%A9%E8%80%81%E5%B8%88Python(7)%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%8C%96/zhongwenciyun.jpg"></p>
<h1 id="实例：政府工作报告词云"><a href="#实例：政府工作报告词云" class="headerlink" title="实例：政府工作报告词云"></a>实例：政府工作报告词云</h1><h2 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h2><p>直观理解政策文件</p>
<ul>
<li>需求：对于政府工作报告等政策文件，如何直观理解？</li>
<li>体会直观的价值：生成词云 &amp; 优化词云</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">政府工作报告等文件 --&gt; 有效展示的词云</span><br></pre></td></tr></table></figure>

<h2 id="基本思路和代码实现"><a href="#基本思路和代码实现" class="headerlink" title="基本思路和代码实现"></a>基本思路和代码实现</h2><ul>
<li>步骤1：读取文件，分词整理</li>
<li>步骤2：设置并输出词云</li>
<li>步骤3：观察结果，优化迭代</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#GovRpWordCloudv1.py</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> wordcloud</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;关于实施乡村振兴战略的意见.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="comment">#f = open(&quot;新时代中国特色社会主义.txt&quot;,&quot;r&quot;,encoding=&quot;utf-8&quot;)</span></span><br><span class="line">t = f.read()</span><br><span class="line">f.close()</span><br><span class="line">ls = jieba.lcut(t)</span><br><span class="line">txt = <span class="string">&quot; &quot;</span>.join(ls)</span><br><span class="line"><span class="comment">#w = wordcloud.WordCloud(max_words = 15,font_path = &quot;msyh.ttc&quot;,width = 1000,height = 700,background_color = &quot;white&quot;)</span></span><br><span class="line">w = wordcloud.WordCloud(font_path = <span class="string">&quot;msyh.ttc&quot;</span>,width = <span class="number">1000</span>,height = <span class="number">700</span>,background_color = <span class="string">&quot;white&quot;</span>)</span><br><span class="line">w.generate(txt)</span><br><span class="line">w.to_file(<span class="string">&quot;GovRpWordCloudv1.png&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>运行程序后，两个报告的词云如下：</p>
<p><img src="/2019/04/04/%E5%B5%A9%E5%A4%A9%E8%80%81%E5%B8%88Python(7)%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%8C%96/GovRpWordCloudv1%E4%B8%AD%E7%89%B9.png" alt="image"></p>
<p><img src="/2019/04/04/%E5%B5%A9%E5%A4%A9%E8%80%81%E5%B8%88Python(7)%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%8C%96/GovRpWordCloudv1%E5%86%9C%E6%9D%91.png" alt="image"></p>
<p>增加参数<code>max_words=15</code>，结果如下：</p>
<p><img src="/2019/04/04/%E5%B5%A9%E5%A4%A9%E8%80%81%E5%B8%88Python(7)%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%8C%96/GovRpWordCloudv1%E4%B8%AD%E7%89%B915.png" alt="image"></p>
<p><img src="/2019/04/04/%E5%B5%A9%E5%A4%A9%E8%80%81%E5%B8%88Python(7)%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%8C%96/GovRpWordCloudv1%E5%86%9C%E6%9D%9115.png" alt="image"></p>
<p>增加形状<code>mask = mask</code>，词云图更加漂亮：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#GovRpWordCloudv1.py</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> wordcloud</span><br><span class="line"><span class="keyword">from</span> scipy.misc <span class="keyword">import</span> imread</span><br><span class="line">mask = imread(<span class="string">&quot;chinamap.jpg&quot;</span>)</span><br><span class="line"><span class="comment">#mask = imread(&quot;fivestars.png&quot;)</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;关于实施乡村振兴战略的意见.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="comment">#f = open(&quot;新时代中国特色社会主义.txt&quot;,&quot;r&quot;,encoding=&quot;utf-8&quot;)</span></span><br><span class="line">t = f.read()</span><br><span class="line">f.close()</span><br><span class="line">ls = jieba.lcut(t)</span><br><span class="line">txt = <span class="string">&quot; &quot;</span>.join(ls)</span><br><span class="line">w = wordcloud.WordCloud(mask = mask,font_path = <span class="string">&quot;msyh.ttc&quot;</span>,width = <span class="number">1000</span>,height = <span class="number">700</span>,background_color = <span class="string">&quot;white&quot;</span>)</span><br><span class="line">w.generate(txt)</span><br><span class="line">w.to_file(<span class="string">&quot;GovRpWordCloudv1.png&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>结果展示：<br><img src="/2019/04/04/%E5%B5%A9%E5%A4%A9%E8%80%81%E5%B8%88Python(7)%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%8C%96/GovRpWordCloudv1%E4%B8%AD%E7%89%B9%E4%BA%94%E6%98%9F.png" alt="image"></p>
<p><img src="/2019/04/04/%E5%B5%A9%E5%A4%A9%E8%80%81%E5%B8%88Python(7)%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%8C%96/GovRpWordCloudv1%E5%86%9C%E6%9D%91%E5%9C%B0%E5%9B%BE.png" alt="image"></p>
<h2 id="扩展能力"><a href="#扩展能力" class="headerlink" title="扩展能力"></a>扩展能力</h2><ul>
<li>了解wordcloud更多参数，扩展词云能力</li>
<li>特色词云：设计一款属于自己的特色词云风格</li>
<li>更多文件：用更多文件练习词云生成</li>
</ul>
<blockquote>
<p>练习素材下载：<br><a href="https://image-1253398535.cos.ap-beijing.myqcloud.com/python(6)/%E6%96%B0%E6%97%B6%E4%BB%A3%E4%B8%AD%E5%9B%BD%E7%89%B9%E8%89%B2%E7%A4%BE%E4%BC%9A%E4%B8%BB%E4%B9%89.txt">新时代中国特色社会主义.txt</a><br><a href="https://image-1253398535.cos.ap-beijing.myqcloud.com/python(6)/%E5%85%B3%E4%BA%8E%E5%AE%9E%E6%96%BD%E4%B9%A1%E6%9D%91%E6%8C%AF%E5%85%B4%E6%88%98%E7%95%A5%E7%9A%84%E6%84%8F%E8%A7%81.txt">关于实施乡村振兴战略的意见.txt</a><br><a href="https://image-1253398535.cos.ap-beijing.myqcloud.com/python(6)/chinamap.jpg">chinamap.jpg</a><br><a href="https://image-1253398535.cos.ap-beijing.myqcloud.com/python(6)/fivestars.png">fivestars.png</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>嵩天老师Python(8)程序设计方法学</title>
    <url>/2019/04/04/%E5%B5%A9%E5%A4%A9%E8%80%81%E5%B8%88Python(8)%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="实例：体育竞技分析"><a href="#实例：体育竞技分析" class="headerlink" title="实例：体育竞技分析"></a>实例：体育竞技分析</h1><blockquote>
<p>高手过招，胜负只在毫厘之间</p>
</blockquote>
<h2 id="“体育竞技分析”问题分析"><a href="#“体育竞技分析”问题分析" class="headerlink" title="“体育竞技分析”问题分析"></a>“体育竞技分析”问题分析</h2><h3 id="体育竞技分析"><a href="#体育竞技分析" class="headerlink" title="体育竞技分析"></a>体育竞技分析</h3><ul>
<li><p>需求：毫厘是多少？如何科学分析体育竞技比赛？</p>
</li>
<li><p>输入：球员的水平</p>
</li>
<li><p>输出：可预测的比赛成绩</p>
<span id="more"></span></li>
</ul>
<h3 id="体育竞技分析：模拟N场比赛"><a href="#体育竞技分析：模拟N场比赛" class="headerlink" title="体育竞技分析：模拟N场比赛"></a>体育竞技分析：模拟N场比赛</h3><ul>
<li>计算思维：抽象 + 自动化</li>
<li>模拟：抽象比赛过程 + 自动化执行N场比赛</li>
<li>当N越大时，比赛结果分析会越科学</li>
</ul>
<h3 id="比赛规则"><a href="#比赛规则" class="headerlink" title="比赛规则"></a>比赛规则</h3><ul>
<li>双人击球比赛：A &amp; B，回合制，5局3胜</li>
<li>开始时一方先发球，直至判分，接下来胜者发球</li>
<li>球员只能在发球局得分，15分胜一局</li>
</ul>
<h2 id="自顶向下和自底向上"><a href="#自顶向下和自底向上" class="headerlink" title="自顶向下和自底向上"></a>自顶向下和自底向上</h2><h3 id="自顶向下（设计）——解决复杂问题的有效方法"><a href="#自顶向下（设计）——解决复杂问题的有效方法" class="headerlink" title="自顶向下（设计）——解决复杂问题的有效方法"></a>自顶向下（设计）——解决复杂问题的有效方法</h3><ul>
<li>将一个总问题表达为若干个小问题组成的形式</li>
<li>使用同样方法进一步分解小问题</li>
<li>直至，小问题可以用计算机简单明了的解决</li>
</ul>
<h3 id="自底向上（执行）——逐步组建复杂系统的有效测试方法"><a href="#自底向上（执行）——逐步组建复杂系统的有效测试方法" class="headerlink" title="自底向上（执行）——逐步组建复杂系统的有效测试方法"></a>自底向上（执行）——逐步组建复杂系统的有效测试方法</h3><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="程序总体框架及步骤"><a href="#程序总体框架及步骤" class="headerlink" title="程序总体框架及步骤"></a>程序总体框架及步骤</h3><ul>
<li>步骤1：打印程序的介绍性信息               - printInfo()</li>
<li>步骤2：获得程序运行参数：proA, proB, n    - getInputs()</li>
<li>步骤3：利用球员A和B的能力值，模拟n局比赛  - simNGames()</li>
<li>步骤4：输出球员A和B获胜比赛的场次及概率   - printSummary()</li>
</ul>
<h3 id="全代码"><a href="#全代码" class="headerlink" title="全代码"></a>全代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printIntro</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这个程序模拟两个选手A和B的某种竞技比赛&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;程序运行需要A和B的能力值（以0到1之间的小数表示）&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getInputs</span>():</span></span><br><span class="line">    a = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入选手A的能力值（0-1）：&quot;</span>))</span><br><span class="line">    b = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入选手B的能力值（0-1）：&quot;</span>))</span><br><span class="line">    n = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;模拟比赛的场次：&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> a, b, n</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printSummary</span>(<span class="params">winsA, winsB</span>):</span></span><br><span class="line">    n = winsA + winsB</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;竞技分析开始，共模拟&#123;&#125;场比赛&quot;</span>.<span class="built_in">format</span>(n))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;选手A获胜&#123;&#125;场比赛，占比&#123;:0.1%&#125;&quot;</span>.<span class="built_in">format</span>(winsA, winsA/n))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;选手B获胜&#123;&#125;场比赛，占比&#123;:0.1%&#125;&quot;</span>.<span class="built_in">format</span>(winsB, winsB/n))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gameOver</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a==<span class="number">15</span> <span class="keyword">or</span> b==<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simOneGame</span>(<span class="params">probA, probB</span>):</span></span><br><span class="line">    scoreA, scoreB = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    serving =<span class="string">&quot;A&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> gameOver(scoreA,scoreB):</span><br><span class="line">        <span class="keyword">if</span> serving == <span class="string">&quot;A&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> random() &lt; probA:</span><br><span class="line">                scoreA += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                serving = <span class="string">&quot;B&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> random() &lt; probB:</span><br><span class="line">                scoreB += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                serving = <span class="string">&quot;A&quot;</span></span><br><span class="line">    <span class="keyword">return</span> scoreA, scoreB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simNGames</span>(<span class="params">n, probA, probB</span>):</span></span><br><span class="line">    winsA, winsB = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        scoreA, scoreB = simOneGame(probA, probB)</span><br><span class="line">        <span class="keyword">if</span> scoreA &gt; scoreB:</span><br><span class="line">            winsA += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            winsB += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> winsA, winsB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    printIntro()</span><br><span class="line">    probA, probB, n = getInputs()</span><br><span class="line">    winsA, winsB = simNGames(n, probA, probB)</span><br><span class="line">    printSummary(winsA, winsB)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h3><img src="/2019/04/04/%E5%B5%A9%E5%A4%A9%E8%80%81%E5%B8%88Python(8)%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%E5%AD%A6/result.png" class>

<h2 id="举一反三"><a href="#举一反三" class="headerlink" title="举一反三"></a>举一反三</h2><ol>
<li>理解自顶向下和自底向上</li>
</ol>
<ul>
<li>理解自顶向下的设计思维：分而治之</li>
<li>理解自底向上的执行思维：模块化集成</li>
<li>自顶向下是“系统”思维的简化</li>
</ul>
<ol start="2">
<li>应用问题的扩展</li>
</ol>
<ul>
<li>扩展比赛参数，增加对更多能力对比情况的判断</li>
<li>扩展比赛设计，增加对真实比赛结果的预测</li>
<li>扩展分析逻辑，反向推理，用胜率推算能力？</li>
</ul>
<h1 id="Python程序设计思维"><a href="#Python程序设计思维" class="headerlink" title="Python程序设计思维"></a>Python程序设计思维</h1><h2 id="计算思维"><a href="#计算思维" class="headerlink" title="计算思维"></a>计算思维</h2><p>第3种人类思维特征</p>
<ul>
<li>逻辑思维：推理和演绎，数学为代表，A-&gt;B B-&gt;C A-&gt;C</li>
<li>实证思维：实验和验证，物理为代表，引力波&lt;-实验</li>
<li>计算思维：设计和构造，计算机为代表，汉诺塔递归</li>
</ul>
<p>计算思维（Computational Thinking）：<strong>抽象</strong>问题的计算过程，利用计算机<strong>自动化</strong>求解，是基于计算机的思维方式。计算思维基于计算机强大的算力及海量数据，抽象计算过程，关注设计和构造，而非因果。</p>
<h2 id="计算生态与Python语言"><a href="#计算生态与Python语言" class="headerlink" title="计算生态与Python语言"></a>计算生态与Python语言</h2><ul>
<li>以开源项目为代表的大量第三方库</li>
<li>库的建设经过野蛮生长和自然选择</li>
<li>库之间相互关联使用，依存发展</li>
<li>社区庞大，新技术更迭迅速</li>
</ul>
<p>计算生态的价值</p>
<ul>
<li>加速科技类应用创新的重要支撑</li>
<li>发展科技产品商业价值的重要模式</li>
<li>国家科技体系安全和稳固的基础</li>
</ul>
<h2 id="基本的程序设计模式"><a href="#基本的程序设计模式" class="headerlink" title="基本的程序设计模式"></a>基本的程序设计模式</h2><p>IPO<br>模块化设计<br>配置化设计</p>
<h1 id="Python第三方库安装"><a href="#Python第三方库安装" class="headerlink" title="Python第三方库安装"></a>Python第三方库安装</h1><p>Python社区：<a href="https://pypi.org/">https://pypi.org</a></p>
<p>安装第三方库：</p>
<ol>
<li>主要方法：使用pip命令</li>
<li>集成安装方法</li>
<li>文件安装方法</li>
</ol>
<p>Anaconda： <a href="https://www.continuum.io/">https://www.continuum.io</a></p>
<ul>
<li>支持近800个第三方库</li>
<li>包含多个主流工具</li>
<li>适合数据计算领域开发</li>
</ul>
<p>UCI页面： <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p>
<ul>
<li>在UCI页面上搜索&lt;库名称&gt;</li>
<li>下载对应版本的文件</li>
<li>使用pip install &lt;文件名&gt;安装</li>
</ul>
<h1 id="os库的使用"><a href="#os库的使用" class="headerlink" title="os库的使用"></a>os库的使用</h1><h2 id="os库基本介绍"><a href="#os库基本介绍" class="headerlink" title="os库基本介绍"></a>os库基本介绍</h2><p>os库提供通用的、基本的操作系统交互功能</p>
<ul>
<li>os库是Python标准库，包含几百个函数</li>
<li>常用路径操作、进程管理、环境参数等几类<ul>
<li>路径操作：os.path子库，处理文件路径及信息</li>
<li>进程管理：启动系统中其他程序</li>
<li>环境参数：获得系统软硬件信息等环境参数</li>
</ul>
</li>
</ul>
<h2 id="os库的路径操作"><a href="#os库的路径操作" class="headerlink" title="os库的路径操作"></a>os库的路径操作</h2><p>os.path子库以path为入口，用于操作和处理文件路径<br>| 函数                        | 描述                                  |<br>| ————————— | ——————————— |<br>| <code>os.path.abspath(path)</code>  | 返回path在当前系统中的绝对路径             |<br>| <code>os.path.normpath(path)</code>  | 归一化path的表示形式，统一用\\分隔路径      |<br>| <code>os.path.relpath(path)</code> | 返回当前程序与文件之间的相对路径（relative path）|<br>| <code>os.path.dirname(path)</code>   | 返回path中的目录名称                        |<br>| <code>os.path.basename(path)</code> | 返回path中最后的文件名称                  |<br>| <code>os.path.join(path,*paths)</code> | 组合path与paths，返回一个路径字符串         |<br>| <code>os.path.exists(path)</code> | 判断path对应文件或目录是否存在，返回True或False   |<br>| <code>os.path.isfile(path)</code>  | 判断path所对应是否为已存在的文件，返回True或False|<br>| <code>os.path.isdir(path)</code>  | 判断path所对应是否为已存在的目录，返回True或False |<br>| <code>os.path.getatime(path)</code>  | 返回path对应文件或目录上一次的访问时间        |<br>| <code>os.path.getmtime(path)</code>    | 返回path对应文件或目录最近一次的修改时间     |<br>| <code>os.path.getctime(path)</code>    | 返回path对应文件或目录创建时间             |<br>| <code>os.path.getsize(path)</code>     | 返回path对应文件的大小，以字节为单位        |</p>
<h2 id="os库的进程管理"><a href="#os库的进程管理" class="headerlink" title="os库的进程管理"></a>os库的进程管理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.system(command)</span><br></pre></td></tr></table></figure>
<ul>
<li>执行程序或命令command</li>
<li>在Windows操作系统中，返回值为cmd调用的返回信息</li>
</ul>
<h2 id="os库的环境参数"><a href="#os库的环境参数" class="headerlink" title="os库的环境参数"></a>os库的环境参数</h2><p>获取或改变系统环境信息<br>| 函数             | 描述                                            |<br>| —————- | ———————————————– |<br>| <code>os.chdir(path)</code> | 修改当前程序的操作路径                          |<br>| <code>os.getcwd()</code>    | 返回程序的当前路径                              |<br>| <code>os.getlogin()</code>  | 获得当前系统登录用户名称                        |<br>| <code>os.cpu_count()</code> | 获得当前系统CPU数量                             |<br>| <code>os.urandom(n)</code>  | 获得n个字节长度的随机字符串，通常用于加解密运算 |</p>
<h1 id="实例：第三方库安装脚本"><a href="#实例：第三方库安装脚本" class="headerlink" title="实例：第三方库安装脚本"></a>实例：第三方库安装脚本</h1><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><ul>
<li>需求：批量安装第三方库需要人工干预，能否自动安装？</li>
<li>自动执行pip逐一根据需求安装</li>
</ul>
<table>
<thead>
<tr>
<th>库名</th>
<th>用途</th>
<th>pip安装指令</th>
</tr>
</thead>
<tbody><tr>
<td>NumPy</td>
<td>N维数据表示和运算</td>
<td>pip install numpy</td>
</tr>
<tr>
<td>Matplotlib</td>
<td>二维数据可视化</td>
<td>pip install matplotlib</td>
</tr>
<tr>
<td>PIL</td>
<td>图像处理</td>
<td>pip install pillow</td>
</tr>
<tr>
<td>Scikit-Learn</td>
<td>机器学习和数据挖掘</td>
<td>pip install sklearn</td>
</tr>
<tr>
<td>Requests</td>
<td>HTTP协议访问及网络爬虫</td>
<td>pip install requests</td>
</tr>
<tr>
<td>Jieba</td>
<td>中文分词</td>
<td>pip install jieba</td>
</tr>
<tr>
<td>Beautiful Soup</td>
<td>HTML和XML解析器</td>
<td>pip install beautifulsoup4</td>
</tr>
<tr>
<td>Wheel Python</td>
<td>第三方库文件打包工具</td>
<td>pip install wheel</td>
</tr>
<tr>
<td>PyInstaller</td>
<td>打包Python源文件为可执行文件</td>
<td>pip install pyinstall</td>
</tr>
<tr>
<td>Flask</td>
<td>轻量级Web开发框架</td>
<td>pip install flask</td>
</tr>
<tr>
<td>WeRoBot</td>
<td>微信机器人开发框架</td>
<td>pip install werobot</td>
</tr>
<tr>
<td>SymPy</td>
<td>数学符号计算工具</td>
<td>pip install sympy</td>
</tr>
<tr>
<td>Pandas</td>
<td>高效数据分析和计算</td>
<td>pip install pandas</td>
</tr>
<tr>
<td>Networkx</td>
<td>复杂网络和图结构的建模和分析</td>
<td>pip install networkx</td>
</tr>
<tr>
<td>PyQt5</td>
<td>基于Qt的专业级GUI开发框架</td>
<td>pip install pyqt5</td>
</tr>
<tr>
<td>PyOpenGL</td>
<td>多平台OpenGL开发接口</td>
<td>pip install pyopengl</td>
</tr>
<tr>
<td>PyPDF2</td>
<td>PDF文件内容提取及处理</td>
<td>pip install pypdf2</td>
</tr>
<tr>
<td>docopt</td>
<td>Python命令行解析</td>
<td>pip install docopt</td>
</tr>
<tr>
<td>PyGame</td>
<td>简单小游戏开发框架</td>
<td>pip install pygame</td>
</tr>
</tbody></table>
<h2 id="实例解析"><a href="#实例解析" class="headerlink" title="实例解析"></a>实例解析</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#BatchInstall.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">libs = &#123;<span class="string">&quot;numpy&quot;</span>,<span class="string">&quot;matplotlib&quot;</span>,<span class="string">&quot;pillow&quot;</span>,<span class="string">&quot;sklearn&quot;</span>,<span class="string">&quot;requests&quot;</span>,\</span><br><span class="line">        <span class="string">&quot;jieba&quot;</span>,<span class="string">&quot;beautifulsoup4&quot;</span>,<span class="string">&quot;wheel&quot;</span>,<span class="string">&quot;networkx&quot;</span>,<span class="string">&quot;sympy&quot;</span>,\</span><br><span class="line">        <span class="string">&quot;pyinstaller&quot;</span>,<span class="string">&quot;django&quot;</span>,<span class="string">&quot;flask&quot;</span>,<span class="string">&quot;werobot&quot;</span>,<span class="string">&quot;pyqt5&quot;</span>,\</span><br><span class="line">        <span class="string">&quot;pandas&quot;</span>,<span class="string">&quot;pyopengl&quot;</span>,<span class="string">&quot;pypdf2&quot;</span>,<span class="string">&quot;docopt&quot;</span>,<span class="string">&quot;pygame&quot;</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> lib <span class="keyword">in</span> libs:</span><br><span class="line">        os.system(<span class="string">&quot;pip install&quot;</span> + lib)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Successful&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Failed Somehow&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="举一反三-1"><a href="#举一反三-1" class="headerlink" title="举一反三"></a>举一反三</h2><p>自动化脚本+</p>
<ul>
<li>编写各类自动化运行程序的脚本，调用已有程序</li>
<li>扩展应用：安装更多第三方库，增加配置文件</li>
<li>扩展异常检测：捕获更多异常类型，程序更稳定友好</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>嵩天老师Python(9)Python计算生态</title>
    <url>/2019/04/04/%E5%B5%A9%E5%A4%A9%E8%80%81%E5%B8%88Python(9)Python%E8%AE%A1%E7%AE%97%E7%94%9F%E6%80%81/</url>
    <content><![CDATA[<h1 id="从数据处理到人工智能"><a href="#从数据处理到人工智能" class="headerlink" title="从数据处理到人工智能"></a>从数据处理到人工智能</h1><p>数据表示-&gt;数据清洗-&gt;数据统计-&gt;数据可视化-&gt;数据挖掘-&gt;人工智能</p>
<ul>
<li><p>数据表示：采用合适方式用程序表达数据</p>
</li>
<li><p>数据清理：数据归一化、数据转换、异常值处理</p>
</li>
<li><p>数据统计：数据的概要理解，数量、分布、中位数等</p>
</li>
<li><p>数据可视化：直观展示数据内涵的方式</p>
</li>
<li><p>数据挖掘：从数据分析获得知识，产生数据外的价值</p>
</li>
<li><p>人工智能：数据/语言/图像/视觉等方面深度分析与决策</p>
<span id="more"></span></li>
</ul>
<h2 id="Python库之数据分析"><a href="#Python库之数据分析" class="headerlink" title="Python库之数据分析"></a>Python库之数据分析</h2><h3 id="Numpy-表达N维数组的最基础库"><a href="#Numpy-表达N维数组的最基础库" class="headerlink" title="Numpy: 表达N维数组的最基础库"></a>Numpy: 表达N维数组的最基础库</h3><ul>
<li>Python接口使用，C语言实现，计算速度优异</li>
<li>Python数据分析及科学计算的基础库，支撑Pandas等</li>
<li>提供直接的矩阵运算、广播函数、线性代数等功能</li>
</ul>
<h3 id="Pandas-Python数据分析高层次应用库"><a href="#Pandas-Python数据分析高层次应用库" class="headerlink" title="Pandas: Python数据分析高层次应用库"></a>Pandas: Python数据分析高层次应用库</h3><ul>
<li>提供了简单易用的数据结构和数据分析工具</li>
<li>理解数据类型与索引的关系，操作索引即操作数据</li>
<li>Python最主要的数据分析功能库，基于Numpy开发</li>
</ul>
<p>Series = 索引 + 一维数据<br>DataFrame = 行列索引 + 二维数据</p>
<h3 id="SciPy-数学、科学和工程计算功能库"><a href="#SciPy-数学、科学和工程计算功能库" class="headerlink" title="SciPy: 数学、科学和工程计算功能库"></a>SciPy: 数学、科学和工程计算功能库</h3><ul>
<li>提供了一批数学算法及工程数据运算功能</li>
<li>类似Matlab，可用于如傅里叶变换、信号处理等应用</li>
<li>Python最主要的科学计算功能库，基于Numpy开发</li>
</ul>
<h2 id="Python库之数据可视化"><a href="#Python库之数据可视化" class="headerlink" title="Python库之数据可视化"></a>Python库之数据可视化</h2><h3 id="Matplotlib-高质量的二维数据可视化功能库"><a href="#Matplotlib-高质量的二维数据可视化功能库" class="headerlink" title="Matplotlib: 高质量的二维数据可视化功能库"></a>Matplotlib: 高质量的二维数据可视化功能库</h3><ul>
<li>提供了超过100种数据可视化展示效果</li>
<li>通过matplotlib.pyplot子库调用各可视化效果</li>
<li>Python最主要的数据可视化功能库，基于Numpy开发</li>
</ul>
<h3 id="Seaborn-统计类数据可视化功能库"><a href="#Seaborn-统计类数据可视化功能库" class="headerlink" title="Seaborn: 统计类数据可视化功能库"></a>Seaborn: 统计类数据可视化功能库</h3><ul>
<li>提供了一批高层次的统计类数据可视化展示效果</li>
<li>主要展示数据间分布、分类和线性关系等内容</li>
<li>基于Matplotlib开发，支持Numpy和Pandas</li>
</ul>
<h3 id="Mayavi：三维科学数据可视化功能库"><a href="#Mayavi：三维科学数据可视化功能库" class="headerlink" title="Mayavi：三维科学数据可视化功能库"></a>Mayavi：三维科学数据可视化功能库</h3><ul>
<li>提供了一批简单易用的3D科学计算数据可视化展示效果</li>
<li>目前版本是Mayavi2，三维可视化最主要的第三方库</li>
<li>支持Numpy、TVTK、Traits、Envisage等第三方库</li>
</ul>
<h2 id="Python之文本处理"><a href="#Python之文本处理" class="headerlink" title="Python之文本处理"></a>Python之文本处理</h2><h3 id="PyPDF2：用来处理pdf文件的工具集"><a href="#PyPDF2：用来处理pdf文件的工具集" class="headerlink" title="PyPDF2：用来处理pdf文件的工具集"></a>PyPDF2：用来处理pdf文件的工具集</h3><ul>
<li>提供了一批处理PDF文件的计算功能</li>
<li>支持获取信息、分隔/整合文件、加密解密等</li>
<li>完全Python语言实现，不需要额外依赖，功能稳定</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyPDF2 <span class="keyword">import</span> PdfFileReader, PdfFileMerger</span><br><span class="line">merger = PdfFileMerger()</span><br><span class="line">input1 = <span class="built_in">open</span>(<span class="string">&quot;document1.pdf&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">input2 = <span class="built_in">open</span>(<span class="string">&quot;document2.pdf&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">merger.append(fileobj = input1, pages = (<span class="number">0</span>,<span class="number">3</span>))</span><br><span class="line">merger.merge(position = <span class="number">2</span>, fileobj = input2, pages = (<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">output = <span class="built_in">open</span>(<span class="string">&quot;document-output.pdf&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">merger.write(output)</span><br></pre></td></tr></table></figure>

<h3 id="NLTK：自然语言文本处理第三方库"><a href="#NLTK：自然语言文本处理第三方库" class="headerlink" title="NLTK：自然语言文本处理第三方库"></a>NLTK：自然语言文本处理第三方库</h3><ul>
<li>提供了一批简单易用的自然语言文本处理功能</li>
<li>支持语言文本分类、标记、语法句法、语义分析等</li>
<li>最优秀的Python自然语言处理库</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.corpus <span class="keyword">import</span> treebank</span><br><span class="line">t = treebank.parsed_sents(<span class="string">&#x27;wsj_0001.mrg&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">t.draw()</span><br></pre></td></tr></table></figure>

<h3 id="Python-docx：创建或更新Microsoft-Word文件的第三方库"><a href="#Python-docx：创建或更新Microsoft-Word文件的第三方库" class="headerlink" title="Python-docx：创建或更新Microsoft Word文件的第三方库"></a>Python-docx：创建或更新Microsoft Word文件的第三方库</h3><ul>
<li>提供创建或更新.doc .docx等文件的计算功能</li>
<li>增加并配置段落、图片、表格、文字等，功能全面</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line">document = Document()</span><br><span class="line">document.add_heading(<span class="string">&#x27;Document Title&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">p = document.add_paragraph(<span class="string">&#x27;A plain paragraph having some &#x27;</span>)</span><br><span class="line">document.add_page_break()</span><br><span class="line">document.save(<span class="string">&#x27;demo.docx&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Python之机器学习"><a href="#Python之机器学习" class="headerlink" title="Python之机器学习"></a>Python之机器学习</h2><h3 id="Scikit-learn：机器学习方法工具集"><a href="#Scikit-learn：机器学习方法工具集" class="headerlink" title="Scikit-learn：机器学习方法工具集"></a>Scikit-learn：机器学习方法工具集</h3><ul>
<li>提供一批统一化的机器学习方法功能接口</li>
<li>提供聚类、分类、回归、强化学习等计算功能</li>
<li>机器学习最基本且最优秀的Python第三方库</li>
</ul>
<h3 id="TensorFlow：AlphaGo背后的机器学习计算框架"><a href="#TensorFlow：AlphaGo背后的机器学习计算框架" class="headerlink" title="TensorFlow：AlphaGo背后的机器学习计算框架"></a>TensorFlow：AlphaGo背后的机器学习计算框架</h3><ul>
<li>谷歌公司推动的开源机器学习框架</li>
<li>将数据流图作为基础，图节点代表运算，边代表张量</li>
<li>应用机器学习方法的一种方式，支撑谷歌人工智能应用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line">res = sess.run(result)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;result:&#x27;</span>, res)</span><br></pre></td></tr></table></figure>

<h3 id="MXNet：基于神经网络的深度学习计算框架"><a href="#MXNet：基于神经网络的深度学习计算框架" class="headerlink" title="MXNet：基于神经网络的深度学习计算框架"></a>MXNet：基于神经网络的深度学习计算框架</h3><ul>
<li>提供可扩展的神经网络及深度学习计算功能</li>
<li>可用于自动驾驶、机器翻译、语音识别等众多领域</li>
<li>Python最重要的深度学习计算框架</li>
</ul>
<h1 id="实例：霍兰德人格分析雷达图"><a href="#实例：霍兰德人格分析雷达图" class="headerlink" title="实例：霍兰德人格分析雷达图"></a>实例：霍兰德人格分析雷达图</h1><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>霍兰德人格分析</p>
<ul>
<li>霍兰德认为：人格兴趣与职业之间应有一种内在的对应关系</li>
<li>人格分类：研究型、艺术型、社会型、企业型、传统型、现实性</li>
<li>职业：工程师、实验员、艺术家、推销员、记事员、社会工作者</li>
</ul>
<p>需求</p>
<ul>
<li>需求：雷达图方式验证霍兰德人格分析</li>
<li>输入：各职业人群结合兴趣的调研数据</li>
<li>输出：雷达图</li>
</ul>
<p>第三方库的使用</p>
<ul>
<li>通用雷达图绘制：matplotlib库</li>
<li>专业的多维数据表示：numpy库</li>
<li>输出：雷达图</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#HollandRadarDraw.py</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">matplotlib.rcParams[<span class="string">&#x27;font.family&#x27;</span>]=<span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line">radar_labels = np.array([<span class="string">&#x27;研究型(I)&#x27;</span>,<span class="string">&#x27;艺术型(A)&#x27;</span>,<span class="string">&#x27;社会型(S)&#x27;</span>,\</span><br><span class="line"><span class="string">&#x27;企业型(E)&#x27;</span>,<span class="string">&#x27;常规型(C)&#x27;</span>,<span class="string">&#x27;现实型(R)&#x27;</span>])</span><br><span class="line">data = np.array([[<span class="number">0.40</span>, <span class="number">0.32</span>, <span class="number">0.35</span>, <span class="number">0.30</span>, <span class="number">0.30</span>, <span class="number">0.88</span>],</span><br><span class="line">[<span class="number">0.85</span>, <span class="number">0.35</span>, <span class="number">0.30</span>, <span class="number">0.40</span>, <span class="number">0.40</span>, <span class="number">0.30</span>],</span><br><span class="line">[<span class="number">0.43</span>, <span class="number">0.89</span>, <span class="number">0.30</span>, <span class="number">0.28</span>, <span class="number">0.22</span>, <span class="number">0.30</span>],</span><br><span class="line">[<span class="number">0.30</span>, <span class="number">0.25</span>, <span class="number">0.48</span>, <span class="number">0.85</span>, <span class="number">0.45</span>, <span class="number">0.40</span>],</span><br><span class="line">[<span class="number">0.20</span>, <span class="number">0.38</span>, <span class="number">0.87</span>, <span class="number">0.45</span>, <span class="number">0.32</span>, <span class="number">0.28</span>],</span><br><span class="line">[<span class="number">0.34</span>, <span class="number">0.31</span>, <span class="number">0.38</span>, <span class="number">0.40</span>, <span class="number">0.92</span>, <span class="number">0.28</span>]]) <span class="comment">#数据值</span></span><br><span class="line">data_labels = (<span class="string">&#x27;艺术家&#x27;</span>,<span class="string">&#x27;实验员&#x27;</span>,<span class="string">&#x27;工程师&#x27;</span>,<span class="string">&#x27;推销员&#x27;</span>,<span class="string">&#x27;社会工作者&#x27;</span>,<span class="string">&#x27;记事员&#x27;</span>)</span><br><span class="line">angles = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">6</span>, endpoint=<span class="literal">False</span>)</span><br><span class="line">data = np.concatenate((data, [data[<span class="number">0</span>]]))</span><br><span class="line">angles = np.concatenate((angles, [angles[<span class="number">0</span>]]))</span><br><span class="line">fig = plt.figure(facecolor=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">plt.subplot(<span class="number">111</span>, polar=<span class="literal">True</span>)</span><br><span class="line">plt.plot(angles,data,<span class="string">&#x27;o-&#x27;</span>, linewidth=<span class="number">1</span>, alpha=<span class="number">0.2</span>)</span><br><span class="line">plt.fill(angles,data, alpha=<span class="number">0.25</span>)</span><br><span class="line">plt.thetagrids(angles*<span class="number">180</span>/np.pi, radar_labels,frac = <span class="number">1.2</span>)</span><br><span class="line">plt.figtext(<span class="number">0.52</span>, <span class="number">0.95</span>, <span class="string">&#x27;霍兰德人格分析&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line">legend = plt.legend(data_labels, loc=(<span class="number">0.94</span>, <span class="number">0.80</span>), labelspacing=<span class="number">0.1</span>)</span><br><span class="line">plt.setp(legend.get_texts(), fontsize=<span class="string">&#x27;large&#x27;</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.savefig(<span class="string">&#x27;holland_radar.jpg&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h1 id="从Web解析到网络空间"><a href="#从Web解析到网络空间" class="headerlink" title="从Web解析到网络空间"></a>从Web解析到网络空间</h1><h2 id="Python库之网络爬虫"><a href="#Python库之网络爬虫" class="headerlink" title="Python库之网络爬虫"></a>Python库之网络爬虫</h2><h3 id="Requests-最友好的网络爬虫功能库"><a href="#Requests-最友好的网络爬虫功能库" class="headerlink" title="Requests: 最友好的网络爬虫功能库"></a>Requests: 最友好的网络爬虫功能库</h3><ul>
<li>提供了简单易用的类HTTP协议网络爬虫功能</li>
<li>支持连接池、SSL、Cookies、HTTP(S)代理等</li>
<li>Python最主要的页面级网络爬虫功能库</li>
</ul>
<h3 id="Scrapy-优秀的网络爬虫框架"><a href="#Scrapy-优秀的网络爬虫框架" class="headerlink" title="Scrapy: 优秀的网络爬虫框架"></a>Scrapy: 优秀的网络爬虫框架</h3><ul>
<li>提供了构建网络爬虫系统的框架功能，功能半成品</li>
<li>支持批量和定时网页爬取、提供数据处理流程等</li>
<li>Python最主要且最专业的网络爬虫框架</li>
</ul>
<h3 id="pyspider-强大的Web页面爬取系统"><a href="#pyspider-强大的Web页面爬取系统" class="headerlink" title="pyspider: 强大的Web页面爬取系统"></a>pyspider: 强大的Web页面爬取系统</h3><ul>
<li>提供了完整的网页爬取系统构建功能</li>
<li>支持数据库后端、消息队列、优先级、分布式架构等</li>
<li>Python重要的网络爬虫类第三方库</li>
</ul>
<h2 id="Python库之Web信息提取"><a href="#Python库之Web信息提取" class="headerlink" title="Python库之Web信息提取"></a>Python库之Web信息提取</h2><h3 id="Beautiful-Soup-HTML和XML的解析库"><a href="#Beautiful-Soup-HTML和XML的解析库" class="headerlink" title="Beautiful Soup: HTML和XML的解析库"></a>Beautiful Soup: HTML和XML的解析库</h3><ul>
<li>提供了解析HTML和XML等Web信息的功能</li>
<li>又名beautifulsoup4或bs4，可以加载多种解析引擎</li>
<li>常与网络爬虫库搭配使用，如Scrapy、requests等</li>
</ul>
<h3 id="Re-正则表达式解析和处理功能库"><a href="#Re-正则表达式解析和处理功能库" class="headerlink" title="Re: 正则表达式解析和处理功能库"></a>Re: 正则表达式解析和处理功能库</h3><ul>
<li>提供了定义和解析正则表达式的一批通用功能</li>
<li>可用于各类场景，包括定点的Web信息提取</li>
<li>Python最主要的标准库之一，无需安装</li>
</ul>
<h3 id="Python-Goose-提取文章类型Web页面的功能库"><a href="#Python-Goose-提取文章类型Web页面的功能库" class="headerlink" title="Python-Goose: 提取文章类型Web页面的功能库"></a>Python-Goose: 提取文章类型Web页面的功能库</h3><ul>
<li>提供了对Web页面中文章信息/视频等元数据的提取功能</li>
<li>针对特定类型Web页面，应用覆盖面较广</li>
<li>Python最主要的Web信息提取库</li>
</ul>
<h2 id="Python库之Web网站开发"><a href="#Python库之Web网站开发" class="headerlink" title="Python库之Web网站开发"></a>Python库之Web网站开发</h2><h3 id="Django-最流行的Web应用框架"><a href="#Django-最流行的Web应用框架" class="headerlink" title="Django: 最流行的Web应用框架"></a>Django: 最流行的Web应用框架</h3><ul>
<li>提供了构建Web系统的基本应用框架</li>
<li>MTV模式：模型(model)、模板(Template)、视图(Views)</li>
<li>Python最重要的Web应用框架，略微复杂的应用框架</li>
</ul>
<h3 id="Pyramid-规模适中的Web应用框架"><a href="#Pyramid-规模适中的Web应用框架" class="headerlink" title="Pyramid: 规模适中的Web应用框架"></a>Pyramid: 规模适中的Web应用框架</h3><ul>
<li>提供了简单方便构建Web系统的应用框架</li>
<li>不大不小，规模适中，适合快速构建并适度扩展类应用</li>
<li>Python产品级Web应用框架，起步简单可扩展性好</li>
</ul>
<h3 id="Flask-Web应用开发微框架"><a href="#Flask-Web应用开发微框架" class="headerlink" title="Flask: Web应用开发微框架"></a>Flask: Web应用开发微框架</h3><ul>
<li>提供了最简单构建Web系统的应用框架</li>
<li>特点是：简单、规模小、快速</li>
<li>Django &gt; Pyramid &gt; Flask</li>
</ul>
<h2 id="Python库之网络应用开发"><a href="#Python库之网络应用开发" class="headerlink" title="Python库之网络应用开发"></a>Python库之网络应用开发</h2><h3 id="WeRoBot-微信公众号开发框架"><a href="#WeRoBot-微信公众号开发框架" class="headerlink" title="WeRoBot: 微信公众号开发框架"></a>WeRoBot: 微信公众号开发框架</h3><ul>
<li>提供了解析微信服务器消息及反馈消息的功能</li>
<li>建立微信机器人的重要技术手段</li>
</ul>
<h3 id="aip-百度AI开放平台接口"><a href="#aip-百度AI开放平台接口" class="headerlink" title="aip: 百度AI开放平台接口"></a>aip: 百度AI开放平台接口</h3><ul>
<li>提供了访问百度AI服务的Python功能接口</li>
<li>语音、人脸、OCR、NLP、知识图谱、图像搜索等领域</li>
<li>Python百度AI应用的最主要方式</li>
</ul>
<h3 id="MyQR-二维码生成第三方库"><a href="#MyQR-二维码生成第三方库" class="headerlink" title="MyQR: 二维码生成第三方库"></a>MyQR: 二维码生成第三方库</h3><ul>
<li>提供了生成二维码的系列功能</li>
<li>基本二维码、艺术二维码和动态二维码</li>
</ul>
<h1 id="从人机交互到艺术设计"><a href="#从人机交互到艺术设计" class="headerlink" title="从人机交互到艺术设计"></a>从人机交互到艺术设计</h1><h2 id="Python库之图形用户界面"><a href="#Python库之图形用户界面" class="headerlink" title="Python库之图形用户界面"></a>Python库之图形用户界面</h2><h3 id="PyQt5-Qt开发框架的Python接口"><a href="#PyQt5-Qt开发框架的Python接口" class="headerlink" title="PyQt5: Qt开发框架的Python接口"></a>PyQt5: Qt开发框架的Python接口</h3><ul>
<li>提供了创建Qt5程序的Python API接口</li>
<li>Qt是非常成熟的跨平台桌面应用开发系统，完备GUI</li>
<li>推荐的Python GUI开发第三方库</li>
</ul>
<h3 id="wxPython-跨平台GUI开发框架"><a href="#wxPython-跨平台GUI开发框架" class="headerlink" title="wxPython: 跨平台GUI开发框架"></a>wxPython: 跨平台GUI开发框架</h3><ul>
<li>提供了专用于Python的跨平台GUI开发框架</li>
<li>理解数据类型与索引的关系，操作索引即操作数据</li>
<li>Python最主要的数据分析功能库，基于Numpy开发</li>
</ul>
<h3 id="PyGObject-使用GTK-开发GUI的功能库"><a href="#PyGObject-使用GTK-开发GUI的功能库" class="headerlink" title="PyGObject: 使用GTK+开发GUI的功能库"></a>PyGObject: 使用GTK+开发GUI的功能库</h3><ul>
<li>提供了整合GTK+、WebKitGTK+等库的功能</li>
<li>GTK+：跨平台的一种用户图形界面GUI框架</li>
<li>实例：Anaconda采用该库构建GUI</li>
</ul>
<h2 id="Python库之游戏开发"><a href="#Python库之游戏开发" class="headerlink" title="Python库之游戏开发"></a>Python库之游戏开发</h2><h3 id="PyGame-简单的游戏开发功能库"><a href="#PyGame-简单的游戏开发功能库" class="headerlink" title="PyGame: 简单的游戏开发功能库"></a>PyGame: 简单的游戏开发功能库</h3><ul>
<li>提供了基于SDL的简单游戏开发功能及实现引擎</li>
<li>理解游戏对外部输入的响应机制及角色构建和交互机制</li>
<li>Python游戏入门最主要的第三方库</li>
</ul>
<h3 id="Panda3D-开源、跨平台的3D渲染和游戏开发库"><a href="#Panda3D-开源、跨平台的3D渲染和游戏开发库" class="headerlink" title="Panda3D: 开源、跨平台的3D渲染和游戏开发库"></a>Panda3D: 开源、跨平台的3D渲染和游戏开发库</h3><ul>
<li>一个3D游戏引擎，提供Python和C++两种接口</li>
<li>支持很多先进特性：法线贴图、光泽贴图、卡通渲染等</li>
<li>由迪士尼和卡尼基梅隆大学共同开发</li>
</ul>
<h3 id="cocos2d-构建2D游戏和图形界面交互式应用的框架"><a href="#cocos2d-构建2D游戏和图形界面交互式应用的框架" class="headerlink" title="cocos2d: 构建2D游戏和图形界面交互式应用的框架"></a>cocos2d: 构建2D游戏和图形界面交互式应用的框架</h3><ul>
<li>提供了基于OpenGL的游戏开发图形渲染功能</li>
<li>支持GPU加速，采用树形结构分层管理游戏对象类型</li>
<li>适用于2D专业级游戏开发</li>
</ul>
<h2 id="Python库之虚拟现实"><a href="#Python库之虚拟现实" class="headerlink" title="Python库之虚拟现实"></a>Python库之虚拟现实</h2><h3 id="VR-Zero-在树莓派上开发VR应用的Python库"><a href="#VR-Zero-在树莓派上开发VR应用的Python库" class="headerlink" title="VR Zero: 在树莓派上开发VR应用的Python库"></a>VR Zero: 在树莓派上开发VR应用的Python库</h3><ul>
<li>提供大量与VR开发相关的功能</li>
<li>针对树莓派的VR开发库，支持设备小型化，配置简单化</li>
<li>非常适合初学者实践VR开发及应用</li>
</ul>
<h3 id="pyovr-Oculus-Rift的Python开发接口"><a href="#pyovr-Oculus-Rift的Python开发接口" class="headerlink" title="pyovr: Oculus Rift的Python开发接口"></a>pyovr: Oculus Rift的Python开发接口</h3><ul>
<li>针对Oculus VR设备的Python开发库</li>
<li>基于成熟的VR设备，提供全套文档，工业级应用设备</li>
<li>Python+虚拟现实领域探索的一种思路</li>
</ul>
<h3 id="Vizard-基于Python的通用VR开发引擎"><a href="#Vizard-基于Python的通用VR开发引擎" class="headerlink" title="Vizard: 基于Python的通用VR开发引擎"></a>Vizard: 基于Python的通用VR开发引擎</h3><ul>
<li>专业的企业级虚拟现实开发引擎</li>
<li>提供详细的官方文档</li>
<li>支持多种主流的VR硬件设备，具有一定通用性</li>
</ul>
<h2 id="Python库之图形艺术"><a href="#Python库之图形艺术" class="headerlink" title="Python库之图形艺术"></a>Python库之图形艺术</h2><h3 id="Quads-迭代的艺术"><a href="#Quads-迭代的艺术" class="headerlink" title="Quads: 迭代的艺术"></a>Quads: 迭代的艺术</h3><ul>
<li>对图片进行四分迭代，形成像素风</li>
<li>可以生成动图或静图图像</li>
<li>简单易用，具有很高展示度</li>
</ul>
<h3 id="ascii-art-ASCII艺术库"><a href="#ascii-art-ASCII艺术库" class="headerlink" title="ascii_art: ASCII艺术库"></a>ascii_art: ASCII艺术库</h3><ul>
<li>将普通图片转为ASCII艺术风格</li>
<li>输出可以是纯文本或彩色文本</li>
<li>可采用图片格式输出</li>
</ul>
<h1 id="实例-玫瑰花绘制"><a href="#实例-玫瑰花绘制" class="headerlink" title="实例: 玫瑰花绘制"></a>实例: 玫瑰花绘制</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># RoseDraw.py</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"><span class="comment"># 定义一个曲线绘制函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DegreeCurve</span>(<span class="params">n, r, d=<span class="number">1</span></span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        t.left(d)</span><br><span class="line">        t.circle(r, <span class="built_in">abs</span>(d))</span><br><span class="line"><span class="comment"># 初始位置设定</span></span><br><span class="line">s = <span class="number">0.2</span> <span class="comment"># size</span></span><br><span class="line">t.setup(<span class="number">450</span>*<span class="number">5</span>*s, <span class="number">750</span>*<span class="number">5</span>*s)</span><br><span class="line">t.pencolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">t.speed(<span class="number">100</span>)</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">0</span>, <span class="number">900</span>*s)</span><br><span class="line">t.pendown()</span><br><span class="line"><span class="comment"># 绘制花朵形状</span></span><br><span class="line">t.begin_fill()</span><br><span class="line">t.circle(<span class="number">200</span>*s,<span class="number">30</span>)</span><br><span class="line">DegreeCurve(<span class="number">60</span>, <span class="number">50</span>*s)</span><br><span class="line">t.circle(<span class="number">200</span>*s,<span class="number">30</span>)</span><br><span class="line">DegreeCurve(<span class="number">4</span>, <span class="number">100</span>*s)</span><br><span class="line">t.circle(<span class="number">200</span>*s,<span class="number">50</span>)</span><br><span class="line">DegreeCurve(<span class="number">50</span>, <span class="number">50</span>*s)</span><br><span class="line">t.circle(<span class="number">350</span>*s,<span class="number">65</span>)</span><br><span class="line">DegreeCurve(<span class="number">40</span>, <span class="number">70</span>*s)</span><br><span class="line">t.circle(<span class="number">150</span>*s,<span class="number">50</span>)</span><br><span class="line">DegreeCurve(<span class="number">20</span>, <span class="number">50</span>*s, -<span class="number">1</span>)</span><br><span class="line">t.circle(<span class="number">400</span>*s,<span class="number">60</span>)</span><br><span class="line">DegreeCurve(<span class="number">18</span>, <span class="number">50</span>*s)</span><br><span class="line">t.fd(<span class="number">250</span>*s)</span><br><span class="line">t.right(<span class="number">150</span>)</span><br><span class="line">t.circle(-<span class="number">500</span>*s,<span class="number">12</span>)</span><br><span class="line">t.left(<span class="number">140</span>)</span><br><span class="line">t.circle(<span class="number">550</span>*s,<span class="number">110</span>)</span><br><span class="line">t.left(<span class="number">27</span>)</span><br><span class="line">t.circle(<span class="number">650</span>*s,<span class="number">100</span>)</span><br><span class="line">t.left(<span class="number">130</span>)</span><br><span class="line">t.circle(-<span class="number">300</span>*s,<span class="number">20</span>)</span><br><span class="line">t.right(<span class="number">123</span>)</span><br><span class="line">t.circle(<span class="number">220</span>*s,<span class="number">57</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"><span class="comment"># 绘制花枝形状</span></span><br><span class="line">t.left(<span class="number">120</span>)</span><br><span class="line">t.fd(<span class="number">280</span>*s)</span><br><span class="line">t.left(<span class="number">115</span>)</span><br><span class="line">t.circle(<span class="number">300</span>*s,<span class="number">33</span>)</span><br><span class="line">t.left(<span class="number">180</span>)</span><br><span class="line">t.circle(-<span class="number">300</span>*s,<span class="number">33</span>)</span><br><span class="line">DegreeCurve(<span class="number">70</span>, <span class="number">225</span>*s, -<span class="number">1</span>)</span><br><span class="line">t.circle(<span class="number">350</span>*s,<span class="number">104</span>)</span><br><span class="line">t.left(<span class="number">90</span>)</span><br><span class="line">t.circle(<span class="number">200</span>*s,<span class="number">105</span>)</span><br><span class="line">t.circle(-<span class="number">500</span>*s,<span class="number">63</span>)</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">170</span>*s,-<span class="number">30</span>*s)</span><br><span class="line">t.pendown()</span><br><span class="line">t.left(<span class="number">160</span>)</span><br><span class="line">DegreeCurve(<span class="number">20</span>, <span class="number">2500</span>*s)</span><br><span class="line">DegreeCurve(<span class="number">220</span>, <span class="number">250</span>*s, -<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 绘制一个绿色叶子</span></span><br><span class="line">t.fillcolor(<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">670</span>*s,-<span class="number">180</span>*s)</span><br><span class="line">t.pendown()</span><br><span class="line">t.right(<span class="number">140</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.circle(<span class="number">300</span>*s,<span class="number">120</span>)</span><br><span class="line">t.left(<span class="number">60</span>)</span><br><span class="line">t.circle(<span class="number">300</span>*s,<span class="number">120</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">180</span>*s,-<span class="number">550</span>*s)</span><br><span class="line">t.pendown()</span><br><span class="line">t.right(<span class="number">85</span>)</span><br><span class="line">t.circle(<span class="number">600</span>*s,<span class="number">40</span>)</span><br><span class="line"><span class="comment"># 绘制另一个绿色叶子</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-<span class="number">150</span>*s,-<span class="number">1000</span>*s)</span><br><span class="line">t.pendown()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.rt(<span class="number">120</span>)</span><br><span class="line">t.circle(<span class="number">300</span>*s,<span class="number">115</span>)</span><br><span class="line">t.left(<span class="number">75</span>)</span><br><span class="line">t.circle(<span class="number">300</span>*s,<span class="number">100</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">430</span>*s,-<span class="number">1070</span>*s)</span><br><span class="line">t.pendown()</span><br><span class="line">t.right(<span class="number">30</span>)</span><br><span class="line">t.circle(-<span class="number">600</span>*s,<span class="number">35</span>)</span><br><span class="line">t.done()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>带你学C带你飞(1)</title>
    <url>/2022/03/23/%E5%B8%A6%E4%BD%A0%E5%AD%A6C%E5%B8%A6%E4%BD%A0%E9%A3%9E-1/</url>
    <content><![CDATA[<p>小甲鱼C语言系列课程笔记，共61个视频，每6个视频总结一次笔记，预计10篇。</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV17s411N78s">https://www.bilibili.com/video/BV17s411N78s</a></p>
</blockquote>
<span id="more"></span>
<h1 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world!"></a>Hello world!</h1><p>每个编程语言的学习，都从Hello world开始！</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello world!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h1><p>类似于Python中的常量，<code>#</code> 表示预处理，也就是说在编译的时候，所有的 <code>URL</code> 都被换成 <code>&quot;http://www.fishc.com&quot;</code> ，后面无法改变它的值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> URL <span class="meta-string">&quot;http://www.fishc.com&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME <span class="meta-string">&quot;鱼C工作室&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BOSS <span class="meta-string">&quot;小甲鱼&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> YEAR 2010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MONTH 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DAY 20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s成立于%d年%d月%d日\n&quot;</span>, NAME, YEAR, MONTH, DAY);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s是%s创立的……\n&quot;</span>, NAME, BOSS);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s的域名是%s\n&quot;</span>, NAME, URL);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><img src="/2022/03/23/%E5%B8%A6%E4%BD%A0%E5%AD%A6C%E5%B8%A6%E4%BD%A0%E9%A3%9E-1/C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="C语言数据类型"></p>
<ul>
<li>整数类型 <code>short int</code> <code>int</code> <code>long int</code> <code>long long int</code></li>
<li>浮点数类型 <code>float</code> <code>double</code></li>
<li>字符类型 <code>char</code></li>
<li>布尔类型 <code>_Bool</code></li>
<li>枚举类型 <code>enum</code></li>
</ul>
<h2 id="sizeof-运算符"><a href="#sizeof-运算符" class="headerlink" title="sizeof 运算符"></a><code>sizeof</code> 运算符</h2><p>sizeof运算符用于获得数据类型或表达式的长度</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sizeof</span>(object)</span><br><span class="line"><span class="keyword">sizeof</span>(type-name)</span><br><span class="line"><span class="keyword">sizeof</span> object</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span> j;</span><br><span class="line">    <span class="keyword">float</span> k;</span><br><span class="line"></span><br><span class="line">    i = <span class="number">123</span>;</span><br><span class="line">    j = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">    k = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size of int is %d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size of i is %d\n&quot;</span>, <span class="keyword">sizeof</span>(i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size of char is %d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size of j is %d\n&quot;</span>, <span class="keyword">sizeof</span> j);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size of float is %d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size of k is %d\n&quot;</span>, <span class="keyword">sizeof</span> k);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="signed-和-unsigned"><a href="#signed-和-unsigned" class="headerlink" title="signed 和 unsigned"></a><code>signed</code> 和 <code>unsigned</code></h2><p>通俗讲，<code>signed</code> 表示带符号，即可以存放负数；<code>unsigned</code> 不带符号，不可存放负数。</p>
<ul>
<li><code>[signed] short [int]</code></li>
<li><code>unsigned short [int]</code></li>
<li><code>[signed] int</code></li>
<li><code>unsigned int</code></li>
<li><code>[signed] long [int]</code></li>
<li><code>unsigned long [int]</code></li>
<li><code>[signed] long long [int]</code></li>
<li><code>unsigned long long [int]</code></li>
</ul>
<p>示例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">short</span> i;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> j;</span><br><span class="line"></span><br><span class="line">    i = <span class="number">-1</span>;</span><br><span class="line">    j = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, j);  <span class="comment">//打印无符号用%u</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>带你学C带你飞(2)</title>
    <url>/2022/03/24/%E5%B8%A6%E4%BD%A0%E5%AD%A6C%E5%B8%A6%E4%BD%A0%E9%A3%9E-2/</url>
    <content><![CDATA[<p>小甲鱼C语言系列课程笔记，共61个视频，每6个视频总结一次笔记，预计10篇。</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV17s411N78s">https://www.bilibili.com/video/BV17s411N78s</a></p>
</blockquote>
<span id="more"></span>
<h1 id="取值范围"><a href="#取值范围" class="headerlink" title="取值范围"></a>取值范围</h1><p>CPU能读懂的最小单位：比特位，<code>bit</code>，<code>b</code><br>内存最小寻址单位：字节，<code>Byte</code>，<code>B</code><br>1B = 8b</p>
<h2 id="符号位"><a href="#符号位" class="headerlink" title="符号位"></a>符号位</h2><p>在<code>signed</code>类型的存储单元中，第一位是符号位。0为正，1为负。</p>
<p>示例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// pow函数计算幂，需要导入&lt;math.h&gt;</span></span><br><span class="line">    <span class="comment">// unsigned int result = pow(2, 32) - 1;</span></span><br><span class="line">    <span class="keyword">int</span> result = <span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>; <span class="comment">// 去掉符号位</span></span><br><span class="line">    <span class="comment">// printf(&quot;result = %u\n&quot;, result);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;result = %d\n&quot;</span>, result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="字符和字符串"><a href="#字符和字符串" class="headerlink" title="字符和字符串"></a>字符和字符串</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test1.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c = %d\n&quot;</span>, a, a); <span class="comment">// ASCII</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test2.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a = <span class="number">70</span>, b = <span class="number">105</span>, c = <span class="number">115</span>, d = <span class="number">104</span>, e = <span class="number">67</span>; <span class="comment">// FishC</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c%c\n&quot;</span>, a, b, c, d, e);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> 变量名[数量]</span><br></pre></td></tr></table></figure>
<p>示例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">5</span>] = &#123;<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;C&#x27;</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><table>
    <tr>
        <td>运算符</td> 
        <td>名称</td> 
        <td>例子</td> 
        <td>结果</td> 
   </tr>
    <tr>
        <td>+</td>     
        <td>加</td>  
        <td>5 + 3</td>     
        <td>8</td>
    </tr>
    <tr>
        <td>-</td>     
        <td>减</td>  
        <td>5 - 3</td>     
        <td>2</td>
    </tr>
    <tr>
        <td>*</td>     
        <td>乘</td>  
        <td>5 * 3</td>     
        <td>15</td>
    </tr>
    <tr>
        <td rowspan="2">/</td>
        <td rowspan="2">除</td>  
        <td>5 / 3</td>     
        <td>1</td>
    </tr>
    <tr>
        <td>5.0 / 3.0</td>     
        <td>1.666667</td>
    </tr>
    <tr>
        <td rowspan="2">%</td>
        <td rowspan="2">取余</td>  
        <td>5 % 3</td>     
        <td>2</td>
    </tr>
    <tr>
        <td>5.0 % 3.0</td>     
        <td>出错</td>
    </tr>
    <tr>
        <td>+</td>     
        <td>正号</td>  
        <td>+5</td>     
        <td>5</td>
    </tr>
    <tr>
        <td>-</td>     
        <td>负号</td>  
        <td>-5</td>     
        <td>-5</td>
    </tr>
</table>

<h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    i = <span class="number">1</span> + <span class="number">2</span>;</span><br><span class="line">    j = <span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span>;</span><br><span class="line">    k = i + j + <span class="number">-1</span> + <span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;j = %d\n&quot;</span>, j);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;k = %d\n&quot;</span>, k);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;整型输出：%d\n&quot;</span>, <span class="number">1</span> + <span class="number">2.0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;浮点型输出：%f\n&quot;</span>, <span class="number">1</span> + <span class="number">2.0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果<br><img src="/2022/03/24/%E5%B8%A6%E4%BD%A0%E5%AD%A6C%E5%B8%A6%E4%BD%A0%E9%A3%9E-2/test2-out.png" alt="运行结果"></p>
<h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;整型输出：%d\n&quot;</span>, <span class="number">1</span> + (<span class="keyword">int</span>)<span class="number">2.0</span>);  <span class="comment">// 将2.0强制转换为int</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;浮点型输出：%f\n&quot;</span>, <span class="number">1</span> + <span class="number">2.0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<p><img src="/2022/03/24/%E5%B8%A6%E4%BD%A0%E5%AD%A6C%E5%B8%A6%E4%BD%A0%E9%A3%9E-2/test3-out.png" alt="运行结果"></p>
<blockquote>
<p>浮点数强转为整型，无四舍五入，直接舍去小数部分。</p>
</blockquote>
<h1 id="关系运算符、逻辑运算符"><a href="#关系运算符、逻辑运算符" class="headerlink" title="关系运算符、逻辑运算符"></a>关系运算符、逻辑运算符</h1><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt; &lt;= &gt; &gt;= == !=</span><br></pre></td></tr></table></figure>
<p>示例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>, b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">1</span> &lt; <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a &gt; b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a &lt;= b + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;b&#x27;</span> &lt;= <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (a = <span class="number">3</span>) &gt; (b = <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：1为真，0为假</p>
<p><img src="/2022/03/24/%E5%B8%A6%E4%BD%A0%E5%AD%A6C%E5%B8%A6%E4%BD%A0%E9%A3%9E-2/test10-1-out.png" alt="运行结果"></p>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>含义</th>
<th>优先级</th>
<th>举例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>!</code></td>
<td>非</td>
<td>高</td>
<td><code>!a</code></td>
<td>如果<code>a</code>为真，则<code>!a</code>为假；如果<code>a</code>为假，则<code>!a</code>为真</td>
</tr>
<tr>
<td><code>&amp;&amp;</code></td>
<td>与</td>
<td>中</td>
<td><code>a &amp;&amp; b</code></td>
<td><code>ab</code>同真，真；任一为假，假</td>
</tr>
<tr>
<td><code>||</code></td>
<td>或</td>
<td>低</td>
<td><code>a || b</code></td>
<td><code>ab</code>同假，假；任一为真，真</td>
</tr>
</tbody></table>
<p>示例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>, b = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a &gt; <span class="number">1</span> &amp;&amp; <span class="number">1</span> &lt; b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a + <span class="number">1</span> || <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, !(a + b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, !<span class="number">0</span> + <span class="number">1</span> &lt; <span class="number">1</span> || !(<span class="number">3</span> + <span class="number">4</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="string">&#x27;a&#x27;</span> - <span class="string">&#x27;b&#x27;</span> &amp;&amp; <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：编写代码时，任何非<code>0</code>都表示真，只有<code>0</code>表示假</p>
<p><img src="/2022/03/24/%E5%B8%A6%E4%BD%A0%E5%AD%A6C%E5%B8%A6%E4%BD%A0%E9%A3%9E-2/test10-2-out.png" alt="运行结果"></p>
<h3 id="短路求值"><a href="#短路求值" class="headerlink" title="短路求值"></a>短路求值</h3><p>又称最小化求值，是一种逻辑运算符的求值策略。<br>只有当第一个运算数的值无法确定逻辑运算的结果时，才对第二个运算数进行求值。</p>
<p>C语言对 与 或 采用短路求值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">3</span>, b = <span class="number">3</span>;</span><br><span class="line">    (a = <span class="number">0</span>) &amp;&amp; (b = <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %d\n&quot;</span>, a, b);</span><br><span class="line">    (a = <span class="number">1</span>) || (b = <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>短路求值，运行结果：<br><code>a = 0</code>赋值已经成立，<code>&amp;&amp;</code>就不再执行<code>b = 5</code><br><code>a = 1</code>赋值已经成立，<code>||</code>就不再执行<code>b = 5</code></p>
<p><img src="/2022/03/24/%E5%B8%A6%E4%BD%A0%E5%AD%A6C%E5%B8%A6%E4%BD%A0%E9%A3%9E-2/test10-3-out.png" alt="运行结果"></p>
<h1 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a><code>if</code>语句</h1><h2 id="单分支"><a href="#单分支" class="headerlink" title="单分支"></a>单分支</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;您老贵庚啊：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);  <span class="comment">// 获取输入</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">18</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;进门左拐!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/24/%E5%B8%A6%E4%BD%A0%E5%AD%A6C%E5%B8%A6%E4%BD%A0%E9%A3%9E-2/test11-1-out.png" alt="运行结果"></p>
<h2 id="双分支"><a href="#双分支" class="headerlink" title="双分支"></a>双分支</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;您老贵庚啊：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">18</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;进门左拐！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;慢走不送！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/24/%E5%B8%A6%E4%BD%A0%E5%AD%A6C%E5%B8%A6%E4%BD%A0%E9%A3%9E-2/test11-2-out.png" alt="运行结果"></p>
<h2 id="多分支"><a href="#多分支" class="headerlink" title="多分支"></a>多分支</h2><p>课堂实践：</p>
<p><img src="/2022/03/24/%E5%B8%A6%E4%BD%A0%E5%AD%A6C%E5%B8%A6%E4%BD%A0%E9%A3%9E-2/test11-3-in.png" alt="运行结果"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入分数：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">90</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;分数等级为：A\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (i &gt;= <span class="number">80</span> &amp;&amp; i &lt; <span class="number">90</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;分数等级为：B\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (i &gt;= <span class="number">70</span> &amp;&amp; i &lt; <span class="number">80</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;分数等级为：C\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (i &gt;= <span class="number">60</span> &amp;&amp; i &lt; <span class="number">70</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;分数等级为：D\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;分数等级为：E\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/24/%E5%B8%A6%E4%BD%A0%E5%AD%A6C%E5%B8%A6%E4%BD%A0%E9%A3%9E-2/test11-3-out.png" alt="运行结果"></p>
<h1 id="switch语句和分支嵌套"><a href="#switch语句和分支嵌套" class="headerlink" title="switch语句和分支嵌套"></a><code>switch</code>语句和分支嵌套</h1><h2 id="switch语句结构"><a href="#switch语句结构" class="headerlink" title="switch语句结构"></a><code>switch</code>语句结构</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">1</span>: 语句<span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">2</span>: 语句<span class="number">2</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">3</span>: 语句<span class="number">3</span>; <span class="keyword">break</span>;</span><br><span class="line">    ……</span><br><span class="line">    <span class="keyword">case</span> 常量表达式n: 语句n; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: 语句n+<span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>示例：评级反推成绩</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过评级反推分数范围，使用switch</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入评级：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;c);</span><br><span class="line">    <span class="keyword">switch</span> (c)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;90+\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;80-90\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;70-80\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;60-70\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;60-\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入错误\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分支嵌套"><a href="#分支嵌套" class="headerlink" title="分支嵌套"></a>分支嵌套</h2><p>根据流程图写代码：<br><img src="/2022/03/24/%E5%B8%A6%E4%BD%A0%E5%AD%A6C%E5%B8%A6%E4%BD%A0%E9%A3%9E-2/%E6%B5%81%E7%A8%8B%E5%9B%BE1.png" alt="流程图"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据流程图写代码</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入a和b的值：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="keyword">if</span> (a != b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &gt; %d\n&quot;</span>, a, b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &lt; %d\n&quot;</span>, a, b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d = %d\n&quot;</span>, a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="bug：悬挂else"><a href="#bug：悬挂else" class="headerlink" title="bug：悬挂else"></a>bug：悬挂else</h2><p><code>else</code>始终与最近的<code>if</code>匹配，不考虑缩进问题。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//错误代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> isRain, isFree;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;是否有空？(Y/N)&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;isFree);</span><br><span class="line"></span><br><span class="line">    getchar(); <span class="comment">//过滤回车</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;是否下雨？(Y/N)&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;isRain);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isFree == <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isRain == <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;记得带伞哦！\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>  <span class="comment">//悬挂else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;女神没空！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>正确代码：加上大括号，养成好习惯。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> isRain, isFree;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;是否有空？(Y/N)&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;isFree);</span><br><span class="line"></span><br><span class="line">    getchar(); <span class="comment">//过滤回车</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;是否下雨？(Y/N)&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;isRain);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isFree == <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (isRain == <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;记得带伞哦！\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//悬挂else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;女神没空！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="bug：等号问题"><a href="#bug：等号问题" class="headerlink" title="bug：等号问题"></a>bug：等号问题</h2><p>赋值用<code>=</code>，判断是否相等用<code>==</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正确代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> hasBF;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;小花是否有男朋友？(Y/N)&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;hasBF);</span><br><span class="line">    <span class="keyword">if</span> (hasBF == <span class="string">&#x27;Y&#x27;</span>)  <span class="comment">// 逻辑用==，赋值用=</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;那……祝福你们咯！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;那我们在一起吧！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>带你学C带你飞(3)</title>
    <url>/2022/03/25/%E5%B8%A6%E4%BD%A0%E5%AD%A6C%E5%B8%A6%E4%BD%A0%E9%A3%9E-3/</url>
    <content><![CDATA[<p>小甲鱼C语言系列课程笔记，共61个视频，每6个视频总结一次笔记，预计10篇。</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV17s411N78s">https://www.bilibili.com/video/BV17s411N78s</a></p>
</blockquote>
<span id="more"></span>

<h1 id="while语句和dowhile语句"><a href="#while语句和dowhile语句" class="headerlink" title="while语句和dowhile语句"></a><code>while</code>语句和<code>dowhile</code>语句</h1><h2 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a><code>while</code>语句</h2><h3 id="计算1-2-3-…-100"><a href="#计算1-2-3-…-100" class="headerlink" title="计算1+2+3+…+100"></a>计算1+2+3+…+100</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = sum + i;</span><br><span class="line">        i = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1+2+3+...+100 = %d\n&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="统计从键盘输入的一行英文句子的字符个数"><a href="#统计从键盘输入的一行英文句子的字符个数" class="headerlink" title="统计从键盘输入的一行英文句子的字符个数"></a>统计从键盘输入的一行英文句子的字符个数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please enter:&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        count = count + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;结果是%d\n&quot;</span>, count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="dowhile语句"><a href="#dowhile语句" class="headerlink" title="dowhile语句"></a><code>dowhile</code>语句</h2><p>注意格式，<code>while</code>后面有分号</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">    循环体</span><br><span class="line"><span class="keyword">while</span> (表达式);</span><br></pre></td></tr></table></figure>

<h1 id="for语句和循环嵌套"><a href="#for语句和循环嵌套" class="headerlink" title="for语句和循环嵌套"></a><code>for</code>语句和循环嵌套</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (表达式<span class="number">1</span>; 表达式<span class="number">2</span>; 表达式<span class="number">3</span>)</span><br><span class="line">    循环体</span><br></pre></td></tr></table></figure>
<ul>
<li>表达式1：循环初始化表达式</li>
<li>表达式2：循环条件表达式</li>
<li>表达式3：循环调整表达式</li>
</ul>
<h2 id="打印10次-I-love-fishc-com"><a href="#打印10次-I-love-fishc-com" class="headerlink" title="打印10次 I love fishc.com"></a>打印10次 <code>I love fishc.com</code></h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印10次I love fishc.com</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I love fishc.com\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="判断一个数是否为素数"><a href="#判断一个数是否为素数" class="headerlink" title="判断一个数是否为素数"></a>判断一个数是否为素数</h2><blockquote>
<p>（小甲鱼）测试从 <code>2</code> 到 <code>num / 2</code> 所有整数是否能被整除，如果没有出现能被整除的整数，则 <code>num</code> 为素数。</p>
<p>（百度）测试从 <code>2</code> 到 <code>sqrt(n)</code> 所有整数是否能被整除，如果没有出现能被整除的整数，则 <code>num</code> 为素数。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">_Bool</span> isPrime = <span class="number">1</span>; <span class="comment">//布尔值，1是质数，0不是质数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please enter a number(&gt;=2): &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(num) + <span class="number">1</span>; i++) <span class="comment">//从2到sqrt(n)之间是否有整数能被整除，如果有则不是质数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            isPrime = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isPrime)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d is a prime number.\n&quot;</span>, num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d is not a prime number.\n&quot;</span>, num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="灵活修改"><a href="#灵活修改" class="headerlink" title="灵活修改"></a>灵活修改</h2><p>for语句的表达式可以根据需要省略，但是 <code>;</code> 必须留下。</p>
<h2 id="C99新标准"><a href="#C99新标准" class="headerlink" title="C99新标准"></a>C99新标准</h2><p>允许在for语句表达式1中，定义变量（如上述程序）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">等价于</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++)</span><br></pre></td></tr></table></figure>

<h2 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;i = %d, j = %d\n&quot;</span>, i, j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<p><img src="/2022/03/25/%E5%B8%A6%E4%BD%A0%E5%AD%A6C%E5%B8%A6%E4%BD%A0%E9%A3%9E-3/test14-3-out.png"></p>
<h3 id="打印99乘法表"><a href="#打印99乘法表" class="headerlink" title="打印99乘法表"></a>打印99乘法表</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="number">9</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= j; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%dx%d=%d\t&quot;</span>, i, j, i * j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：<br><img src="/2022/03/25/%E5%B8%A6%E4%BD%A0%E5%AD%A6C%E5%B8%A6%E4%BD%A0%E9%A3%9E-3/test14-4-out.png"></p>
<h1 id="break语句和continue语句"><a href="#break语句和continue语句" class="headerlink" title="break语句和continue语句"></a><code>break</code>语句和<code>continue</code>语句</h1><h2 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a><code>break</code>语句</h2><p>使用<code>break</code>语句可以跳出循环，减少运算次数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> i, num;</span><br><span class="line">    <span class="built_in">_Bool</span> flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;num);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; num / <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld是一个素数\n&quot;</span>, num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld不是一个素数\n&quot;</span>, num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i = %lld\n&quot;</span>, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>break</code>语句只能<strong>跳出</strong>它所在的那一层循环，不能跳出外层循环。</p>
</blockquote>
<h2 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a><code>continue</code>语句</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 凡是大写字母C都当做看不见</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<p><img src="/2022/03/25/%E5%B8%A6%E4%BD%A0%E5%AD%A6C%E5%B8%A6%E4%BD%A0%E9%A3%9E-3/test15-2-out.png"></p>
<blockquote>
<p><code>continue</code>语句只能<strong>跳过一次</strong>它所在的那一层循环，不能跳过外层循环。</p>
</blockquote>
<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>将如下程序改成等价的<code>while</code>语句形式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改后：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>问题</strong>出在：<code>while</code>循环执行完<code>continue</code>后，不会再执行<code>i++</code>，而是直接再次循环，因此形成死循环。</p>
<h1 id="拾遗"><a href="#拾遗" class="headerlink" title="拾遗"></a>拾遗</h1><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>赋值运算符的左边必须是<code>lvalue</code>，变量名就是<code>lvalue</code>。</p>
<h3 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h3><table>
<thead>
<tr>
<th>赋值</th>
<th>简写</th>
</tr>
</thead>
<tbody><tr>
<td><code>a = a + 1</code></td>
<td><code>a += 1</code></td>
</tr>
<tr>
<td><code>a = a - 2</code></td>
<td><code>a -= 2</code></td>
</tr>
<tr>
<td><code>a = a * 3</code></td>
<td><code>a *= 3</code></td>
</tr>
<tr>
<td><code>a = a / 4</code></td>
<td><code>a /= 4</code></td>
</tr>
<tr>
<td><code>a = a % 5</code></td>
<td><code>a %= 5</code></td>
</tr>
</tbody></table>
<h3 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h3><p><code>i = i + 1</code>  =&gt;  <code>i++</code> <code>++i</code><br><code>i = i - 1</code>  =&gt;  <code>i--</code> <code>--i</code></p>
<p><code>i++</code>和<code>++i</code>的区别：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">5</span>, j;</span><br><span class="line">    j = ++i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i = %d, j = %d\n&quot;</span>, i, j);</span><br><span class="line"></span><br><span class="line">    i = <span class="number">5</span>;</span><br><span class="line">    j = i++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i = %d, j = %d\n&quot;</span>, i, j);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="/2022/03/25/%E5%B8%A6%E4%BD%A0%E5%AD%A6C%E5%B8%A6%E4%BD%A0%E9%A3%9E-3/test16-1-out.png"></p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>庆祝中国共产党成立100周年</title>
    <url>/2021/07/01/%E5%BA%86%E7%A5%9D%E4%B8%AD%E5%9B%BD%E5%85%B1%E4%BA%A7%E5%85%9A%E6%88%90%E7%AB%8B100%E5%91%A8%E5%B9%B4/</url>
    <content><![CDATA[<p>中国人民是崇尚正义、不畏强暴的人民，中华民族是具有强烈民族自豪感和自信心的民族。中国人民从来没有欺负、压迫、奴役过其他国家人民，过去没有，现在没有，将来也不会有。同时，中国人民也绝不允许任何外来势力欺负、压迫、奴役我们，谁妄想这样干，必将在14亿多中国人民用血肉筑成的钢铁长城面前碰得头破血流！</p>
<p>​                                                                                                        ——习近平</p>
<span id="more"></span>

<h1 id="Turtle绘制党旗"><a href="#Turtle绘制党旗" class="headerlink" title="Turtle绘制党旗"></a>Turtle绘制党旗</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line">turtle.fillcolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">turtle.up()</span><br><span class="line">turtle.goto(-<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">turtle.down()</span><br><span class="line">turtle.begin_fill()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    turtle.forward(<span class="number">600</span>)</span><br><span class="line">    turtle.right(<span class="number">90</span>)</span><br><span class="line">    turtle.forward(<span class="number">400</span>)</span><br><span class="line">    turtle.right(<span class="number">90</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line">turtle.fillcolor(<span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">turtle.pencolor(<span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">turtle.up()</span><br><span class="line">turtle.goto(<span class="number">10</span>, <span class="number">220</span>)</span><br><span class="line">turtle.seth(<span class="number">225</span>)</span><br><span class="line">turtle.down()</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.fd(<span class="number">125</span>)</span><br><span class="line">turtle.right(<span class="number">90</span>)</span><br><span class="line">turtle.fd(<span class="number">50</span>)</span><br><span class="line">turtle.right(<span class="number">90</span>)</span><br><span class="line">turtle.fd(<span class="number">100</span>)</span><br><span class="line">turtle.right(<span class="number">90</span>)</span><br><span class="line">turtle.circle(<span class="number">25</span>, <span class="number">90</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line">turtle.up()</span><br><span class="line">turtle.goto(-<span class="number">40</span>, <span class="number">190</span>)</span><br><span class="line">turtle.seth(-<span class="number">45</span>)</span><br><span class="line">turtle.down()</span><br><span class="line">turtle.begin_fill()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    turtle.forward(<span class="number">200</span>)</span><br><span class="line">    turtle.right(<span class="number">90</span>)</span><br><span class="line">    turtle.forward(<span class="number">30</span>)</span><br><span class="line">    turtle.right(<span class="number">90</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line">turtle.up()</span><br><span class="line">turtle.goto(-<span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">turtle.seth(-<span class="number">50</span>)</span><br><span class="line">turtle.down()</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.circle(<span class="number">100</span>, <span class="number">180</span>)</span><br><span class="line">turtle.fd(<span class="number">20</span>)</span><br><span class="line">turtle.right(<span class="number">157</span>)</span><br><span class="line">turtle.circle(-<span class="number">115</span>, <span class="number">190</span>)</span><br><span class="line">turtle.left(<span class="number">90</span>)</span><br><span class="line">turtle.fd(<span class="number">20</span>)</span><br><span class="line">turtle.right(<span class="number">90</span>)</span><br><span class="line">turtle.fd(<span class="number">20</span>)</span><br><span class="line">turtle.right(<span class="number">90</span>)</span><br><span class="line">turtle.fd(<span class="number">20</span>)</span><br><span class="line">turtle.left(<span class="number">80</span>)</span><br><span class="line">turtle.fd(<span class="number">30</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line">turtle.up()</span><br><span class="line">turtle.goto(-<span class="number">90</span>, <span class="number">50</span>)</span><br><span class="line">turtle.down()</span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.circle(<span class="number">20</span>)</span><br><span class="line">turtle.end_fill()</span><br><span class="line">turtle.hideturtle()</span><br><span class="line"></span><br><span class="line">turtle.mainloop()</span><br></pre></td></tr></table></figure>

<img src="/2021/07/01/%E5%BA%86%E7%A5%9D%E4%B8%AD%E5%9B%BD%E5%85%B1%E4%BA%A7%E5%85%9A%E6%88%90%E7%AB%8B100%E5%91%A8%E5%B9%B4/%E5%85%9A%E6%97%97.png" class>

<h1 id="总书记讲话词云"><a href="#总书记讲话词云" class="headerlink" title="总书记讲话词云"></a>总书记讲话词云</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> wordcloud</span><br><span class="line"><span class="keyword">from</span> imageio <span class="keyword">import</span> imread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_color_func</span>(<span class="params">word=<span class="literal">None</span>, font_size=<span class="literal">None</span>, position=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                      orientation=<span class="literal">None</span>, font_path=<span class="literal">None</span>, random_state=<span class="literal">None</span></span>):</span></span><br><span class="line">    h = randint(<span class="number">0</span>, <span class="number">60</span>)</span><br><span class="line">    s = <span class="built_in">int</span>(<span class="number">100.0</span> * <span class="number">255.0</span> / <span class="number">255.0</span>)</span><br><span class="line">    l = <span class="built_in">int</span>(<span class="number">50.0</span> * <span class="number">255.0</span> / <span class="number">255.0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hsl(&#123;&#125;, &#123;&#125;%, &#123;&#125;%)&quot;</span>.<span class="built_in">format</span>(h, s, l)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mask = imread(<span class="string">&quot;党徽.png&quot;</span>)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;讲话.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">t = f.read()</span><br><span class="line">f.close()</span><br><span class="line">ls = jieba.lcut(t)</span><br><span class="line">txt = <span class="string">&quot; &quot;</span>.join(ls)</span><br><span class="line">w = wordcloud.WordCloud(mask=mask,</span><br><span class="line">                        font_path=<span class="string">&quot;PingFang.ttc&quot;</span>,</span><br><span class="line">                        width=<span class="number">562</span>,</span><br><span class="line">                        height=<span class="number">562</span>,</span><br><span class="line">                        background_color=<span class="string">&quot;white&quot;</span>,</span><br><span class="line">                        color_func=random_color_func,</span><br><span class="line">                        collocations=<span class="literal">False</span>,</span><br><span class="line">                        scale=<span class="number">8</span>)</span><br><span class="line">w.generate(txt)</span><br><span class="line">w.to_file(<span class="string">&quot;讲话词云.png&quot;</span>)</span><br></pre></td></tr></table></figure>

<img src="/2021/07/01/%E5%BA%86%E7%A5%9D%E4%B8%AD%E5%9B%BD%E5%85%B1%E4%BA%A7%E5%85%9A%E6%88%90%E7%AB%8B100%E5%91%A8%E5%B9%B4/%E8%AE%B2%E8%AF%9D%E8%AF%8D%E4%BA%91.png" class>

<hr>
<blockquote>
<p>辅助文件</p>
<p>字体：<a href="https://image-1253398535.cos.ap-beijing.myqcloud.com/%E5%BB%BA%E5%85%9A100%E5%B9%B4%E5%BA%86/PingFang.ttc">PingFang.ttc</a></p>
<p>轮廓图：<a href="https://image-1253398535.cos.ap-beijing.myqcloud.com/%E5%BB%BA%E5%85%9A100%E5%B9%B4%E5%BA%86/dang.png">党徽.png</a></p>
<p>讲话全文：<a href="https://image-1253398535.cos.ap-beijing.myqcloud.com/%E5%BB%BA%E5%85%9A100%E5%B9%B4%E5%BA%86/%E8%AE%B2%E8%AF%9D.txt">讲话.txt</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>拥抱一下变化</title>
    <url>/2023/10/28/%E6%8B%A5%E6%8A%B1%E4%B8%80%E4%B8%8B%E5%8F%98%E5%8C%96/</url>
    <content><![CDATA[<p><img src="/2023/10/28/%E6%8B%A5%E6%8A%B1%E4%B8%80%E4%B8%8B%E5%8F%98%E5%8C%96/py311.png" alt="拥抱一下变化"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>无监督学习的聚类算法及应用</title>
    <url>/2019/04/18/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h2 id="K-means算法原理"><a href="#K-means算法原理" class="headerlink" title="K-means算法原理"></a>K-means算法原理</h2><p>K-means聚类算法以k为参数，把n个对象分为k个簇，使簇内具有较高的相似度，而簇间的相似度较低。</p>
<ol>
<li>随机选择k个点作为初始的聚类中心。</li>
<li>对于剩下的点，根据其与聚类中心的距离，将其归入最近的簇。</li>
<li>对每个簇，计算所有点的均值作为新的聚类中心。</li>
<li>重复2、3直到聚类中心不再改变。</li>
</ol>
<span id="more"></span>

<h2 id="K-means算法应用"><a href="#K-means算法应用" class="headerlink" title="K-means算法应用"></a>K-means算法应用</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>通过聚类，了解1999年各个省份的消费水平在国内的情况。</p>
<h3 id="使用算法"><a href="#使用算法" class="headerlink" title="使用算法"></a>使用算法</h3><p>K-means聚类算法</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><ol>
<li>建立工程，导入sklearn相关包</li>
<li>加载数据，创建K-means算法实例，并进行训练，获得标签</li>
<li>输出标签，查看结果</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created on Thu Apr 18 22:59:44 2019</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: Jiaxi Wang</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadData</span>(<span class="params">filePath</span>):</span></span><br><span class="line">    fr = <span class="built_in">open</span>(filePath,<span class="string">&#x27;r+&#x27;</span>)</span><br><span class="line">    lines = fr.readlines()</span><br><span class="line">    retData = []</span><br><span class="line">    retCityName = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        items = line.strip().split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        retCityName.append(items[<span class="number">0</span>])</span><br><span class="line">        retData.append([<span class="built_in">float</span>(items[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(items))])</span><br><span class="line">    <span class="keyword">return</span> retData,retCityName</span><br><span class="line"> </span><br><span class="line">     </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data,cityName = loadData(<span class="string">&#x27;city.txt&#x27;</span>)</span><br><span class="line">    km = KMeans(n_clusters=<span class="number">4</span>)</span><br><span class="line">    label = km.fit_predict(data)</span><br><span class="line">    expenses = np.<span class="built_in">sum</span>(km.cluster_centers_,axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#print(expenses)</span></span><br><span class="line">    CityCluster = [[],[],[],[]]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cityName)):</span><br><span class="line">        CityCluster[label[i]].append(cityName[i])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(CityCluster)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Expenses:%.2f&quot;</span> % expenses[i])</span><br><span class="line">        <span class="built_in">print</span>(CityCluster[i])</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>聚成3类<br><img src="/2019/04/18/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95%E5%8F%8A%E5%BA%94%E7%94%A8/city3.jpg"></p>
<p>聚成4类<br><img src="/2019/04/18/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95%E5%8F%8A%E5%BA%94%E7%94%A8/city4.jpg"></p>
<h3 id="拓展-amp-改进"><a href="#拓展-amp-改进" class="headerlink" title="拓展&amp;改进"></a>拓展&amp;改进</h3><p>计算两条数据的相似性时，sklearn的K-means默认使用的时欧氏距离。该算法并没有设定<strong>更改距离计算方法</strong>的参数。</p>
<h2 id="DBSCAN算法原理"><a href="#DBSCAN算法原理" class="headerlink" title="DBSCAN算法原理"></a>DBSCAN算法原理</h2><p>DBSCAN算法是一种基于密度的聚类算法：</p>
<ul>
<li>聚类的时候不需要预先指定簇的个数</li>
<li>最终的簇的个数不定</li>
</ul>
<p>DBSCAN算法将数据点分为3类：</p>
<ol>
<li>核心店：在半径Eps内含有超过MinPts数目的点。</li>
<li>边界点：在半径Eps内点的数量少于MinPts，但是落在核心点的邻域内。</li>
<li>噪音点：既不是核心点也不是边界点的点。</li>
</ol>
<h2 id="DBSCAN密度聚类算法流程"><a href="#DBSCAN密度聚类算法流程" class="headerlink" title="DBSCAN密度聚类算法流程"></a>DBSCAN密度聚类算法流程</h2><ul>
<li>将所有点标记为核心点、边界点或噪声点</li>
<li>删除噪声点</li>
<li>为距离在Eps之内的所有核心点之间赋予一条边</li>
<li>每组连通的核心点形成一个簇</li>
<li>将每个边界点指派到一个与之关联的核心点的簇中（哪一个核心点的半径范围之内）</li>
</ul>
<h2 id="DBSCAN算法应用"><a href="#DBSCAN算法应用" class="headerlink" title="DBSCAN算法应用"></a>DBSCAN算法应用</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>现有某大学校园网的日志数据，290条大学生的校园网使用情况数据，数据包括用户ID，设备MAC地址，IP地址，开始上网时间，停止上网时间，上网时长，校园网套餐等。利用已有数据，分析学生的上网模式。</p>
<h3 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h3><p>通过DBSCAN聚类，分析学生<strong>上网时间</strong>和<strong>上网时长</strong>的模式。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol>
<li>建立工程，引入相关包</li>
<li>加载数据，预处理数据</li>
<li>上网时长的聚类分析、上网时间的聚类分析</li>
<li>分析结果</li>
</ol>
<h3 id="实现过程-1"><a href="#实现过程-1" class="headerlink" title="实现过程"></a>实现过程</h3><ol>
<li>建立工程，导入sklearn相关包</li>
<li>读入数据并进行处理</li>
<li>上网时间/上网时长聚类，创建DBSCAN算法实例，并进行训练，获得标签</li>
<li>输出标签，查看结果</li>
<li>画直方图，分析实验结果</li>
<li>数据分布 vs 聚类</li>
</ol>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created on Thu Apr 18 23:35:39 2019</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: Jiaxi Wang</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.cluster <span class="keyword">as</span> skc</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">mac2id=<span class="built_in">dict</span>()</span><br><span class="line">onlinetimes=[]</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;TestData.txt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    mac=line.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">2</span>]</span><br><span class="line">    onlinetime=<span class="built_in">int</span>(line.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">6</span>])</span><br><span class="line">    starttime=<span class="built_in">int</span>(line.split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">4</span>].split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> mac <span class="keyword">not</span> <span class="keyword">in</span> mac2id:</span><br><span class="line">        mac2id[mac]=<span class="built_in">len</span>(onlinetimes)</span><br><span class="line">        onlinetimes.append((starttime,onlinetime))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        onlinetimes[mac2id[mac]]=[(starttime,onlinetime)]</span><br><span class="line">real_X=np.array(onlinetimes).reshape((-<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"> </span><br><span class="line">X=real_X[:,<span class="number">0</span>:<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line">db=skc.DBSCAN(eps=<span class="number">0.01</span>,min_samples=<span class="number">20</span>).fit(X)</span><br><span class="line">labels = db.labels_</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Labels:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(labels)</span><br><span class="line">raito=<span class="built_in">len</span>(labels[labels[:] == -<span class="number">1</span>]) / <span class="built_in">len</span>(labels)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Noise raito:&#x27;</span>,<span class="built_in">format</span>(raito, <span class="string">&#x27;.2%&#x27;</span>))</span><br><span class="line"> </span><br><span class="line">n_clusters_ = <span class="built_in">len</span>(<span class="built_in">set</span>(labels)) - (<span class="number">1</span> <span class="keyword">if</span> -<span class="number">1</span> <span class="keyword">in</span> labels <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Estimated number of clusters: %d&#x27;</span> % n_clusters_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Silhouette Coefficient: %0.3f&quot;</span>% metrics.silhouette_score(X, labels))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n_clusters_):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Cluster &#x27;</span>,i,<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(X[labels == i].flatten()))</span><br><span class="line">     </span><br><span class="line">plt.hist(X,<span class="number">24</span>)</span><br></pre></td></tr></table></figure>

<h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h3><p><img src="/2019/04/18/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95%E5%8F%8A%E5%BA%94%E7%94%A8/ssn.jpg"><br><img src="/2019/04/18/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95%E5%8F%8A%E5%BA%94%E7%94%A8/ssn.png"></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>无监督学习的降维算法及应用</title>
    <url>/2019/04/24/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E7%9A%84%E9%99%8D%E7%BB%B4%E7%AE%97%E6%B3%95%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="PCA算法及应用"><a href="#PCA算法及应用" class="headerlink" title="PCA算法及应用"></a>PCA算法及应用</h1><h2 id="主成分分析（PCA）"><a href="#主成分分析（PCA）" class="headerlink" title="主成分分析（PCA）"></a>主成分分析（PCA）</h2><p>主成分分析（Principal Component Analysis,PCA）是最常用的一种降维方法，通常用于高位数据集的探索与可视化，还可以用作数据压缩和预处理等。</p>
<p>PCA可以吧具有相关性的高位变量合称为线性无关的低维变量，称为主成分。主成分能够尽可能保留原始数据的信息。</p>
<span id="more"></span>

<h2 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h2><h3 id="方差"><a href="#方差" class="headerlink" title="方差"></a>方差</h3><p>方差是各个样本和样本均值的差和平方和的均值，用来度量一组数据的分散程度。</p>
<p><a href="https://www.codecogs.com/eqnedit.php?latex=s^{2}=\frac{\sum_{i=1}^{n}(x_{i}-x)^{2}}{n-1}" target="_blank"><img src="https://latex.codecogs.com/gif.latex?s^{2}=\frac{\sum_{i=1}^{n}(x_{i}-x)^{2}}{n-1}" title="s^{2}=\frac{\sum_{i=1}^{n}(x_{i}-x)^{2}}{n-1}"></a></p>
<h3 id="协方差"><a href="#协方差" class="headerlink" title="协方差"></a>协方差</h3><p>协方差用于度量两个变量之间的线性相关程度，若两个变量的协方差为0，则可认为二者线性无关。协方差矩阵则是由变量的协方差值构成的矩阵（对称阵）。</p>
<p><a href="https://www.codecogs.com/eqnedit.php?latex=Cov(X,Y)=\frac{\sum_{i=1}^{n}(X_{i}-\overline{X})(Y_{i}-\overline{Y})}{n-1}" target="_blank"><img src="https://latex.codecogs.com/gif.latex?Cov(X,Y)=\frac{\sum_{i=1}^{n}(X_{i}-\overline{X})(Y_{i}-\overline{Y})}{n-1}" title="Cov(X,Y)=\frac{\sum_{i=1}^{n}(X_{i}-\overline{X})(Y_{i}-\overline{Y})}{n-1}"></a></p>
<h3 id="特征向量"><a href="#特征向量" class="headerlink" title="特征向量"></a>特征向量</h3><p>矩阵的特征向量是描述数据集结构的非零向量，并满足如下公式</p>
<p><a href="https://www.codecogs.com/eqnedit.php?latex=A\overrightarrow{v}=\lambda&space;\overrightarrow{v}" target="_blank"><img src="https://latex.codecogs.com/gif.latex?A\overrightarrow{v}=\lambda&space;\overrightarrow{v}" title="A\overrightarrow{v}=\lambda \overrightarrow{v}"></a></p>
<p>A是方阵，v是特征向量，λ是特征值</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>原理：矩阵的主成分就是其协方差矩阵对应的特征向量，按照对应的特征值大小进行排序，最大的特征值就是第一主成分，其次是第二主成分，以此类推。</p>
<h2 id="PCA算法应用"><a href="#PCA算法应用" class="headerlink" title="PCA算法应用"></a>PCA算法应用</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>PCA实现高维数据可视化<br>已知鸢尾花数据是4维的，共三类样本。使用PCA实现对鸢尾花数据进行降维，实现在二维平面上的可视化。</p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><ol>
<li>建立工程，导入sklearn相关包</li>
<li>加载数据并进行降维</li>
<li>按类别对降维后的数据进行保存</li>
<li>降维后数据点的可视化</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created on Tue Apr 23 15:12:43 2019</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: Jiaxi Wang</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"></span><br><span class="line">data = load_iris()</span><br><span class="line">y = data.target</span><br><span class="line">x = data.data</span><br><span class="line">pca = PCA(n_components = <span class="number">2</span>)</span><br><span class="line">reduced_X = pca.fit_transform(X)</span><br><span class="line"></span><br><span class="line">red_x, red_y = [], []</span><br><span class="line">blue_x, blue_y = [], []</span><br><span class="line">green_x, green_y = [], []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(reduced_X)):</span><br><span class="line">    <span class="keyword">if</span> y[i] == <span class="number">0</span>:</span><br><span class="line">        red_x.append(reduced_X[i][<span class="number">0</span>])</span><br><span class="line">        red_y.append(reduced_X[i][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">elif</span> y[i] == <span class="number">1</span>:</span><br><span class="line">        blue_x.append(reduced_X[i][<span class="number">0</span>])</span><br><span class="line">        blue_y.append(reduced_X[i][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        green_x.append(reduced_X[i][<span class="number">0</span>])</span><br><span class="line">        green_y.append(reduced_X[i][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">plt.scatter(red_x, red_y, c = <span class="string">&#x27;r&#x27;</span>, marker = <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.scatter(blue_x, blue_y, c = <span class="string">&#x27;b&#x27;</span>, marker = <span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">plt.scatter(green_x, green_y, c = <span class="string">&#x27;g&#x27;</span>, marker = <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="/2019/04/24/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E7%9A%84%E9%99%8D%E7%BB%B4%E7%AE%97%E6%B3%95%E5%8F%8A%E5%BA%94%E7%94%A8/flower_pca.png"></p>
<h3 id="拓展-amp-改进"><a href="#拓展-amp-改进" class="headerlink" title="拓展&amp;改进"></a>拓展&amp;改进</h3><h1 id="NMF算法及实例"><a href="#NMF算法及实例" class="headerlink" title="NMF算法及实例"></a>NMF算法及实例</h1><h2 id="非负矩阵分解（NMF）"><a href="#非负矩阵分解（NMF）" class="headerlink" title="非负矩阵分解（NMF）"></a>非负矩阵分解（NMF）</h2><p>非负矩阵分解（Non-negative Matrix Factorization，NMF）实在矩阵中所有元素均为非负数约束条件之下的矩阵分解方法。</p>
<p>基本思想：给定一个非负矩阵V，NMF能够找到一个非负矩阵W和一个非负矩阵H，使得矩阵W和H的乘积近似等于矩阵V中的值。</p>
<p><a href="https://www.codecogs.com/eqnedit.php?latex=V_{n*m}=W_{n*k}*H_{k*m}" target="_blank"><img src="https://latex.codecogs.com/gif.latex?V_{n*m}=W_{n*k}*H_{k*m}" title="V_{n*m}=W_{n*k}*H_{k*m}"></a></p>
<ul>
<li>W矩阵：基础图像矩阵，相当于从原矩阵V中抽取出来的特征。</li>
<li>矩阵：系数矩阵。</li>
<li>NMF能够广泛应用于图像分析、文本挖掘和语音处理等领域。</li>
</ul>
<p>矩阵分解优化目标：最小化W矩阵H矩阵的乘积和原始矩阵之间的差别。</p>
<p><a href="https://www.codecogs.com/eqnedit.php?latex=argmin\frac{1}{2}\left&space;\|&space;X-WH&space;\right&space;\|^{2}=\frac{1}{2}\sum_{i,j}^{&space;}&space;(X_{ij}-WH_{ij})^{2}" target="_blank"><img src="https://latex.codecogs.com/gif.latex?argmin\frac{1}{2}\left&space;\|&space;X-WH&space;\right&space;\|^{2}=\frac{1}{2}\sum_{i,j}^{&space;}&space;(X_{ij}-WH_{ij})^{2}" title="argmin\frac{1}{2}\left \| X-WH \right \|^{2}=\frac{1}{2}\sum_{i,j}^{ } (X_{ij}-WH_{ij})^{2}"></a></p>
<p>基于KL的优化目标，损失函数如下：</p>
<p><a href="https://www.codecogs.com/eqnedit.php?latex=argminJ(WH)=\sum_{ij}^{&space;}(X_{ij}ln\frac{X_{ij}}{WH_{ij}}-X_{ij}&plus;WH_{ij})" target="_blank"><img src="https://latex.codecogs.com/gif.latex?argminJ(WH)=\sum_{ij}^{&space;}(X_{ij}ln\frac{X_{ij}}{WH_{ij}}-X_{ij}&plus;WH_{ij})" title="argminJ(WH)=\sum_{ij}^{ }(X_{ij}ln\frac{X_{ij}}{WH_{ij}}-X_{ij}+WH_{ij})"></a></p>
<h2 id="NMF算法应用"><a href="#NMF算法应用" class="headerlink" title="NMF算法应用"></a>NMF算法应用</h2><h3 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h3><p>现有某大学校园网的日志数据，290条大学生的校园网使用情况数据，数据包括用户ID，设备MAC地址，IP地址，开始上网时间，停止上网时间，上网时长，校园网套餐等。利用已有数据，分析学生的上网模式。</p>
<h3 id="需求-2"><a href="#需求-2" class="headerlink" title="需求"></a>需求</h3><p>NMF人脸数据特征提取<br>目标：Olivetti人脸数据共400个，每个数据是64*64大小。由于NMF分解得到的W矩阵相当于从原始矩阵中提取的特征，那么就可以使用NMF对400个人脸数据进行特征提取。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>通过设置k的大小，设置提取的特征的数目。在本实验中设置k=6，随后将提取的特征以图像的形式展示出来。</p>
<ol>
<li>建立工程，引入相关包</li>
<li>设置基本参数并加载数据</li>
<li>设置图像的展示方式</li>
<li>创建特征提取的对象NMF，使用PCA作为对比</li>
<li>降维后数据点的可视化</li>
</ol>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created on Wed Apr 24 10:41:47 2019</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: Jiaxi Wang</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> RandomState</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_olivetti_faces</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> decomposition</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">n_row, n_col = <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">n_components = n_row * n_col</span><br><span class="line">image_shape = (<span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="comment"># Load faces data</span></span><br><span class="line">dataset = fetch_olivetti_faces(shuffle=<span class="literal">True</span>, random_state=RandomState(<span class="number">0</span>))</span><br><span class="line">faces = dataset.data</span><br><span class="line"> </span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_gallery</span>(<span class="params">title, images, n_col=n_col, n_row=n_row</span>):</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">2.</span> * n_col, <span class="number">2.26</span> * n_row)) </span><br><span class="line">    plt.suptitle(title, size=<span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> i, comp <span class="keyword">in</span> <span class="built_in">enumerate</span>(images):</span><br><span class="line">        plt.subplot(n_row, n_col, i + <span class="number">1</span>)</span><br><span class="line">        vmax = <span class="built_in">max</span>(comp.<span class="built_in">max</span>(), -comp.<span class="built_in">min</span>())</span><br><span class="line"> </span><br><span class="line">        plt.imshow(comp.reshape(image_shape), cmap=plt.cm.gray,</span><br><span class="line">                   interpolation=<span class="string">&#x27;nearest&#x27;</span>, vmin=-vmax, vmax=vmax)</span><br><span class="line">        plt.xticks(())</span><br><span class="line">        plt.yticks(())</span><br><span class="line">    plt.subplots_adjust(<span class="number">0.01</span>, <span class="number">0.05</span>, <span class="number">0.99</span>, <span class="number">0.94</span>, <span class="number">0.04</span>, <span class="number">0.</span>)</span><br><span class="line"> </span><br><span class="line">     </span><br><span class="line">plot_gallery(<span class="string">&quot;First centered Olivetti faces&quot;</span>, faces[:n_components])</span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"> </span><br><span class="line">estimators = [</span><br><span class="line">    (<span class="string">&#x27;Eigenfaces - PCA using randomized SVD&#x27;</span>,</span><br><span class="line">         decomposition.PCA(n_components=<span class="number">6</span>,whiten=<span class="literal">True</span>)),</span><br><span class="line"> </span><br><span class="line">    (<span class="string">&#x27;Non-negative components - NMF&#x27;</span>,</span><br><span class="line">         decomposition.NMF(n_components=<span class="number">6</span>, init=<span class="string">&#x27;nndsvda&#x27;</span>, tol=<span class="number">5e-3</span>))</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> name, estimator <span class="keyword">in</span> estimators:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Extracting the top %d %s...&quot;</span> % (n_components, name))</span><br><span class="line">    <span class="built_in">print</span>(faces.shape)</span><br><span class="line">    estimator.fit(faces)</span><br><span class="line">    components_ = estimator.components_</span><br><span class="line">    plot_gallery(name, components_[:n_components])</span><br><span class="line"> </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h3><p><img src="/2019/04/24/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E7%9A%84%E9%99%8D%E7%BB%B4%E7%AE%97%E6%B3%95%E5%8F%8A%E5%BA%94%E7%94%A8/first_centered_olivetti_faces.png"><br><img src="/2019/04/24/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E7%9A%84%E9%99%8D%E7%BB%B4%E7%AE%97%E6%B3%95%E5%8F%8A%E5%BA%94%E7%94%A8/pca.png"><br><img src="/2019/04/24/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E7%9A%84%E9%99%8D%E7%BB%B4%E7%AE%97%E6%B3%95%E5%8F%8A%E5%BA%94%E7%94%A8/nmf.png"></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>机构如何自建OJ？云服务器+开源项目，满足一切需求！</title>
    <url>/2023/07/27/%E6%9C%BA%E6%9E%84%E5%A6%82%E4%BD%95%E8%87%AA%E5%BB%BAOJ%EF%BC%9F%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8+%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%EF%BC%8C%E6%BB%A1%E8%B6%B3%E4%B8%80%E5%88%87%E9%9C%80%E6%B1%82%EF%BC%81/</url>
    <content><![CDATA[<p>没时间写了家人们。接手教学主管以来，真的比以前忙了。先列个大纲吧。</p>
<span id="more"></span>
<h1 id="什么是OJ？"><a href="#什么是OJ？" class="headerlink" title="什么是OJ？"></a>什么是OJ？</h1><p>简单来说，OJ是Online Judge的简称。Online Judge翻译过来可以是「在线评测」。现在所谓的OJ，泛指OJ平台，也就是刷题平台。因此，本文主要介绍怎样搭建一个刷题平台。</p>
<h1 id="为什么要自建OJ？"><a href="#为什么要自建OJ？" class="headerlink" title="为什么要自建OJ？"></a>为什么要自建OJ？</h1><p>青少年编程学习尤其是信息学奥赛的学习，需要刷题。公开免费的刷题平台很多，如：一本通在线评测、洛谷等，为什么要自建OJ呢？</p>
<p>我认为有主要有三个方面。</p>
<p>第一，利于管理。</p>
<p>首先，</p>
<p>第二，利于宣传。</p>
<p>第三，个性化修改。</p>
<h1 id="自建OJ的蛋疼点在哪？"><a href="#自建OJ的蛋疼点在哪？" class="headerlink" title="自建OJ的蛋疼点在哪？"></a>自建OJ的蛋疼点在哪？</h1><h1 id="有哪些开源项目可以选择？"><a href="#有哪些开源项目可以选择？" class="headerlink" title="有哪些开源项目可以选择？"></a>有哪些开源项目可以选择？</h1><h1 id="我是怎么搭建EngeekerOJ的？"><a href="#我是怎么搭建EngeekerOJ的？" class="headerlink" title="我是怎么搭建EngeekerOJ的？"></a>我是怎么搭建EngeekerOJ的？</h1><h1 id="我是怎么搭建xxxOJ的？"><a href="#我是怎么搭建xxxOJ的？" class="headerlink" title="我是怎么搭建xxxOJ的？"></a>我是怎么搭建xxxOJ的？</h1>]]></content>
  </entry>
  <entry>
    <title>熟悉键盘</title>
    <url>/2023/03/13/%E7%86%9F%E6%82%89%E9%94%AE%E7%9B%98/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9c2bc493875ded896dafaafec93561c390a226fe82da09df9639a5a839ec87c5">c22241dd60b6b53d97ec8f6cf0df5c0dab2c5f2d5ff92e64652267f9d054b9b03c87329f8c42e169bc08455bf1d04d10f8963678d8a8952a9079415e6027f557c87660756ad38d9bdf33130d5eea30e1562bab989c9861c32586fc3f36e6f16736cea80ebb5d01a5b134b0b8551eef109be921eed995c637d1acff2c496d39ff5e9d141934b4a203862d3337d5b0dac6eba7f13ebbdc9f2ef75fd7851581189fb5b14fa3dab269d2ba814fe93d4297e3bb91c8bb59febd00832e54f25666403c18df0647ccfa9acc5b4a21ffed72187aa20e1347a90c229b8f68ae170d7b6d4d34b22d0a3deef0854122907b4f741113e2975a533b2e3e9d0dfd1468e43d7b990cfbdce8cc5c016f67db95a1bcb9d202bca0e80d75077090e21c75293ea253473d9de7b86a2b2b96ea1b55526f93b1aebb1daa5be024c728d1173f0fa92d35dafced812367a09580beae3ddcec66c8ecfdd81e64ad78df4f60570f1796c868694e45b19aedddb1f14adc4e9a98d3267f28ac0bd3cd31384ecf92a8e8a8a64730a011b2dee428e22891d55dfe6d435c0a18a72ef480b83836d906105591e258f211723629a09144706b02a790667dc9e49ea64ee0bde3cafb0215aba20e4a13fc376f6b70dba296f6f7e447c8c7cc63b0457ce6146d7596d1aab194a8cfaa225fcee9cb9f5df49f4b3fe2847ae257b23b6d850fa77cc581f17073dbc09b50d9f87a3f1be5028b5597dbf1cefbace0982a5428c5ca42548e92d25f9d1d72b16ec9f37e76fbd7e34721d87a0b65c659fdc587c2939d4066c1d89fbc75fd8402a2bc24cb184b10b5773bce2e69199d1a34241cf43313a9d170163fdd8148bd83f456e15302a2d240f8a8cda8d35e2683fbf2eb37d28428b0b08a5794876b29c0789a9c8cda77dadb2a94725d0584e20d3226ed64546ec1ec853b6c00780d0924f3c827a47a79d84655e63d290cd37065d5bab052d5c4e4550ee041ee50ffb3e78e257968b1ad24467ad9c6ab4cc0e29c83c91a2c9b72785ba0196881c70a6ac7c9869b9cfe95e0aa4c315ced85c4ee74515f52f9e61a18ad1438fd96b0f36ed5c4d185d674696491a57765098d3d7461dbbf8527ededb5990c350f25d69633aae4839e0305dfd752cb1705c3903c04c78490b0dfdefd1d0c5909b692589a0d745a2f59d74719565609f986ee750ea187d9ada7c24074cb2a77c4fac135c48c5a3cc8bba5799ccca57d74dfdff12aec5fafb5</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Please Enter Password</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>编译和解释的区别</title>
    <url>/2021/12/08/%E7%BC%96%E8%AF%91%E5%92%8C%E8%A7%A3%E9%87%8A%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>有些编程语言是编译运行，有些则是解释运行，那它们的区别是什么呢？</p>
<span id="more"></span>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>编译过程可以比作<strong>“笔译”</strong></p>
<p>编译程序对整个源程序经过编译处理，产生一个与源程序等价的目标程序，再通过连接程序将所有需要的程序组合成一个完整的可执行程序，最后运行。</p>
<p><img src="/2021/12/08/%E7%BC%96%E8%AF%91%E5%92%8C%E8%A7%A3%E9%87%8A%E7%9A%84%E5%8C%BA%E5%88%AB/%E7%BC%96%E8%AF%91.png" alt="编译"></p>
<h1 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h1><p>解释过程可以比作<strong>“同声翻译”</strong></p>
<p>解释程序对源程序逐句分析，将语句翻译成机器指令，然后立即执行指令。不会产生目标程序。</p>
<p><img src="/2021/12/08/%E7%BC%96%E8%AF%91%E5%92%8C%E8%A7%A3%E9%87%8A%E7%9A%84%E5%8C%BA%E5%88%AB/%E8%A7%A3%E9%87%8A.png" alt="解释"></p>
<blockquote>
<p>大学计算机（第7版) 龚沛曾 杨志强</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>许久没更新了…</title>
    <url>/2021/05/19/%E8%AE%B8%E4%B9%85%E6%B2%A1%E6%9B%B4%E6%96%B0%E4%BA%86%E2%80%A6/</url>
    <content><![CDATA[<p>许久没更新了，就是冒个泡</p>
]]></content>
  </entry>
  <entry>
    <title>趣味二维码生成</title>
    <url>/2021/07/15/%E8%B6%A3%E5%91%B3%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<p><img src="/2021/07/15/%E8%B6%A3%E5%91%B3%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90/qrcode.png" alt="qrcode"></p>
<span id="more"></span>

<p>qrcode、amzqr是两个简单有趣的库，用于二维码的生成，下面简单介绍一下。</p>
<h1 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h1><h1 id="使用qrcode快速生成二维码"><a href="#使用qrcode快速生成二维码" class="headerlink" title="使用qrcode快速生成二维码"></a>使用qrcode快速生成二维码</h1><p>首先需要安装qrcode。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install qrcode</span><br></pre></td></tr></table></figure>

<p>安装完成以后即可编写程序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> qrcode</span><br><span class="line"></span><br><span class="line">img = qrcode.make(<span class="string">&#x27;https://wangjiaxi.github.io&#x27;</span>)</span><br><span class="line">img.save(<span class="string">&#x27;test.png&#x27;</span>)</span><br><span class="line"><span class="comment"># 可以生成后二维码后直接打开</span></span><br><span class="line"><span class="comment"># img.show()  </span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/07/15/%E8%B6%A3%E5%91%B3%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90/qrcode.png" alt="qrcode"></p>
<h1 id="使用amzqr快速生成二维码"><a href="#使用amzqr快速生成二维码" class="headerlink" title="使用amzqr快速生成二维码"></a>使用amzqr快速生成二维码</h1><p>首先需要安装amzqr。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install amzqr</span><br></pre></td></tr></table></figure>

<p>安装完成以后即可编写程序。</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>题解：1066_满足条件的数累加</title>
    <url>/2023/08/16/%E9%A2%98%E8%A7%A3%EF%BC%9A1066-%E6%BB%A1%E8%B6%B3%E6%9D%A1%E4%BB%B6%E7%9A%84%E6%95%B0%E7%B4%AF%E5%8A%A0/</url>
    <content><![CDATA[<p>一篇超简单的题的题解示例</p>
<span id="more"></span>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>将正整数m和n之间(包括m和n)能被17整除的数累加，其中，<code>0&lt;m&lt;n&lt;1000</code>。</p>
<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>一行，包含两个整数m和n，其间，以一个空格间隔。</p>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出一行，包行一个整数，表示累加的结果。</p>
<h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">50 85</span><br></pre></td></tr></table></figure>
<h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">204</span><br></pre></td></tr></table></figure>

<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>用枚举法。</p>
<p>用for循环把从m到n的所有数列举出来，然后判断是否能被17整除，如果符合条件，就把这个数累加到变量ans中。</p>
<h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 1066：满足条件的数累加</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n, ans = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">17</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>嵩天老师Python(6)组合数据类型</title>
    <url>/2019/04/04/%E5%B5%A9%E5%A4%A9%E8%80%81%E5%B8%88Python(6)%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="集合类型及操作"><a href="#集合类型及操作" class="headerlink" title="集合类型及操作"></a>集合类型及操作</h1><h2 id="集合类型的定义"><a href="#集合类型的定义" class="headerlink" title="集合类型的定义"></a>集合类型的定义</h2><p>集合类型的<strong>定义</strong>：集合是多个元素的无序组合</p>
<span id="more"></span>

<ul>
<li>集合类型与数学中的集合概念一致</li>
<li>集合元素之间无序，每个元素唯一，不存在相同元素</li>
<li>集合元素不可更改，不能是可变数据类型</li>
<li>集合用大括号{}表示，元素间用逗号分隔</li>
<li>建立集合类型用{}或set()</li>
<li>建立空集合类型，必须使用set()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>A = &#123;<span class="string">&quot;python&quot;</span>,<span class="number">123</span>,(<span class="string">&quot;python&quot;</span>,<span class="number">123</span>)&#125;  <span class="comment">#使用&#123;&#125;建立集合</span></span><br><span class="line">&#123;<span class="string">&#x27;python&#x27;</span>, (<span class="string">&#x27;python&#x27;</span>, <span class="number">123</span>), <span class="number">123</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B = <span class="built_in">set</span>(<span class="string">&quot;pypy123&quot;</span>) <span class="comment">#使用set()建立集合</span></span><br><span class="line">&#123;<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>C = &#123;<span class="string">&quot;python&quot;</span>,<span class="number">123</span>,<span class="string">&quot;python&quot;</span>,<span class="number">123</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;python&#x27;</span>, <span class="number">123</span>&#125;</span><br></pre></td></tr></table></figure>

<p><strong>重点</strong></p>
<ul>
<li>集合用大括号{}表示，元素间用逗号分隔</li>
<li>集合元素之间无序</li>
<li>集合中每个元素唯一，不存在相同元素</li>
</ul>
<h2 id="集合操作符"><a href="#集合操作符" class="headerlink" title="集合操作符"></a>集合操作符</h2><p>集合间操作：并差交补</p>
<table>
<thead>
<tr>
<th>操作符及应用</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>`S</td>
<td>T`</td>
</tr>
<tr>
<td><code>S-T</code></td>
<td>返回一个新集合，包括在集合S但不在T中的元素</td>
</tr>
<tr>
<td><code>S&amp;T</code></td>
<td>返回一个新集合，包括同时在集合S和T中的元素</td>
</tr>
<tr>
<td><code>S^T</code></td>
<td>返回一个新集合，包括集合S和T中的非相同元素</td>
</tr>
<tr>
<td><code>S&lt;=T</code>或<code>S&lt;T </code></td>
<td>返回True/False,判断S和T的子集关系</td>
</tr>
<tr>
<td><code>S&gt;=T</code>或<code>S&gt;T</code></td>
<td>返回True/False,判断S和T的包含关系</td>
</tr>
</tbody></table>
<p>4个增强操作符</p>
<table>
<thead>
<tr>
<th>操作符及应用</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>`S</td>
<td>=T`</td>
</tr>
<tr>
<td><code>S-=T</code></td>
<td>更新集合S，包括在集合S但不在T中的元素</td>
</tr>
<tr>
<td><code>S&amp;=T</code></td>
<td>更新集合S，包括同时在集合S和T中的元素</td>
</tr>
<tr>
<td><code>S^=T</code></td>
<td>更新集合S，包括集合S和T中的非相同元素</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>A = &#123;<span class="string">&quot;p&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="number">123</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B = <span class="built_in">set</span>(<span class="string">&quot;pypy123&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A - B</span><br><span class="line">&#123;<span class="number">123</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B - A</span><br><span class="line">&#123;<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A &amp; B</span><br><span class="line">&#123;<span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;p&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A | B</span><br><span class="line">&#123;<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="number">123</span>, <span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A ^ B</span><br><span class="line">&#123;<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="number">123</span>, <span class="string">&#x27;1&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="集合处理方法"><a href="#集合处理方法" class="headerlink" title="集合处理方法"></a>集合处理方法</h2><table>
<thead>
<tr>
<th>操作函数或方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>S.add(x)</td>
<td>如果x不在集合S中，将x增加到S</td>
</tr>
<tr>
<td>S.discard(x)</td>
<td>移除S中元素x，如果x不在集合S中，不报错</td>
</tr>
<tr>
<td>S.remove(x)</td>
<td>移除S中元素x，如果x不在集合S中，产生KeyError异常</td>
</tr>
<tr>
<td>S.clear()</td>
<td>移除S中所有元素</td>
</tr>
<tr>
<td>S.pop()</td>
<td>随机返回S的一个元素，更新S，若S为空产生KeyError异常</td>
</tr>
<tr>
<td>S.copy()</td>
<td>返回集合S的一个副本</td>
</tr>
<tr>
<td>len(S)</td>
<td>返回集合S的元素个数</td>
</tr>
<tr>
<td>x in S</td>
<td>判断S中元素x，x在集合S中，返回True，否则返回False</td>
</tr>
<tr>
<td>x not in S</td>
<td>判断S中元素x，x不在集合S中，返回False，否则返回True</td>
</tr>
<tr>
<td>set(x)</td>
<td>将其他类型变量x转换为集合类型</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>A = &#123;<span class="string">&quot;p&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="number">123</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> item <span class="keyword">in</span> A:</span><br><span class="line">	<span class="built_in">print</span>(item,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">y123p</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line">	    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		    <span class="built_in">print</span>(A.pop(), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">	    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">y123p</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A</span><br><span class="line"><span class="built_in">set</span>()</span><br></pre></td></tr></table></figure>

<h2 id="集合类型应用场景"><a href="#集合类型应用场景" class="headerlink" title="集合类型应用场景"></a>集合类型应用场景</h2><p>包含关系比较</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;p&quot;</span> <span class="keyword">in</span> &#123;<span class="string">&quot;p&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="number">123</span>&#125;</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">&quot;p&quot;</span>,<span class="string">&quot;y&quot;</span>&#125; &gt;= &#123;<span class="string">&quot;p&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="number">123</span>&#125;</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>数据去重：集合类型所有元素无重复</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="string">&quot;p&quot;</span>,<span class="string">&quot;p&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="number">123</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="built_in">set</span>(ls)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;y&#x27;</span>, <span class="number">123</span>, <span class="string">&#x27;p&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lt = <span class="built_in">list</span>(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lt</span><br><span class="line">[<span class="string">&#x27;y&#x27;</span>, <span class="number">123</span>, <span class="string">&#x27;p&#x27;</span>]</span><br></pre></td></tr></table></figure>


<h1 id="序列类型及操作"><a href="#序列类型及操作" class="headerlink" title="序列类型及操作"></a>序列类型及操作</h1><h2 id="序列类型定义：序列是具有先后关系的一组元素"><a href="#序列类型定义：序列是具有先后关系的一组元素" class="headerlink" title="序列类型定义：序列是具有先后关系的一组元素"></a>序列类型定义：序列是具有先后关系的一组元素</h2><ul>
<li>序列是一维元素的向量，元素类型可以不同</li>
<li>类似数学元素序列</li>
<li>元素间由序号引导，通过下标访问序列的特定元素</li>
</ul>
<p>序列是一个基类类型：</p>
<pre class="mermaid">graph LR
序列类型-->字符串类型
序列类型-->元组类型
序列类型-->列表类型</pre>

<h2 id="序列类型通用操作符"><a href="#序列类型通用操作符" class="headerlink" title="序列类型通用操作符"></a>序列类型通用操作符</h2><table>
<thead>
<tr>
<th>操作符及应用</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>x in s</td>
<td>如果x是序列s的元素，则返回True，否则返回False</td>
</tr>
<tr>
<td>x not in s</td>
<td>如果x是序列s的元素，则返回False，否则返回True</td>
</tr>
<tr>
<td>s + t</td>
<td>连接两个序列s和t</td>
</tr>
<tr>
<td>s*n 或 n*s</td>
<td>将序列s复制n次</td>
</tr>
<tr>
<td>s[i]</td>
<td>索引，返回s中第i个元素，i是序列的序号</td>
</tr>
<tr>
<td>s[i:j]或s[i:j:k]</td>
<td>切片，返回序列s中第i到j以k为步长的元素子序列</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#::-1可以取反</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="string">&quot;python&quot;</span>,<span class="number">123</span>,<span class="string">&quot;.io&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls[::-<span class="number">1</span>]</span><br><span class="line">[<span class="string">&#x27;.io&#x27;</span>, <span class="number">123</span>, <span class="string">&#x27;python&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&quot;python123.io&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[::-<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;oi.321nohtyp&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="序列类型通用函数和方法"><a href="#序列类型通用函数和方法" class="headerlink" title="序列类型通用函数和方法"></a>序列类型通用函数和方法</h2><p>5个函数和方法</p>
<table>
<thead>
<tr>
<th>函数和方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>len(s)</td>
<td>返回序列s的长度</td>
</tr>
<tr>
<td>min(s)</td>
<td>返回序列s中的最小元素，s中的元素需要可比较</td>
</tr>
<tr>
<td>max(s)</td>
<td>返回序列s中的最大元素，s中的元素需要可比较</td>
</tr>
<tr>
<td>s.index(x)或s.index(x,i,j)</td>
<td>返回序列s从i开始到j位置中第一次出现元素x的位置</td>
</tr>
<tr>
<td>s.count(x)</td>
<td>返回序列s中出现x的总次数</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="string">&quot;python&quot;</span>,<span class="number">123</span>,<span class="string">&quot;.io&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(ls)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&quot;python123.io&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(s)</span><br><span class="line"><span class="string">&#x27;y&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="元组类型及操作"><a href="#元组类型及操作" class="headerlink" title="元组类型及操作"></a>元组类型及操作</h2><h3 id="元组类型的定义"><a href="#元组类型的定义" class="headerlink" title="元组类型的定义"></a>元组类型的定义</h3><p>元组是序列类型的一种扩展</p>
<ul>
<li>元组是一种序列类型，一旦创建就不能被修改</li>
<li>使用小括号()或tuple()创建，元素间用逗号,分隔</li>
<li>可以使用或不使用小括号</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>creature = <span class="string">&quot;cat&quot;</span>,<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;tiger&quot;</span>,<span class="string">&quot;human&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>creature</span><br><span class="line">(<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="string">&#x27;human&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>color = (<span class="number">0x001100</span>,<span class="string">&quot;blue&quot;</span>,creature)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>color</span><br><span class="line">(<span class="number">4352</span>, <span class="string">&#x27;blue&#x27;</span>, (<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="string">&#x27;human&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="元组类型操作"><a href="#元组类型操作" class="headerlink" title="元组类型操作"></a>元组类型操作</h3><ul>
<li>元组继承序列类型的全部通用操作</li>
<li>因为元组创建后不能修改，所以没有特殊操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>creature = <span class="string">&quot;cat&quot;</span>,<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;tiger&quot;</span>,<span class="string">&quot;human&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>creature[::-<span class="number">1</span>]</span><br><span class="line">(<span class="string">&#x27;human&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>color = (<span class="number">0x001100</span>,<span class="string">&quot;blue&quot;</span>,creature)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>color[-<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;tiger&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="列表类型及操作"><a href="#列表类型及操作" class="headerlink" title="列表类型及操作"></a>列表类型及操作</h2><h3 id="列表类型定义"><a href="#列表类型定义" class="headerlink" title="列表类型定义"></a>列表类型定义</h3><p>列表是序列类型的一种扩展，十分常用</p>
<ul>
<li>列表是一种序列类型，创建后可以随意被修改</li>
<li>使用方括号[]或list()创建，元素间用逗号,分隔</li>
<li>可以使用或不使用方括号</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;tiger&quot;</span>,<span class="number">1024</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls</span><br><span class="line">[<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="number">1024</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lt = ls</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lt</span><br><span class="line">[<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="number">1024</span>]</span><br><span class="line"><span class="comment">#赋值并没有创建新列表，而相当于重新命名（类似指针）</span></span><br></pre></td></tr></table></figure>
<h3 id="列表类型操作函数和方法"><a href="#列表类型操作函数和方法" class="headerlink" title="列表类型操作函数和方法"></a>列表类型操作函数和方法</h3><table>
<thead>
<tr>
<th>函数和方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ls[i] = x</td>
<td>替换列表ls第i元素为x</td>
</tr>
<tr>
<td>ls[i:j:k] = lt</td>
<td>用列表lt替换ls切片后所对应元素子列表</td>
</tr>
<tr>
<td>del ls[i]</td>
<td>删除列表ls第i元素</td>
</tr>
<tr>
<td>del ls[i:j:k]</td>
<td>删除列表ls中第i到第j以k为步长的元素</td>
</tr>
<tr>
<td>ls += lt</td>
<td>更新列表ls，将lt列表的元素增加到ls中</td>
</tr>
<tr>
<td>ls *= n</td>
<td>更新列表ls，其元素重复n次</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;tiger&quot;</span>,<span class="number">1024</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls[<span class="number">1</span>:<span class="number">2</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls</span><br><span class="line">[<span class="string">&#x27;cat&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="number">1024</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> ls[::<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="string">&#x27;tiger&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls*<span class="number">2</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="string">&#x27;tiger&#x27;</span>]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>函数或方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ls.append(x)</td>
<td>在列表ls最后增加一个元素x</td>
</tr>
<tr>
<td>ls.clear()</td>
<td>删除列表ls中的所有元素</td>
</tr>
<tr>
<td>ls.copy()</td>
<td>生成一个新列表，赋值ls中所有元素</td>
</tr>
<tr>
<td>ls.insert(i,x)</td>
<td>在列表ls的第i位置增加元素x</td>
</tr>
<tr>
<td>ls.pop(i)</td>
<td>将列表ls中第i位置元素取出并删除该元素</td>
</tr>
<tr>
<td>ls.remove(x)</td>
<td>将列表ls中出现的第一个元素x删除</td>
</tr>
<tr>
<td>ls.reverse()</td>
<td>将列表ls中的元素反转</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;tiger&quot;</span>,<span class="number">1024</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls.append(<span class="number">1234</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls</span><br><span class="line">[<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="number">1024</span>, <span class="number">1234</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls.insert(<span class="number">3</span>,<span class="string">&quot;human&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls</span><br><span class="line">[<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="string">&#x27;human&#x27;</span>, <span class="number">1024</span>, <span class="number">1234</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls</span><br><span class="line">[<span class="number">1234</span>, <span class="number">1024</span>, <span class="string">&#x27;human&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="序列类型应用场景"><a href="#序列类型应用场景" class="headerlink" title="序列类型应用场景"></a>序列类型应用场景</h2><ul>
<li>元组用于元素不改变的应用场景，更多应用于固定搭配场景</li>
<li>列表更加灵活，它是最常用的序列类型</li>
<li>最主要作用：表示一组有序数据，进而操作它们</li>
</ul>
<h3 id="元素遍历"><a href="#元素遍历" class="headerlink" title="元素遍历"></a>元素遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ls :</span><br><span class="line">    &lt;语句块&gt;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> tp :</span><br><span class="line">    &lt;语句块&gt;</span><br></pre></td></tr></table></figure>

<h3 id="数据保护"><a href="#数据保护" class="headerlink" title="数据保护"></a>数据保护</h3><p>如果不希望数据被程序所改变，转换成元组类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;tiger&quot;</span>,<span class="number">1024</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lt = <span class="built_in">tuple</span>(ls)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lt</span><br><span class="line">(<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;tiger&#x27;</span>, <span class="number">1024</span>)</span><br></pre></td></tr></table></figure>

<h1 id="实例：基本统计值计算"><a href="#实例：基本统计值计算" class="headerlink" title="实例：基本统计值计算"></a>实例：基本统计值计算</h1><p>实例：基本统计值计算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#CalStatisticsV1.py</span></span><br><span class="line"><span class="comment">#获取用户不定长度的输入</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNum</span>():</span></span><br><span class="line">      nums = []</span><br><span class="line">      iNumStr = <span class="built_in">input</span>(<span class="string">&quot;请输入数字（回车退出）：&quot;</span>)</span><br><span class="line">      <span class="keyword">while</span> iNumStr != <span class="string">&quot;&quot;</span>:</span><br><span class="line">            nums.append(<span class="built_in">eval</span>(iNumStr))</span><br><span class="line">            iNumStr = <span class="built_in">input</span>(<span class="string">&quot;请输入数字（回车退出）：&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算平均值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mean</span>(<span class="params">numbers</span>):</span></span><br><span class="line">      s = <span class="number">0.0</span></span><br><span class="line">      <span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">            s = s + num</span><br><span class="line">      <span class="keyword">return</span> s / <span class="built_in">len</span>(numbers)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算方差</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dev</span>(<span class="params">numbers, mean</span>):</span></span><br><span class="line">      sdev = <span class="number">0.0</span></span><br><span class="line">      <span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">            sdev = sdev + (num - mean)**<span class="number">2</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">pow</span>(sdev / (<span class="built_in">len</span>(numbers)-<span class="number">1</span>), <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算中位数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">median</span>(<span class="params">numbers</span>):</span></span><br><span class="line">      <span class="built_in">sorted</span>(numbers)</span><br><span class="line">      size = <span class="built_in">len</span>(numbers)</span><br><span class="line">      <span class="keyword">if</span> size % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            med = (numbers[size//<span class="number">2</span>-<span class="number">1</span>] + numbers[size//<span class="number">2</span>])/<span class="number">2</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">            med = numbers[size//<span class="number">2</span>]</span><br><span class="line">      <span class="keyword">return</span> med</span><br><span class="line"></span><br><span class="line">n = getNum()</span><br><span class="line">m = mean(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;平均值:&#123;&#125;,方差:&#123;:.2&#125;,中位数:&#123;&#125;.&quot;</span>.<span class="built_in">format</span>(m, dev(n,m), median(n)))</span><br></pre></td></tr></table></figure>
<h1 id="字典类型及操作"><a href="#字典类型及操作" class="headerlink" title="字典类型及操作"></a>字典类型及操作</h1><h2 id="字典类型定义"><a href="#字典类型定义" class="headerlink" title="字典类型定义"></a>字典类型定义</h2><p>理解“映射”：映射是一种键（索引）和值（数据）的对应<br>字典类型是“映射”的体现</p>
<ul>
<li>键值对：键是数据索引的扩展</li>
<li>字典是键值对的集合，键值对之间无序</li>
<li>采用大括号{}和dict()创建，键值对用冒号:表示</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&quot;中国&quot;</span>:<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;美国&quot;</span>:<span class="string">&quot;华盛顿&quot;</span>,<span class="string">&quot;法国&quot;</span>:<span class="string">&quot;巴黎&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;中国&#x27;</span>: <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>: <span class="string">&#x27;华盛顿&#x27;</span>, <span class="string">&#x27;法国&#x27;</span>: <span class="string">&#x27;巴黎&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&quot;中国&quot;</span>]</span><br><span class="line"><span class="string">&#x27;北京&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="字典类型操作函数及方法"><a href="#字典类型操作函数及方法" class="headerlink" title="字典类型操作函数及方法"></a>字典类型操作函数及方法</h2><table>
<thead>
<tr>
<th>函数或方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>del d[k]</td>
<td>删除字典d中键k对应的数据值</td>
</tr>
<tr>
<td>k in d</td>
<td>判断键k是否在字典d中，如果在则返回True，否则False</td>
</tr>
<tr>
<td>d.keys()</td>
<td>返回字典d所有的键信息</td>
</tr>
<tr>
<td>d.values()</td>
<td>返回字典d所有的值信息</td>
</tr>
<tr>
<td>d.items()</td>
<td>返回字典d所有的键值对信息</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">&quot;中国&quot;</span>:<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;美国&quot;</span>:<span class="string">&quot;华盛顿&quot;</span>,<span class="string">&quot;法国&quot;</span>:<span class="string">&quot;巴黎&quot;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;中国&quot;</span> <span class="keyword">in</span> d</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.keys()</span><br><span class="line">dict_keys([<span class="string">&#x27;中国&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;法国&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.values()</span><br><span class="line">dict_values([<span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;华盛顿&#x27;</span>, <span class="string">&#x27;巴黎&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.items()</span><br><span class="line">dict_items([(<span class="string">&#x27;中国&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>), (<span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;华盛顿&#x27;</span>), (<span class="string">&#x27;法国&#x27;</span>, <span class="string">&#x27;巴黎&#x27;</span>)])</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>函数或方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>d.get(k, <default>)</default></td>
<td>键k存在，则返回相应值，不在则返回<default>值</default></td>
</tr>
<tr>
<td>d.pop(k, <default>)</default></td>
<td>键k存在，则取出相应值，不在则返回<default>值</default></td>
</tr>
<tr>
<td>d.popitem()</td>
<td>随机从字典d中取出一个键值对，以元组形式返回</td>
</tr>
<tr>
<td>d.clear()</td>
<td>删除所有键值对</td>
</tr>
<tr>
<td>len(d)</td>
<td>返回字典d中元素的个数</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;伊斯兰堡&quot;</span>)</span><br><span class="line"><span class="string">&#x27;北京&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">&quot;巴基斯坦&quot;</span>,<span class="string">&quot;伊斯兰堡&quot;</span>)</span><br><span class="line"><span class="string">&#x27;伊斯兰堡&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.popitem()</span><br><span class="line">(<span class="string">&#x27;法国&#x27;</span>, <span class="string">&#x27;巴黎&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="字典类型应用场景"><a href="#字典类型应用场景" class="headerlink" title="字典类型应用场景"></a>字典类型应用场景</h2><h3 id="映射的表达"><a href="#映射的表达" class="headerlink" title="映射的表达"></a>映射的表达</h3><ul>
<li>映射无处不在，键值对无处不在</li>
<li>例如：统计数据出现的次数，数据是键，次数是值</li>
<li>最主要作用：表达键值对数据，进而操作它们</li>
</ul>
<h3 id="元素遍历-1"><a href="#元素遍历-1" class="headerlink" title="元素遍历"></a>元素遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d: </span><br><span class="line">    &lt;语句块&gt;</span><br></pre></td></tr></table></figure>

<h1 id="jieba库的使用"><a href="#jieba库的使用" class="headerlink" title="jieba库的使用"></a>jieba库的使用</h1><h2 id="jieba库的基本介绍"><a href="#jieba库的基本介绍" class="headerlink" title="jieba库的基本介绍"></a>jieba库的基本介绍</h2><p>概述：jieba是优秀的中文分词第三方库</p>
<ul>
<li>中文文本需要通过分词获得单个的词语</li>
<li>jieba是优秀的中文分词第三方库，需要额外安装</li>
<li>jieba库提供三种分词模式，最简单只需掌握一个函数</li>
</ul>
<h2 id="jieba库的安装"><a href="#jieba库的安装" class="headerlink" title="jieba库的安装"></a>jieba库的安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install jieba</span><br></pre></td></tr></table></figure>
<h2 id="jieba分词的原理"><a href="#jieba分词的原理" class="headerlink" title="jieba分词的原理"></a>jieba分词的原理</h2><p>jieba分词依靠中文词库</p>
<ul>
<li>利用一个中文词库，确定汉字之间的关联概率</li>
<li>汉字之间概率大的组成词组，形成分词结果</li>
<li>除了分词，用户还可以添加自定义的词组</li>
</ul>
<h2 id="jieba分词的三种模式"><a href="#jieba分词的三种模式" class="headerlink" title="jieba分词的三种模式"></a>jieba分词的三种模式</h2><p>精确模式、全模式、搜索引擎模式</p>
<ul>
<li>精确模式：把文本精确地切分开，不存在冗余单词</li>
<li>全模式：把文本中所有可能的词语都扫描出来，有冗余</li>
<li>搜索引擎模式：在精确模式基础上，对长词再次切分</li>
</ul>
<h2 id="jieba库常用函数"><a href="#jieba库常用函数" class="headerlink" title="jieba库常用函数"></a>jieba库常用函数</h2><table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>jiaba.lcut(s)</td>
<td>精确模式，返回一个列表类型的分词结果</td>
</tr>
<tr>
<td>jieba.lcut(s, cut_all=True)</td>
<td>全模式，返回一个列表类型的分词结果，存在冗余</td>
</tr>
<tr>
<td>jieba.lcut_for_search(s)</td>
<td>搜索引擎模式，返回一个列表类型的分词结果，存在冗余</td>
</tr>
<tr>
<td>jieba.add_word(w)</td>
<td>向分词词典增加新词w</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> jieba</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>jieba.lcut(<span class="string">&quot;中国是一个伟大的国家&quot;</span>)</span><br><span class="line">Building prefix <span class="built_in">dict</span> <span class="keyword">from</span> the default dictionary ...</span><br><span class="line">Dumping model to file cache C:\Users\dreamorz\AppData\Local\Temp\jieba.cache</span><br><span class="line">Loading model cost <span class="number">1.020</span> seconds.</span><br><span class="line">Prefix <span class="built_in">dict</span> has been built succesfully.</span><br><span class="line">[<span class="string">&#x27;中国&#x27;</span>, <span class="string">&#x27;是&#x27;</span>, <span class="string">&#x27;一个&#x27;</span>, <span class="string">&#x27;伟大&#x27;</span>, <span class="string">&#x27;的&#x27;</span>, <span class="string">&#x27;国家&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>jieba.lcut(<span class="string">&quot;中国是一个伟大的国家&quot;</span>,cut_all=<span class="literal">True</span>)</span><br><span class="line">[<span class="string">&#x27;中国&#x27;</span>, <span class="string">&#x27;国是&#x27;</span>, <span class="string">&#x27;一个&#x27;</span>, <span class="string">&#x27;伟大&#x27;</span>, <span class="string">&#x27;的&#x27;</span>, <span class="string">&#x27;国家&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>jieba.lcut_for_search(<span class="string">&quot;中华人民共和国是伟大的&quot;</span>)</span><br><span class="line">[<span class="string">&#x27;中华&#x27;</span>, <span class="string">&#x27;华人&#x27;</span>, <span class="string">&#x27;人民&#x27;</span>, <span class="string">&#x27;共和&#x27;</span>, <span class="string">&#x27;共和国&#x27;</span>, <span class="string">&#x27;中华人民共和国&#x27;</span>, <span class="string">&#x27;是&#x27;</span>, <span class="string">&#x27;伟大&#x27;</span>, <span class="string">&#x27;的&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>jieba.add_word(<span class="string">&quot;蟒蛇语言&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="jieba分词要点"><a href="#jieba分词要点" class="headerlink" title="jieba分词要点"></a>jieba分词要点</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">jieba.lcut(s)</span><br></pre></td></tr></table></figure>

<h1 id="实例：文本词频统计（英文-amp-中文）"><a href="#实例：文本词频统计（英文-amp-中文）" class="headerlink" title="实例：文本词频统计（英文&amp;中文）"></a>实例：文本词频统计（英文&amp;中文）</h1><h2 id="Hamlet词频统计"><a href="#Hamlet词频统计" class="headerlink" title="Hamlet词频统计"></a>Hamlet词频统计</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#CalHamletV1.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getText</span>():</span></span><br><span class="line">      txt = <span class="built_in">open</span>(<span class="string">&quot;E:/python/hamlet.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).read()</span><br><span class="line">      txt = txt.lower()</span><br><span class="line">      <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">&#x27;!&quot;#$%&amp;()*+,-./;:&lt;=&gt;?@[\\]^_&#123;|&#125;~&#x27;</span>:</span><br><span class="line">            txt = txt.replace(ch, <span class="string">&quot; &quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> txt</span><br><span class="line"></span><br><span class="line">hamletTxt = getText()</span><br><span class="line">words = hamletTxt.split()</span><br><span class="line">counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">      counts[word] = counts.get(word,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">items = <span class="built_in">list</span>(counts.items())</span><br><span class="line">items.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>],reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">      word, count = items[i]</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;</span>.<span class="built_in">format</span>(word, count))</span><br></pre></td></tr></table></figure>

<h2 id="《三国演义》人物出场统计"><a href="#《三国演义》人物出场统计" class="headerlink" title="《三国演义》人物出场统计"></a>《三国演义》人物出场统计</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#CalThreeKingdomsV1.py</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">txt = <span class="built_in">open</span>(<span class="string">&quot;threekingdoms.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>).read()</span><br><span class="line">excludes = &#123;<span class="string">&quot;将军&quot;</span>,<span class="string">&quot;却说&quot;</span>,<span class="string">&quot;二人&quot;</span>,<span class="string">&quot;不可&quot;</span>,<span class="string">&quot;荆州&quot;</span>,<span class="string">&quot;不能&quot;</span>,<span class="string">&quot;如此&quot;</span>,<span class="string">&quot;商议&quot;</span>,<span class="string">&quot;如何&quot;</span>,<span class="string">&quot;今日&quot;</span>,<span class="string">&quot;不敢&quot;</span>,<span class="string">&quot;魏兵&quot;</span>,<span class="string">&quot;陛下&quot;</span>,<span class="string">&quot;一人&quot;</span>,<span class="string">&quot;军士&quot;</span>,<span class="string">&quot;左右&quot;</span>,<span class="string">&quot;军马&quot;</span>,<span class="string">&quot;主公&quot;</span>,<span class="string">&quot;引兵&quot;</span>,<span class="string">&quot;次日&quot;</span>,<span class="string">&quot;大喜&quot;</span>,<span class="string">&quot;天下&quot;</span>,<span class="string">&quot;东吴&quot;</span>,<span class="string">&quot;于是&quot;</span>&#125;</span><br><span class="line">words = jieba.lcut(txt)</span><br><span class="line">counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">len</span>(word) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">elif</span> word == <span class="string">&quot;诸葛亮&quot;</span> <span class="keyword">or</span> word == <span class="string">&quot;孔明曰&quot;</span>:</span><br><span class="line">            rword = <span class="string">&quot;孔明&quot;</span></span><br><span class="line">      <span class="keyword">elif</span> word == <span class="string">&quot;关公&quot;</span> <span class="keyword">or</span> word == <span class="string">&quot;云长&quot;</span>:</span><br><span class="line">            rword = <span class="string">&quot;关羽&quot;</span></span><br><span class="line">      <span class="keyword">elif</span> word == <span class="string">&quot;玄德&quot;</span> <span class="keyword">or</span> word == <span class="string">&quot;玄德曰&quot;</span>:</span><br><span class="line">            rword = <span class="string">&quot;刘备&quot;</span></span><br><span class="line">      <span class="keyword">elif</span> word == <span class="string">&quot;孟德&quot;</span> <span class="keyword">or</span> word == <span class="string">&quot;丞相&quot;</span>:</span><br><span class="line">            rword = <span class="string">&quot;曹操&quot;</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">            rword = word</span><br><span class="line">      counts[rword] = counts.get(rword,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> excludes:</span><br><span class="line">      <span class="keyword">del</span> counts[word]</span><br><span class="line">items = <span class="built_in">list</span>(counts.items())</span><br><span class="line">items.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">      word, count = items[i]</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;</span>.<span class="built_in">format</span>(word, count))</span><br></pre></td></tr></table></figure>

<h1 id="资料下载"><a href="#资料下载" class="headerlink" title="资料下载"></a>资料下载</h1><ul>
<li><a href="https://image-1253398535.cos.ap-beijing.myqcloud.com/python(6)/hamlet.txt">hamlet.txt</a></li>
<li><a href="https://image-1253398535.cos.ap-beijing.myqcloud.com/python(6)/threekingdoms.txt">threekingdoms.txt</a></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
